config.py = OK
ROOT_DIR       = '/Users/puiseux/GitHub/spleen/spleen'
RUNS_DIR       = '/Users/puiseux/GitHub/spleen/spleen/work'
SOURCES_DIR    = '/Users/puiseux/GitHub/spleen/spleen/sources'
DATA_DIR       = '/Users/puiseux/GitHub/spleen/spleen/data'
VALIDATION_DIR = '/Users/puiseux/GitHub/spleen/spleen/validation'
VTK_ENABLED    = 'True'
[testBlocJonc] (module testsplinecomposee.py)
==============
testBlocJonc()
==============


[testBlocJonc] (module testsplinecomposee.py)

    Construction et dump 'blocjonc.spl'
    -----------------------------------

{'classename': 'NSplineSimple',
 'cpoints': [[0.27552797903108656, 0.2341996960645674],
             [0.27776116433897663, 0.23451888330060086],
             [0.28057944368301985, 0.23487977877638844],
             [0.2831860014998711, 0.23517216122003828],
             [0.28563124422356406, 0.23541046525075884],
             [0.28793109496696406, 0.2356029423282298],
             [0.29061309135475233, 0.2357887795011154],
             [0.2959949955140289, 0.2360367288883004],
             [0.3002296683109588, 0.2361149261580133],
             [0.30394017053081207, 0.23609895310679024],
             [0.30651950477892964, 0.23604134749600678],
             [0.3075705493213973, 0.2360069284489261],
             [0.3102760187606314, 0.23588914274612344],
             [0.3123300962752122, 0.23577159604004388],
             [0.31525030956831407, 0.23556259656486506],
             [0.3177086866134289, 0.23534840417935024],
             [0.3199606791460607, 0.23512139438334623],
             [0.3218098268914256, 0.23491289086601064],
             [0.32502746128775356, 0.23450233742099286],
             [0.3286892621452795, 0.2339608508356715],
             [0.33279105755662086, 0.23325953082293138],
             [0.3361104722583435, 0.23261786052888453],
             [0.33939553346165013, 0.23191676190935015],
             [0.34207664045206687, 0.231295282083924],
             [0.34540206911422716, 0.230462130445532],
             [0.34765771678133833, 0.22985724285653694],
             [0.3498725353284681, 0.22921626962806116],
             [0.3517397050138574, 0.2286401135836062],
             [0.3533438327669525, 0.22814512488057925],
             [0.3543285023508287, 0.22784128354415],
             [0.3544044610763625, 0.22824572217156056],
             [0.3545448721585452, 0.22857079548247702],
             [0.35475116867854567, 0.22886332763674647],
             [0.35506859026297444, 0.22914696315352165],
             [0.3555036120248377, 0.22936488465966942],
             [0.3560430837427135, 0.22945423675692425],
             [0.3562989002815832, 0.22943652892273653],
             [0.356509416216944, 0.22939260552421978],
             [0.3567878465014116, 0.22928970181185251],
             [0.35887567746373306, 0.23372023952449342],
             [0.35887295593216245, 0.23372168390357034],
             [0.3567859067103331, 0.2292928051768194],
             [0.3565074764258581, 0.22939570888918756],
             [0.3562969604905115, 0.22943963228770042],
             [0.3560411439516316, 0.22945734012189264],
             [0.3555016722337627, 0.22936798802463523],
             [0.35506665047188907, 0.22915006651849204],
             [0.354749228887474, 0.22886643100170975],
             [0.3545429323674632, 0.22857389884744464],
             [0.3544025212852908, 0.22824882553652473],
             [0.3543265625597502, 0.22784438690911685],
             [0.3355509728240273, 0.2367510468860668],
             [0.33407016189379996, 0.24090755753938287],
             [0.33765189581499894, 0.24843803391892272],
             [0.34180840646840527, 0.24991884484922344],
             [0.3605810203293487, 0.24101902900250868],
             [0.36035481498119765, 0.2407837599573603],
             [0.36010079546718127, 0.24034122472898758],
             [0.3599959452828624, 0.23992311161225965],
             [0.3599993376342485, 0.23948724890683692],
             [0.36008255515987003, 0.2391445877696913],
             [0.3602816345989418, 0.23875251373640483],
             [0.3605431570753992, 0.2384513129096224],
             [0.36096913833578903, 0.2381665704377432],
             [0.35889187342514495, 0.2337582620684],
             [0.3588932334310196, 0.23375768987392448],
             [0.36097099929925797, 0.23816706136023796],
             [0.36054501803886774, 0.2384518038321152],
             [0.36028349556241035, 0.23875300465889765],
             [0.3600844161233384, 0.2391450786921841],
             [0.3600011985977099, 0.2394877398293316],
             [0.35999780624634575, 0.23992360253475117],
             [0.3601026564306504, 0.24034171565148257],
             [0.3603566759446589, 0.240784250879855],
             [0.3605828812928317, 0.24101951992499862],
             [0.35641976669724296, 0.24461308003407778],
             [0.3532063315845615, 0.24738688603173997],
             [0.3489537947012088, 0.251057634591682],
             [0.34653008614140973, 0.2531497562943747],
             [0.34418756335618667, 0.2551717992246242],
             [0.3404668266761112, 0.25838350301100876],
             [0.33885994829962013, 0.2595287590139645],
             [0.3374452955323096, 0.2601513246886337],
             [0.3353994689667619, 0.260572825185526],
             [0.33396982093699384, 0.26057075319876133],
             [0.3287091423419799, 0.2600974192528208],
             [0.3239370246827379, 0.2595530436234631],
             [0.3194583662840662, 0.2589418472489982],
             [0.315927367579168, 0.2583909449038786],
             [0.31220952791965595, 0.25774453616201065],
             [0.30915970172753526, 0.2571630156865497],
             [0.30517633310236275, 0.25633322861206714],
             [0.3017066310672884, 0.25554489566611654],
             [0.2974853624500062, 0.25450244235024166],
             [0.29334971263038107, 0.25339111388951496],
             [0.2937191742270814, 0.2528619938842042],
             [0.2938683486389138, 0.25216826187784697],
             [0.29370383399593486, 0.2514295856301162],
             [0.2932573301362996, 0.2508502231339361],
             [0.29262706989721055, 0.25051448545731614],
             [0.2922934493537115, 0.25045356056517537],
             [0.29196118372107743, 0.2504587069622604],
             [0.29133258214933627, 0.25065728562273326],
             [0.29071044449633876, 0.25123684910424293],
             [0.2904932834849892, 0.25173496555338964],
             [0.29048807489806727, 0.25256921270195376],
             [0.28769586146575427, 0.25164207795319044],
             [0.2842937625592903, 0.25041363245228804],
             [0.28137044579397785, 0.24926893578884474],
             [0.2789491527920505, 0.2482566132646084],
             [0.27631308699768986, 0.247086436728791],
             [0.2740233734489589, 0.24601078384287656],
             [0.2719315993718473, 0.2449785902652236],
             [0.2699477385486769, 0.2439547285511419],
             [0.2675600912088964, 0.24266273747853112],
             [0.2659009587466288, 0.24172538842604116],
             [0.2639469680596829, 0.2405785520532319],
             [0.26289795343858546, 0.23994323674962895],
             [0.2618407972570983, 0.23896074098243916],
             [0.2612454536319035, 0.23784548667927044],
             [0.2610328596944248, 0.2368585455177202],
             [0.2610567456137555, 0.23592349790094116],
             [0.26126291500876814, 0.2350955686177669],
             [0.26167563421128104, 0.23426572295805093],
             [0.26220853970397406, 0.23360467773082],
             [0.2631192381101015, 0.23291410108076946],
             [0.26424604141275765, 0.23248796331553964],
             [0.2650612882106375, 0.23239468624745077],
             [0.2656272263083685, 0.2324261072745586],
             [0.26905362261950744, 0.23310667068143962],
             [0.27115188993926825, 0.23348838485791978],
             [0.2733439148677032, 0.23385895329686748],
             [0.27552797903108656, 0.2341996960645674]],
 'methode': ['ius', 1],
 'mode': 'linear',
 'name': u'bloc-jonc',
 'nbpe': 30,
 'precision': 1000,
 'role': u'renfort'}
[testBlocJonc] (module testsplinecomposee.py)
<NSplineComposee>
                     name = bloc-jonc
                     role = renfort
          nb pts controle = 133
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('ius', 3), ('ius', 3), ('ius', 1), ('ius', 3), ('ius', 1), ('ius', 3), ('ius', 1), ('ius', 3), ('ius', 3), ('ius', 3), ('ius', 3)]
    nb pts discretisation = [1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000]
      mode echantillonage = ['linear', 'linear', 'linear', 'linear', 'linear', 'linear', 'linear', 'linear', 'linear', 'linear', 'linear']
       nb pts echantillon = [20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20]
         largeur, hauteur = 0.0999543, 0.0327518
              position cg = 0.309358, 0.245302
                 longueur = 0.305204
                 ruptures = [0, 29, 38, 41, 50, 55, 63, 66, 74, 94, 105, 132]
              composantes = [u'bloc-jonc-#0', u'bloc-jonc-#1', u'bloc-jonc-#2', u'bloc-jonc-#3', u'bloc-jonc-#4', u'bloc-jonc-#5', u'bloc-jonc-#6', u'bloc-jonc-#7', u'bloc-jonc-#8', u'bloc-jonc-#9', u'bloc-jonc-#10']
      nb pts ctl par comp = [30, 10, 4, 10, 6, 9, 4, 9, 21, 12, 28]
[testBlocJonc] (module testsplinecomposee.py)

    Split() et dump de 'blocjonc.spl'
    ---------------------------------

[testBlocJonc] (module testsplinecomposee.py)
dump de 'blocjonc.spl' apres split()
{'classename': 'NSplineComposee',
 'cpoints': [[0.27552797903108656, 0.2341996960645674],
             [0.27776116433897663, 0.23451888330060086],
             [0.28057944368301985, 0.23487977877638844],
             [0.2831860014998711, 0.23517216122003828],
             [0.28563124422356406, 0.23541046525075884],
             [0.28793109496696406, 0.2356029423282298],
             [0.29061309135475233, 0.2357887795011154],
             [0.2959949955140289, 0.2360367288883004],
             [0.3002296683109588, 0.2361149261580133],
             [0.30394017053081207, 0.23609895310679024],
             [0.30651950477892964, 0.23604134749600678],
             [0.3075705493213973, 0.2360069284489261],
             [0.3102760187606314, 0.23588914274612344],
             [0.3123300962752122, 0.23577159604004388],
             [0.31525030956831407, 0.23556259656486506],
             [0.3177086866134289, 0.23534840417935024],
             [0.3199606791460607, 0.23512139438334623],
             [0.3218098268914256, 0.23491289086601064],
             [0.32502746128775356, 0.23450233742099286],
             [0.3286892621452795, 0.2339608508356715],
             [0.33279105755662086, 0.23325953082293138],
             [0.3361104722583435, 0.23261786052888453],
             [0.33939553346165013, 0.23191676190935015],
             [0.34207664045206687, 0.231295282083924],
             [0.34540206911422716, 0.230462130445532],
             [0.34765771678133833, 0.22985724285653694],
             [0.3498725353284681, 0.22921626962806116],
             [0.3517397050138574, 0.2286401135836062],
             [0.3533438327669525, 0.22814512488057925],
             [0.3543285023508287, 0.22784128354415],
             [0.3544044610763625, 0.22824572217156056],
             [0.3545448721585452, 0.22857079548247702],
             [0.35475116867854567, 0.22886332763674647],
             [0.35506859026297444, 0.22914696315352165],
             [0.3555036120248377, 0.22936488465966942],
             [0.3560430837427135, 0.22945423675692425],
             [0.3562989002815832, 0.22943652892273653],
             [0.356509416216944, 0.22939260552421978],
             [0.3567878465014116, 0.22928970181185251],
             [0.35887567746373306, 0.23372023952449342],
             [0.35887295593216245, 0.23372168390357034],
             [0.3567859067103331, 0.2292928051768194],
             [0.3565074764258581, 0.22939570888918756],
             [0.3562969604905115, 0.22943963228770042],
             [0.3560411439516316, 0.22945734012189264],
             [0.3555016722337627, 0.22936798802463523],
             [0.35506665047188907, 0.22915006651849204],
             [0.354749228887474, 0.22886643100170975],
             [0.3545429323674632, 0.22857389884744464],
             [0.3544025212852908, 0.22824882553652473],
             [0.3543265625597502, 0.22784438690911685],
             [0.3355509728240273, 0.2367510468860668],
             [0.33407016189379996, 0.24090755753938287],
             [0.33765189581499894, 0.24843803391892272],
             [0.34180840646840527, 0.24991884484922344],
             [0.3605810203293487, 0.24101902900250868],
             [0.36035481498119765, 0.2407837599573603],
             [0.36010079546718127, 0.24034122472898758],
             [0.3599959452828624, 0.23992311161225965],
             [0.3599993376342485, 0.23948724890683692],
             [0.36008255515987003, 0.2391445877696913],
             [0.3602816345989418, 0.23875251373640483],
             [0.3605431570753992, 0.2384513129096224],
             [0.36096913833578903, 0.2381665704377432],
             [0.35889187342514495, 0.2337582620684],
             [0.3588932334310196, 0.23375768987392448],
             [0.36097099929925797, 0.23816706136023796],
             [0.36054501803886774, 0.2384518038321152],
             [0.36028349556241035, 0.23875300465889765],
             [0.3600844161233384, 0.2391450786921841],
             [0.3600011985977099, 0.2394877398293316],
             [0.35999780624634575, 0.23992360253475117],
             [0.3601026564306504, 0.24034171565148257],
             [0.3603566759446589, 0.240784250879855],
             [0.3605828812928317, 0.24101951992499862],
             [0.35641976669724296, 0.24461308003407778],
             [0.3532063315845615, 0.24738688603173997],
             [0.3489537947012088, 0.251057634591682],
             [0.34653008614140973, 0.2531497562943747],
             [0.34418756335618667, 0.2551717992246242],
             [0.3404668266761112, 0.25838350301100876],
             [0.33885994829962013, 0.2595287590139645],
             [0.3374452955323096, 0.2601513246886337],
             [0.3353994689667619, 0.260572825185526],
             [0.33396982093699384, 0.26057075319876133],
             [0.3287091423419799, 0.2600974192528208],
             [0.3239370246827379, 0.2595530436234631],
             [0.3194583662840662, 0.2589418472489982],
             [0.315927367579168, 0.2583909449038786],
             [0.31220952791965595, 0.25774453616201065],
             [0.30915970172753526, 0.2571630156865497],
             [0.30517633310236275, 0.25633322861206714],
             [0.3017066310672884, 0.25554489566611654],
             [0.2974853624500062, 0.25450244235024166],
             [0.29334971263038107, 0.25339111388951496],
             [0.2937191742270814, 0.2528619938842042],
             [0.2938683486389138, 0.25216826187784697],
             [0.29370383399593486, 0.2514295856301162],
             [0.2932573301362996, 0.2508502231339361],
             [0.29262706989721055, 0.25051448545731614],
             [0.2922934493537115, 0.25045356056517537],
             [0.29196118372107743, 0.2504587069622604],
             [0.29133258214933627, 0.25065728562273326],
             [0.29071044449633876, 0.25123684910424293],
             [0.2904932834849892, 0.25173496555338964],
             [0.29048807489806727, 0.25256921270195376],
             [0.28769586146575427, 0.25164207795319044],
             [0.2842937625592903, 0.25041363245228804],
             [0.28137044579397785, 0.24926893578884474],
             [0.2789491527920505, 0.2482566132646084],
             [0.27631308699768986, 0.247086436728791],
             [0.2740233734489589, 0.24601078384287656],
             [0.2719315993718473, 0.2449785902652236],
             [0.2699477385486769, 0.2439547285511419],
             [0.2675600912088964, 0.24266273747853112],
             [0.2659009587466288, 0.24172538842604116],
             [0.2639469680596829, 0.2405785520532319],
             [0.26289795343858546, 0.23994323674962895],
             [0.2618407972570983, 0.23896074098243916],
             [0.2612454536319035, 0.23784548667927044],
             [0.2610328596944248, 0.2368585455177202],
             [0.2610567456137555, 0.23592349790094116],
             [0.26126291500876814, 0.2350955686177669],
             [0.26167563421128104, 0.23426572295805093],
             [0.26220853970397406, 0.23360467773082],
             [0.2631192381101015, 0.23291410108076946],
             [0.26424604141275765, 0.23248796331553964],
             [0.2650612882106375, 0.23239468624745077],
             [0.2656272263083685, 0.2324261072745586],
             [0.26905362261950744, 0.23310667068143962],
             [0.27115188993926825, 0.23348838485791978],
             [0.2733439148677032, 0.23385895329686748],
             [0.27552797903108656, 0.2341996960645674]],
 'methode': [('ius', 3),
             ('ius', 3),
             ('ius', 1),
             ('ius', 3),
             ('ius', 1),
             ('ius', 3),
             ('ius', 1),
             ('ius', 3),
             ('ius', 3),
             ('ius', 3),
             ('ius', 3)],
 'mode': ['linear',
          'linear',
          'linear',
          'linear',
          'linear',
          'linear',
          'linear',
          'linear',
          'linear',
          'linear',
          'linear'],
 'name': u'bloc-jonc',
 'nbpd': [1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000],
 'nbpe': [20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20],
 'role': u'renfort',
 'ruptures': [0, 29, 38, 41, 50, 55, 63, 66, 74, 94, 105, 132]}
[save] (module splineabstraite.py)
Sauvegarde /Users/puiseux/GitHub/spleen/spleen/work/blocjonc-compose-work.spl : OK
[testBlocJonc] (module testsplinecomposee.py)

    Construction NSplineComposee a partir de 'blocjonc-compose-work.spl' (=le dump apres split)
    -------------------------------------------------------------------------------------------

[testBlocJonc] (module testsplinecomposee.py)
>>>yeap, lecture de dump
{'classename': 'NSplineComposee',
 'cpoints': [[0.27552797903108656, 0.2341996960645674],
             [0.27776116433897663, 0.23451888330060086],
             [0.28057944368301985, 0.23487977877638844],
             [0.2831860014998711, 0.23517216122003828],
             [0.28563124422356406, 0.23541046525075884],
             [0.28793109496696406, 0.2356029423282298],
             [0.29061309135475233, 0.2357887795011154],
             [0.2959949955140289, 0.2360367288883004],
             [0.3002296683109588, 0.2361149261580133],
             [0.30394017053081207, 0.23609895310679024],
             [0.30651950477892964, 0.23604134749600678],
             [0.3075705493213973, 0.2360069284489261],
             [0.3102760187606314, 0.23588914274612344],
             [0.3123300962752122, 0.23577159604004388],
             [0.31525030956831407, 0.23556259656486506],
             [0.3177086866134289, 0.23534840417935024],
             [0.3199606791460607, 0.23512139438334623],
             [0.3218098268914256, 0.23491289086601064],
             [0.32502746128775356, 0.23450233742099286],
             [0.3286892621452795, 0.2339608508356715],
             [0.33279105755662086, 0.23325953082293138],
             [0.3361104722583435, 0.23261786052888453],
             [0.33939553346165013, 0.23191676190935015],
             [0.34207664045206687, 0.231295282083924],
             [0.34540206911422716, 0.230462130445532],
             [0.34765771678133833, 0.22985724285653694],
             [0.3498725353284681, 0.22921626962806116],
             [0.3517397050138574, 0.2286401135836062],
             [0.3533438327669525, 0.22814512488057925],
             [0.3543285023508287, 0.22784128354415],
             [0.3544044610763625, 0.22824572217156056],
             [0.3545448721585452, 0.22857079548247702],
             [0.35475116867854567, 0.22886332763674647],
             [0.35506859026297444, 0.22914696315352165],
             [0.3555036120248377, 0.22936488465966942],
             [0.3560430837427135, 0.22945423675692425],
             [0.3562989002815832, 0.22943652892273653],
             [0.356509416216944, 0.22939260552421978],
             [0.3567878465014116, 0.22928970181185251],
             [0.35887567746373306, 0.23372023952449342],
             [0.35887295593216245, 0.23372168390357034],
             [0.3567859067103331, 0.2292928051768194],
             [0.3565074764258581, 0.22939570888918756],
             [0.3562969604905115, 0.22943963228770042],
             [0.3560411439516316, 0.22945734012189264],
             [0.3555016722337627, 0.22936798802463523],
             [0.35506665047188907, 0.22915006651849204],
             [0.354749228887474, 0.22886643100170975],
             [0.3545429323674632, 0.22857389884744464],
             [0.3544025212852908, 0.22824882553652473],
             [0.3543265625597502, 0.22784438690911685],
             [0.3355509728240273, 0.2367510468860668],
             [0.33407016189379996, 0.24090755753938287],
             [0.33765189581499894, 0.24843803391892272],
             [0.34180840646840527, 0.24991884484922344],
             [0.3605810203293487, 0.24101902900250868],
             [0.36035481498119765, 0.2407837599573603],
             [0.36010079546718127, 0.24034122472898758],
             [0.3599959452828624, 0.23992311161225965],
             [0.3599993376342485, 0.23948724890683692],
             [0.36008255515987003, 0.2391445877696913],
             [0.3602816345989418, 0.23875251373640483],
             [0.3605431570753992, 0.2384513129096224],
             [0.36096913833578903, 0.2381665704377432],
             [0.35889187342514495, 0.2337582620684],
             [0.3588932334310196, 0.23375768987392448],
             [0.36097099929925797, 0.23816706136023796],
             [0.36054501803886774, 0.2384518038321152],
             [0.36028349556241035, 0.23875300465889765],
             [0.3600844161233384, 0.2391450786921841],
             [0.3600011985977099, 0.2394877398293316],
             [0.35999780624634575, 0.23992360253475117],
             [0.3601026564306504, 0.24034171565148257],
             [0.3603566759446589, 0.240784250879855],
             [0.3605828812928317, 0.24101951992499862],
             [0.35641976669724296, 0.24461308003407778],
             [0.3532063315845615, 0.24738688603173997],
             [0.3489537947012088, 0.251057634591682],
             [0.34653008614140973, 0.2531497562943747],
             [0.34418756335618667, 0.2551717992246242],
             [0.3404668266761112, 0.25838350301100876],
             [0.33885994829962013, 0.2595287590139645],
             [0.3374452955323096, 0.2601513246886337],
             [0.3353994689667619, 0.260572825185526],
             [0.33396982093699384, 0.26057075319876133],
             [0.3287091423419799, 0.2600974192528208],
             [0.3239370246827379, 0.2595530436234631],
             [0.3194583662840662, 0.2589418472489982],
             [0.315927367579168, 0.2583909449038786],
             [0.31220952791965595, 0.25774453616201065],
             [0.30915970172753526, 0.2571630156865497],
             [0.30517633310236275, 0.25633322861206714],
             [0.3017066310672884, 0.25554489566611654],
             [0.2974853624500062, 0.25450244235024166],
             [0.29334971263038107, 0.25339111388951496],
             [0.2937191742270814, 0.2528619938842042],
             [0.2938683486389138, 0.25216826187784697],
             [0.29370383399593486, 0.2514295856301162],
             [0.2932573301362996, 0.2508502231339361],
             [0.29262706989721055, 0.25051448545731614],
             [0.2922934493537115, 0.25045356056517537],
             [0.29196118372107743, 0.2504587069622604],
             [0.29133258214933627, 0.25065728562273326],
             [0.29071044449633876, 0.25123684910424293],
             [0.2904932834849892, 0.25173496555338964],
             [0.29048807489806727, 0.25256921270195376],
             [0.28769586146575427, 0.25164207795319044],
             [0.2842937625592903, 0.25041363245228804],
             [0.28137044579397785, 0.24926893578884474],
             [0.2789491527920505, 0.2482566132646084],
             [0.27631308699768986, 0.247086436728791],
             [0.2740233734489589, 0.24601078384287656],
             [0.2719315993718473, 0.2449785902652236],
             [0.2699477385486769, 0.2439547285511419],
             [0.2675600912088964, 0.24266273747853112],
             [0.2659009587466288, 0.24172538842604116],
             [0.2639469680596829, 0.2405785520532319],
             [0.26289795343858546, 0.23994323674962895],
             [0.2618407972570983, 0.23896074098243916],
             [0.2612454536319035, 0.23784548667927044],
             [0.2610328596944248, 0.2368585455177202],
             [0.2610567456137555, 0.23592349790094116],
             [0.26126291500876814, 0.2350955686177669],
             [0.26167563421128104, 0.23426572295805093],
             [0.26220853970397406, 0.23360467773082],
             [0.2631192381101015, 0.23291410108076946],
             [0.26424604141275765, 0.23248796331553964],
             [0.2650612882106375, 0.23239468624745077],
             [0.2656272263083685, 0.2324261072745586],
             [0.26905362261950744, 0.23310667068143962],
             [0.27115188993926825, 0.23348838485791978],
             [0.2733439148677032, 0.23385895329686748],
             [0.27552797903108656, 0.2341996960645674]],
 'methode': [('ius', 3),
             ('ius', 3),
             ('ius', 1),
             ('ius', 3),
             ('ius', 1),
             ('ius', 3),
             ('ius', 1),
             ('ius', 3),
             ('ius', 3),
             ('ius', 3),
             ('ius', 3)],
 'mode': ['linear',
          'linear',
          'linear',
          'linear',
          'linear',
          'linear',
          'linear',
          'linear',
          'linear',
          'linear',
          'linear'],
 'name': u'bloc-jonc',
 'nbpd': [1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000],
 'nbpe': [20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20],
 'role': u'renfort',
 'ruptures': [0, 29, 38, 41, 50, 55, 63, 66, 74, 94, 105, 132]}
[testBlocJonc] (module testsplinecomposee.py)
0-eme composante de 'blocjonc-compose-work.spl'
<NSplineSimple>
                     name = bloc-jonc-#0
                     role = spline-#0
          nb pts controle = 30
                   closed = False
       nb_splines, n_bech = 0, 0
                  methode = ('ius', 3)
 nb points discretisation = 1000
      mode echantillonage = linear
       nb pts echantillon = 20
         largeur, hauteur = 0.0788005, 0.00827713
              position cg = 0.315122, 0.232835
                 longueur = 0.0797559
[testBlocJonc] (module testsplinecomposee.py)
1-eme composante de 'blocjonc-compose-work.spl'
<NSplineSimple>
                     name = bloc-jonc-#1
                     role = spline-#1
          nb pts controle = 10
                   closed = False
       nb_splines, n_bech = 0, 0
                  methode = ('ius', 3)
 nb points discretisation = 1000
      mode echantillonage = linear
       nb pts echantillon = 20
         largeur, hauteur = 0.00245934, 0.00161298
              position cg = 0.355402, 0.228831
                 longueur = 0.00335894
[testBlocJonc] (module testsplinecomposee.py)
2-eme composante de 'blocjonc-compose-work.spl'
<NSplineSimple>
                     name = bloc-jonc-#2
                     role = spline-#2
          nb pts controle = 4
                   closed = False
       nb_splines, n_bech = 0, 0
                  methode = ('ius', 1)
 nb points discretisation = 1000
      mode echantillonage = linear
       nb pts echantillon = 20
         largeur, hauteur = 0.00208795, 0.00442977
              position cg = 0.35783, 0.231505
                 longueur = 0.0097969
[testBlocJonc] (module testsplinecomposee.py)
3-eme composante de 'blocjonc-compose-work.spl'
<NSplineSimple>
                     name = bloc-jonc-#3
                     role = spline-#3
          nb pts controle = 10
                   closed = False
       nb_splines, n_bech = 0, 0
                  methode = ('ius', 3)
 nb points discretisation = 1000
      mode echantillonage = linear
       nb pts echantillon = 20
         largeur, hauteur = 0.00245934, 0.00161298
              position cg = 0.3554, 0.228834
                 longueur = 0.00335894
[testBlocJonc] (module testsplinecomposee.py)
4-eme composante de 'blocjonc-compose-work.spl'
<NSplineSimple>
                     name = bloc-jonc-#4
                     role = spline-#4
          nb pts controle = 6
                   closed = False
       nb_splines, n_bech = 0, 0
                  methode = ('ius', 1)
 nb points discretisation = 1000
      mode echantillonage = linear
       nb pts echantillon = 20
         largeur, hauteur = 0.0265011, 0.0220636
              position cg = 0.346941, 0.239417
                 longueur = 0.0587201
[testBlocJonc] (module testsplinecomposee.py)
5-eme composante de 'blocjonc-compose-work.spl'
<NSplineSimple>
                     name = bloc-jonc-#5
                     role = spline-#5
          nb pts controle = 9
                   closed = False
       nb_splines, n_bech = 0, 0
                  methode = ('ius', 3)
 nb points discretisation = 1000
      mode echantillonage = linear
       nb pts echantillon = 20
         largeur, hauteur = 0.000985404, 0.00285246
              position cg = 0.360458, 0.23955
                 longueur = 0.0034166
[testBlocJonc] (module testsplinecomposee.py)
6-eme composante de 'blocjonc-compose-work.spl'
<NSplineSimple>
                     name = bloc-jonc-#6
                     role = spline-#6
          nb pts controle = 4
                   closed = False
       nb_splines, n_bech = 0, 0
                  methode = ('ius', 1)
 nb points discretisation = 1000
      mode echantillonage = linear
       nb pts echantillon = 20
         largeur, hauteur = 0.00207761, 0.00440558
              position cg = 0.359932, 0.235964
                 longueur = 0.00974908
[testBlocJonc] (module testsplinecomposee.py)
7-eme composante de 'blocjonc-compose-work.spl'
<NSplineSimple>
                     name = bloc-jonc-#7
                     role = spline-#7
          nb pts controle = 9
                   closed = False
       nb_splines, n_bech = 0, 0
                  methode = ('ius', 3)
 nb points discretisation = 1000
      mode echantillonage = linear
       nb pts echantillon = 20
         largeur, hauteur = 0.000985404, 0.00285246
              position cg = 0.36046, 0.23955
                 longueur = 0.0034166
[testBlocJonc] (module testsplinecomposee.py)
8-eme composante de 'blocjonc-compose-work.spl'
<NSplineSimple>
                     name = bloc-jonc-#8
                     role = spline-#8
          nb pts controle = 21
                   closed = False
       nb_splines, n_bech = 0, 0
                  methode = ('ius', 3)
 nb points discretisation = 1000
      mode echantillonage = linear
       nb pts echantillon = 20
         largeur, hauteur = 0.0672332, 0.0195736
              position cg = 0.329537, 0.252096
                 longueur = 0.0749387
[testBlocJonc] (module testsplinecomposee.py)
9-eme composante de 'blocjonc-compose-work.spl'
<NSplineSimple>
                     name = bloc-jonc-#9
                     role = spline-#9
          nb pts controle = 12
                   closed = False
       nb_splines, n_bech = 0, 0
                  methode = ('ius', 3)
 nb points discretisation = 1000
      mode echantillonage = linear
       nb pts echantillon = 20
         largeur, hauteur = 0.00342971, 0.00294324
              position cg = 0.292236, 0.251877
                 longueur = 0.00716702
[testBlocJonc] (module testsplinecomposee.py)
10-eme composante de 'blocjonc-compose-work.spl'
<NSplineSimple>
                     name = bloc-jonc-#10
                     role = spline-#10
          nb pts controle = 28
                   closed = False
       nb_splines, n_bech = 0, 0
                  methode = ('ius', 3)
 nb points discretisation = 1000
      mode echantillonage = linear
       nb pts echantillon = 20
         largeur, hauteur = 0.0294713, 0.0201746
              position cg = 0.273865, 0.240938
                 longueur = 0.0515247
[testBlocJonc] (module testsplinecomposee.py)
==================
Fin testBlocJonc()
==================


[testParticular] (module testsplinecomposee.py)
================================
testParticular : (spline-0#.pkl)
================================


[testParticular] (module testsplinecomposee.py)
<NSplineComposee>
                     name = spline-0#.pkl
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((1, 0, 3.14), (1, 0, -3.14))), ('cubic', ((1, 0, 0), (1, 0, 0)))]
    nb pts discretisation = [10000, 10000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [100, 100]
         largeur, hauteur = 1, 0.193929
              position cg = 0.37888, 0.00211542
                 longueur = 2.08753
                 ruptures = [0, 40, 85]
              composantes = [u'spline-0#.pkl-#0', u'spline-0#.pkl-#1']
      nb pts ctl par comp = [41, 46]
[testParticular] (module testsplinecomposee.py)
====================================
Fin testParticular : (spline-0#.pkl)
====================================


[debugNSplineComposee] (module testsplinecomposee.py)
=========================================
debugNSplineComposee : (unenervure2d.gnu)
=========================================


[debugNSplineComposee] (module testsplinecomposee.py)

    Constructeur vide
    -----------------

<NSplineComposee>
                     name = NSplineComposee
                     role = NSplineComposee
          nb pts controle = 1
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = []
    nb pts discretisation = []
      mode echantillonage = []
       nb pts echantillon = []
         largeur, hauteur = 0, 0
              position cg = 0, 0
                 longueur = 0
                 ruptures = [0]
              composantes = []
      nb pts ctl par comp = []
[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = unenervure2d.gnu
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0, 0), (1, 0, -5))), ('cubic', ((1, 0, -5), (2, 0, 0)))]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [50, 40]
         largeur, hauteur = 2.61948, 0.465482
              position cg = -0.680742, 0.172273
                 longueur = 5.46951
                 ruptures = [0, 45, 85]
              composantes = [u'unenervure2d.gnu-#0', u'unenervure2d.gnu-#1']
      nb pts ctl par comp = [46, 41]
[debugNSplineComposee] (module testsplinecomposee.py)

    elaguer(eps=1, replace=True) : (unenervure2d.gnu)
    -------------------------------------------------

[elaguer] (module splinesimple.py)
historique_distances = [356.45, 130.25, 51.61, 34.36, 18.02, 10.4, 6.03, 5.06, 3.23, 2.53, 0.91]
[elaguer] (module splinesimple.py)
Apres ELAGAGE : dist = 0.91 mm/m ; 46 points => 13 points 
[elaguer] (module splinesimple.py)
historique_distances = [373.17, 146.91, 46.28, 41.78, 14.94, 8.16, 4.25, 2.64, 1.75, 0.63]
[elaguer] (module splinesimple.py)
Apres ELAGAGE : dist = 0.63 mm/m ; 41 points => 12 points 
[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = unenervure2d.gnu
                     role = NSplineComposee
          nb pts controle = 24
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0, 0), (1, 0, -5))), ('cubic', ((1, 0, -5), (2, 0, 0)))]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [50, 40]
         largeur, hauteur = 2.61948, 0.46517
              position cg = -0.680355, 0.172272
                 longueur = 5.47423
                 ruptures = [0, 12, 23]
              composantes = [u'unenervure2d.gnu-#0', u'unenervure2d.gnu-#1']
      nb pts ctl par comp = [13, 12]
[debugNSplineComposee] (module testsplinecomposee.py)

    echantillonner() (unenervure2d.gnu)
    -----------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
echantillon = [[0.916816, 0.130203], [0.7381214749541515, 0.11571654736912214], [0.6333786285234894, 0.10617014907011392], [0.5457247246294493, 0.09709532460137976], [0.46763701960877546, 0.08790047967623671], [0.39603662847109455, 0.07834485852610965], [0.32626820171158444, 0.06783880751934682], [0.195627694768526, 0.046198952624296324], [0.10777181849416775, 0.03203182772587679], [0.03303835241734018, 0.021200026212711616], [-0.052440014167862196, 0.010076938601263168], [-0.14869953142860748, -0.0012409547094183726], [-0.24155150667960795, -0.011015458813729506], [-0.3309679688729497, -0.019281079341727757], [-0.417352767254137, -0.026118719065640533], [-0.5010876074447757, -0.03159863199601193], [-0.5824506705501954, -0.03577542220735047], [-0.6617228867371147, -0.03869629744649664], [-0.7410368884211229, -0.040444048939881766], [-0.8231079106207567, -0.04106889786390684], [-0.9083104327824157, -0.04053242329206968], [-0.9971191280589172, -0.038785973964328035], [-1.0903471947173455, -0.035759428349400275], [-1.1975992236583548, -0.030999823067443602], [-1.357283344856517, -0.022364154633419623], [-1.4279638135543702, -0.017947935439384343], [-1.4540992189579938, -0.015212660771389845], [-1.4756384734719632, -0.01187416901127332], [-1.494803583185186, -0.007773020768962311], [-1.5141616772995612, -0.0023990784468114843], [-1.534451862737886, 0.0044890672334770825], [-1.5555776930898413, 0.012933152800459688], [-1.5773476930869177, 0.02290380084562987], [-1.5990918077949305, 0.03411939298696114], [-1.621518963363111, 0.04700168337661647], [-1.645886998008247, 0.06242145188142485], [-1.6726241448173194, 0.08064239103404616], [-1.682708851684035, 0.08685376849406545], [-1.6885448428590237, 0.09032790421122497], [-1.6915806545937035, 0.09309670874898474], [-1.694450484829806, 0.09734687986652367], [-1.6977333465344102, 0.10650759571548588], [-1.702082593773213, 0.13342173499269866], [-1.7023671403997875, 0.13470383094914254], [-1.702412937531305, 0.13477665086666704], [-1.7024320300835918, 0.13478715401026317], [-1.7024481002083394, 0.1347850590586282], [-1.7024678908316908, 0.13476663988055493], [-1.7025121509366754, 0.13464527084627453], [-1.7026599999999998, 0.130203], [-1.7025118866314677, 0.1239009554315174], [-1.7024817229244416, 0.12381889997061941], [-1.702470581211961, 0.12381011274337964], [-1.7024620049971542, 0.12381010049917794], [-1.7024517612947296, 0.12381714332092335], [-1.7024226654703458, 0.12387399670763388], [-1.7021843856715266, 0.12552457518117208], [-1.6974222198872062, 0.17222944991253022], [-1.6939964092892799, 0.1850735214024682], [-1.6905800320932558, 0.19214381159308416], [-1.6818147047442606, 0.20659554885686962], [-1.666096622931124, 0.23276131556037508], [-1.654862044718927, 0.2475017688828013], [-1.6405737296034995, 0.2627873537329629], [-1.6212722170779683, 0.2804771919739828], [-1.5994786631139226, 0.2978345221419039], [-1.5752131170616444, 0.3146479861415514], [-1.5486080009465217, 0.3306640686497014], [-1.5200255173144699, 0.34555379397667163], [-1.489753586280383, 0.3590987764055163], [-1.457371454356765, 0.37142466984674405], [-1.4222837910527675, 0.38266817763236083], [-1.3835119906534765, 0.39300100462623333], [-1.3417906424670445, 0.4021081415563589], [-1.2978113748337028, 0.4097153226795982], [-1.2511997094697003, 0.4157886944212326], [-1.2015387304576806, 0.42026714925510167], [-1.1482969867331654, 0.42307043825867835], [-1.090623317772711, 0.4240981960844099], [-1.0282455234230397, 0.4232194813303624], [-0.9620776816870683, 0.4203122834052422], [-0.8908120895612538, 0.4151901106567777], [-0.8121043896798018, 0.4075110283111708], [-0.7209378582575748, 0.39652859269468665], [-0.6071269995307186, 0.3806487928330022], [-0.42105663625634426, 0.351862585853938], [0.007312337828005941, 0.2836802614859768], [0.3440248151417183, 0.22796184330341585], [0.9168159999999999, 0.130203]]
[debugNSplineComposee] (module testsplinecomposee.py)

    hardScale((0.2, 0.2)) : (unenervure2d.gnu)
    ------------------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = unenervure2d.gnu
                     role = NSplineComposee
          nb pts controle = 24
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0.0, 0.0), (1, 0.0, -1.0))), ('cubic', ((1, 0.0, -1.0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [50, 40]
         largeur, hauteur = 0.523895, 0.0930341
              position cg = -0.887285, 0.159447
                 longueur = 1.09485
                 ruptures = [0, 12, 23]
              composantes = [u'unenervure2d.gnu-#0', u'unenervure2d.gnu-#1']
      nb pts ctl par comp = [13, 12]
[debugNSplineComposee] (module testsplinecomposee.py)

    translate((-1.5,0.05)) : (unenervure2d.gnu)
    -------------------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = unenervure2d.gnu
                     role = NSplineComposee
          nb pts controle = 24
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0.0, 0.0), (1, 0.0, -1.0))), ('cubic', ((1, 0.0, -1.0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [50, 40]
         largeur, hauteur = 0.523895, 0.0930341
              position cg = -2.38728, 0.209447
                 longueur = 1.09485
                 ruptures = [0, 12, 23]
              composantes = [u'unenervure2d.gnu-#0', u'unenervure2d.gnu-#1']
      nb pts ctl par comp = [13, 12]
[debugNSplineComposee] (module testsplinecomposee.py)

    hardRotate(30) (unenervure2d.gnu)
    ---------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = unenervure2d.gnu
                     role = NSplineComposee
          nb pts controle = 24
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0.0, 0.0), (1, 0.0, -1.0))), ('cubic', ((1, 0.0, -1.0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [50, 40]
         largeur, hauteur = 0.523895, 0.0930341
              position cg = -2.38728, 0.209447
                 longueur = 1.09485
                 ruptures = [0, 12, 23]
              composantes = [u'unenervure2d.gnu-#0', u'unenervure2d.gnu-#1']
      nb pts ctl par comp = [13, 12]
[debugNSplineComposee] (module testsplinecomposee.py)

    symetriser(1) (unenervure2d.gnu)
    --------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = unenervure2d.gnu
                     role = NSplineComposee
          nb pts controle = 24
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [['cubic', [(2, 0.0, 0.0), (1, 0.49999999999999994, -0.8660254037844387)]], ['cubic', [(1, 0.49999999999999994, -0.8660254037844387), (2, 0.0, 0.0)]]]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [50, 40]
         largeur, hauteur = 0.457808, 0.268267
              position cg = -2.39582, 0.234883
                 longueur = 1.09485
                 ruptures = [0, 12, 23]
              composantes = [u'unenervure2d.gnu-#0', u'unenervure2d.gnu-#1']
      nb pts ctl par comp = [13, 12]
[debugNSplineComposee] (module testsplinecomposee.py)

    reconstruction (unenervure2d.gnu)
    ---------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = unenervure2d.gnu
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [['cubic', ((2, 0, 0), (1, 0, -20))], ['cubic', ((1, 0, -20), (2, 0, 0))]]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [50, 50]
         largeur, hauteur = 2.61948, 0.465482
              position cg = -0.680692, 0.172278
                 longueur = 5.55488
                 ruptures = [0, 45, 85]
              composantes = [u'unenervure2d.gnu-#0', u'unenervure2d.gnu-#1']
      nb pts ctl par comp = [46, 41]
[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = unenervure2d.gnu
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [['cubic', ((2, 0, 0), (1, 0, -20))], ['cubic', ((1, 0, -20), (2, 0, 0))]]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [50, 50]
         largeur, hauteur = 2.61948, 0.465482
              position cg = -0.680692, 0.172278
                 longueur = 5.55488
                 ruptures = [0, 45, 85]
              composantes = [u'unenervure2d.gnu-#0', u'unenervure2d.gnu-#1']
      nb pts ctl par comp = [46, 41]
[debugNSplineComposee] (module testsplinecomposee.py)

    hardScale((0.2,0.2), centre=np.asarray((0,0))) (unenervure2d.gnu)
    -----------------------------------------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = unenervure2d.gnu
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0.0, 0.0), (1, 0.0, -4.0))), ('cubic', ((1, 0.0, -4.0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [50, 50]
         largeur, hauteur = 0.523895, 0.0930963
              position cg = -0.136138, 0.0344556
                 longueur = 1.11098
                 ruptures = [0, 45, 85]
              composantes = [u'unenervure2d.gnu-#0', u'unenervure2d.gnu-#1']
      nb pts ctl par comp = [46, 41]
[debugNSplineComposee] (module testsplinecomposee.py)

    S.hardRotate(10) (unenervure2d.gnu)
    -----------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = unenervure2d.gnu
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [['cubic', [(2, 0.0, 0.0), (1, 0.6945927106677213, -3.939231012048832)]], ['cubic', [(1, 0.6945927106677213, -3.939231012048832), (2, 0.0, 0.0)]]]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [50, 50]
         largeur, hauteur = 0.516612, 0.111002
              position cg = -0.136172, 0.0266277
                 longueur = 1.11098
                 ruptures = [0, 45, 85]
              composantes = [u'unenervure2d.gnu-#0', u'unenervure2d.gnu-#1']
      nb pts ctl par comp = [46, 41]
[debugNSplineComposee] (module testsplinecomposee.py)

    S.toDump() (unenervure2d.gnu)
    -----------------------------

{'classename': 'NSplineComposee',
 'cpoints': [[0.17993709719581433, 0.0738214014557819],
             [0.17231778920106464, 0.0719714170879712],
             [0.1677016365345936, 0.0708278573475849],
             [0.16204903541174284, 0.06940385974016183],
             [0.15548532235711895, 0.06771766585553317],
             [0.14825935354347214, 0.06582066990819858],
             [0.13824597631903854, 0.06312125502322917],
             [0.1289134356894859, 0.0605307203066602],
             [0.11802319572408787, 0.05741633547879327],
             [0.10748773138517786, 0.05430894302177154],
             [0.09669908279623954, 0.0510111530145093],
             [0.08595265327864154, 0.0476443863618143],
             [0.07255616824035113, 0.04333315383845621],
             [0.05939783810694724, 0.03892668969808744],
             [0.045299825166562696, 0.03403768040556728],
             [0.024757132647405228, 0.026645739087012763],
             [0.007002038174564157, 0.02092701908070994],
             [-0.010906915602143352, 0.015245165774689939],
             [-0.030338991923884832, 0.009422930293686328],
             [-0.04956617345885544, 0.003995159219718523],
             [-0.07053575688310967, -0.0016080764688494315],
             [-0.09077210693924705, -0.00654153205448809],
             [-0.11057950491063454, -0.01108359475492221],
             [-0.12607346355594504, -0.014466465851758162],
             [-0.15351736445632203, -0.019798129177277496],
             [-0.16809892804714305, -0.022390515292508344],
             [-0.18620646705911792, -0.02537905914023919],
             [-0.205777487049971, -0.028042535284158412],
             [-0.22320922348666986, -0.030398395358072983],
             [-0.23900207231817003, -0.0325353600735947],
             [-0.25514712648223214, -0.03442553531666083],
             [-0.268500953362274, -0.03589429680658081],
             [-0.2804530971086905, -0.0369045934637052],
             [-0.28904393952307705, -0.03717912433438027],
             [-0.29576438995997084, -0.036820055239472266],
             [-0.2988760203966811, -0.03636881077705505],
             [-0.3013158672116636, -0.03589209941348599],
             [-0.30360714954920504, -0.03522136038290352],
             [-0.30557008851322826, -0.0344893198157767],
             [-0.325865346847819, -0.02700909298735587],
             [-0.32806129583378574, -0.026084305933688115],
             [-0.33038904787841217, -0.025057008883786015],
             [-0.3326311696496005, -0.023593941969539317],
             [-0.33424179153365674, -0.021565974136412],
             [-0.3352705907065655, -0.01949759998703232],
             [-0.33599895753006703, -0.01715204531267013],
             [-0.33639546652385877, -0.010250244514484023],
             [-0.33519879451548357, -0.0031122016913867137],
             [-0.3324135502159832, 0.004196080128035785],
             [-0.328045041737588, 0.011578011793541006],
             [-0.32211079169375156, 0.018914135705882438],
             [-0.3146304907175277, 0.02607425463402213],
             [-0.30563388589731344, 0.0329276166344491],
             [-0.29516265617716775, 0.03935355097491183],
             [-0.2832718710015044, 0.045249740519543606],
             [-0.27002737081022976, 0.050540400860496035],
             [-0.2555101230253815, 0.055177949263835596],
             [-0.2398063739735982, 0.05914474115132039],
             [-0.2230252017774962, 0.06244895962544904],
             [-0.2052738157671582, 0.06512389371659524],
             [-0.1866765813558558, 0.06721950665105372],
             [-0.16723959366440913, 0.0685618980852303],
             [-0.1474777641186683, 0.06958809399493074],
             [-0.12547309593654848, 0.07028048347694382],
             [-0.10637904670568707, 0.07069299734270001],
             [-0.0852766395635214, 0.07111906480951197],
             [-0.06446495716291659, 0.07150889797428314],
             [-0.04369250820645136, 0.07186784915626591],
             [-0.023961547291375895, 0.07218064665971577],
             [-0.004030173309824275, 0.07246927839461538],
             [0.016025571219833418, 0.07273150570602585],
             [0.035053961104363596, 0.0729543362297634],
             [0.05334558933483524, 0.07314473675028006],
             [0.07039728921366104, 0.07330110900629704],
             [0.08661855798180942, 0.07343107727740678],
             [0.10186854866400852, 0.07353641061894906],
             [0.11329707562849659, 0.07360377694562328],
             [0.12295446101311872, 0.07365291077191466],
             [0.1309724463776164, 0.07368876401027223],
             [0.1399290608374092, 0.07374552613347579],
             [0.14788047319780329, 0.0737696407550231],
             [0.15505775168305214, 0.07378438609950998],
             [0.16178392933680055, 0.07379595027759714],
             [0.1673705034508219, 0.07380457979363725],
             [0.17194021291569042, 0.07381099903741596],
             [0.17993709719581433, 0.0738214014557819]],
 'methode': [['cubic',
              [(2, 0.0, 0.0), (1, 0.6945927106677213, -3.939231012048832)]],
             ['cubic',
              [(1, 0.6945927106677213, -3.939231012048832), (2, 0.0, 0.0)]]],
 'mode': ['courbure', 'courbure'],
 'name': u'unenervure2d.gnu',
 'nbpd': [1000, 1000],
 'nbpe': [50, 50],
 'role': 'NSplineComposee',
 'ruptures': [0, 45, 85]}
[debugNSplineComposee] (module testsplinecomposee.py)

    NSplineComposee(**dump0) (unenervure2d.gnu)
    -------------------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
join_1 = <NSplineComposee>
                     name = unenervure2d.gnu
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [['cubic', [(2, 0.0, 0.0), (1, 0.6945927106677213, -3.939231012048832)]], ['cubic', [(1, 0.6945927106677213, -3.939231012048832), (2, 0.0, 0.0)]]]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [50, 50]
         largeur, hauteur = 0.516612, 0.111002
              position cg = -0.136172, 0.0266277
                 longueur = 1.11098
                 ruptures = [0, 45, 85]
              composantes = [u'unenervure2d.gnu-#0', u'unenervure2d.gnu-#1']
      nb pts ctl par comp = [46, 41]
[debugNSplineComposee] (module testsplinecomposee.py)
Rupture = [[0.17993709719581433, 0.0738214014557819], [-0.33599895753006703, -0.01715204531267013], [0.17993709719581433, 0.0738214014557819]]
[debugNSplineComposee] (module testsplinecomposee.py)

    dump1 = S.toDump() (unenervure2d.gnu)
    -------------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
dump_equal_dump1 = True
[debugNSplineComposee] (module testsplinecomposee.py)

    S.load(dump1) (unenervure2d.gnu)
    --------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = unenervure2d.gnu
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [['cubic', [(2, 0.0, 0.0), (1, 0.6945927106677213, -3.939231012048832)]], ['cubic', [(1, 0.6945927106677213, -3.939231012048832), (2, 0.0, 0.0)]]]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [50, 50]
         largeur, hauteur = 0.516612, 0.111002
              position cg = -0.136172, 0.0266277
                 longueur = 1.11098
                 ruptures = [0, 45, 85]
              composantes = [u'unenervure2d.gnu-#0', u'unenervure2d.gnu-#1']
      nb pts ctl par comp = [46, 41]
[debugNSplineComposee] (module testsplinecomposee.py)
R = [[ 0.1799371   0.0738214 ]
 [-0.33599896 -0.01715205]
 [ 0.1799371   0.0738214 ]]
[debugNSplineComposee] (module testsplinecomposee.py)
dump1_equal_dump2 = False
[debugNSplineComposee] (module testsplinecomposee.py)

    S.join(1) (unenervure2d.gnu)
    ----------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = unenervure2d.gnu
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [['cubic', [(1, 0.6945927106677213, -3.939231012048832), (2, 0.0, 0.0)]]]
    nb pts discretisation = [1000]
      mode echantillonage = ['courbure']
       nb pts echantillon = [50]
         largeur, hauteur = 0.516699, 0.111
              position cg = -0.135972, 0.0266541
                 longueur = 1.09592
                 ruptures = [0, 85]
              composantes = [u'unenervure2d.gnu-#0']
      nb pts ctl par comp = [86]
[debugNSplineComposee] (module testsplinecomposee.py)
Ruptures = [[0.1799371 0.0738214]
 [0.1799371 0.0738214]]
[debugNSplineComposee] (module testsplinecomposee.py)

    S.split(len(S)/2) (unenervure2d.gnu)
    ------------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = unenervure2d.gnu
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((1, 0.6945927106677213, -3.939231012048832), (2, 0, 0))), ('cubic', ((2, 0, 0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [50, 50]
         largeur, hauteur = 0.517289, 0.111002
              position cg = -0.135742, 0.0266838
                 longueur = 1.10506
                 ruptures = [0, 43, 85]
              composantes = [u'unenervure2d.gnu-#0', u'unenervure2d.gnu-#1']
      nb pts ctl par comp = [44, 43]
[debugNSplineComposee] (module testsplinecomposee.py)
ruptures = [[ 0.1799371   0.0738214 ]
 [-0.33424179 -0.02156597]
 [ 0.1799371   0.0738214 ]]
[debugNSplineComposee] (module testsplinecomposee.py)

    removePoint(rupture[1]) (unenervure2d.gnu)
    ------------------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
normal ; On tente la suppression d'un point anguleux (43)
[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = unenervure2d.gnu
                     role = NSplineComposee
          nb pts controle = 85
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0, 0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000]
      mode echantillonage = ['courbure']
       nb pts echantillon = [50]
         largeur, hauteur = 0.516416, 0.111
              position cg = -0.136187, 0.0266235
                 longueur = 1.09036
                 ruptures = [0, 84]
              composantes = [u'unenervure2d.gnu-#0']
      nb pts ctl par comp = [85]
[debugNSplineComposee] (module testsplinecomposee.py)

    S.insertPoint((20, 20)) unenervure2d.gnu
    ----------------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = unenervure2d.gnu
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0, 0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000]
      mode echantillonage = ['courbure']
       nb pts echantillon = [50]
         largeur, hauteur = 20.3279, 20.3179
              position cg = 10.8871, 9.82278
                 longueur = 58.5377
                 ruptures = [0, 85]
              composantes = [u'unenervure2d.gnu-#0']
      nb pts ctl par comp = [86]
[debugNSplineComposee] (module testsplinecomposee.py)
points = [[0.17993709719581433, 0.0738214014557819], [20.0, 20.0], [0.17231778920106464, 0.0719714170879712], [0.1677016365345936, 0.0708278573475849], [0.16204903541174284, 0.06940385974016183], [0.15548532235711895, 0.06771766585553317], [0.14825935354347214, 0.06582066990819858], [0.13824597631903854, 0.06312125502322917], [0.1289134356894859, 0.0605307203066602], [0.11802319572408787, 0.05741633547879327], [0.10748773138517786, 0.05430894302177154], [0.09669908279623954, 0.0510111530145093], [0.08595265327864154, 0.0476443863618143], [0.07255616824035113, 0.04333315383845621], [0.05939783810694724, 0.03892668969808744], [0.045299825166562696, 0.03403768040556728], [0.024757132647405228, 0.026645739087012763], [0.007002038174564157, 0.02092701908070994], [-0.010906915602143352, 0.015245165774689939], [-0.030338991923884832, 0.009422930293686328], [-0.04956617345885544, 0.003995159219718523], [-0.07053575688310967, -0.0016080764688494315], [-0.09077210693924705, -0.00654153205448809], [-0.11057950491063454, -0.01108359475492221], [-0.12607346355594504, -0.014466465851758162], [-0.15351736445632203, -0.019798129177277496], [-0.16809892804714305, -0.022390515292508344], [-0.18620646705911792, -0.02537905914023919], [-0.205777487049971, -0.028042535284158412], [-0.22320922348666986, -0.030398395358072983], [-0.23900207231817003, -0.0325353600735947], [-0.25514712648223214, -0.03442553531666083], [-0.268500953362274, -0.03589429680658081], [-0.2804530971086905, -0.0369045934637052], [-0.28904393952307705, -0.03717912433438027], [-0.29576438995997084, -0.036820055239472266], [-0.2988760203966811, -0.03636881077705505], [-0.3013158672116636, -0.03589209941348599], [-0.30360714954920504, -0.03522136038290352], [-0.30557008851322826, -0.0344893198157767], [-0.325865346847819, -0.02700909298735587], [-0.32806129583378574, -0.026084305933688115], [-0.33038904787841217, -0.025057008883786015], [-0.3326311696496005, -0.023593941969539317], [-0.3352705907065655, -0.01949759998703232], [-0.33599895753006703, -0.01715204531267013], [-0.33639546652385877, -0.010250244514484023], [-0.33519879451548357, -0.0031122016913867137], [-0.3324135502159832, 0.004196080128035785], [-0.328045041737588, 0.011578011793541006], [-0.32211079169375156, 0.018914135705882438], [-0.3146304907175277, 0.02607425463402213], [-0.30563388589731344, 0.0329276166344491], [-0.29516265617716775, 0.03935355097491183], [-0.2832718710015044, 0.045249740519543606], [-0.27002737081022976, 0.050540400860496035], [-0.2555101230253815, 0.055177949263835596], [-0.2398063739735982, 0.05914474115132039], [-0.2230252017774962, 0.06244895962544904], [-0.2052738157671582, 0.06512389371659524], [-0.1866765813558558, 0.06721950665105372], [-0.16723959366440913, 0.0685618980852303], [-0.1474777641186683, 0.06958809399493074], [-0.12547309593654848, 0.07028048347694382], [-0.10637904670568707, 0.07069299734270001], [-0.0852766395635214, 0.07111906480951197], [-0.06446495716291659, 0.07150889797428314], [-0.04369250820645136, 0.07186784915626591], [-0.023961547291375895, 0.07218064665971577], [-0.004030173309824275, 0.07246927839461538], [0.016025571219833418, 0.07273150570602585], [0.035053961104363596, 0.0729543362297634], [0.05334558933483524, 0.07314473675028006], [0.07039728921366104, 0.07330110900629704], [0.08661855798180942, 0.07343107727740678], [0.10186854866400852, 0.07353641061894906], [0.11329707562849659, 0.07360377694562328], [0.12295446101311872, 0.07365291077191466], [0.1309724463776164, 0.07368876401027223], [0.1399290608374092, 0.07374552613347579], [0.14788047319780329, 0.0737696407550231], [0.15505775168305214, 0.07378438609950998], [0.16178392933680055, 0.07379595027759714], [0.1673705034508219, 0.07380457979363725], [0.17194021291569042, 0.07381099903741596], [0.17993709719581433, 0.0738214014557819]]
[debugNSplineComposee] (module testsplinecomposee.py)

    S.insertPoint(pt,43) unenervure2d.gnu
    -------------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = unenervure2d.gnu
                     role = NSplineComposee
          nb pts controle = 87
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0, 0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000]
      mode echantillonage = ['courbure']
       nb pts echantillon = [50]
         largeur, hauteur = 22.6082, 21.7749
              position cg = 9.40515, 9.18194
                 longueur = 124.626
                 ruptures = [0, 86]
              composantes = [u'unenervure2d.gnu-#0']
      nb pts ctl par comp = [87]
[debugNSplineComposee] (module testsplinecomposee.py)

    S[0] = (2,0.5) (unenervure2d.gnu)
    ---------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = unenervure2d.gnu
                     role = NSplineComposee
          nb pts controle = 87
                   closed = False
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0, 0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000]
      mode echantillonage = ['courbure']
       nb pts echantillon = [50]
         largeur, hauteur = 22.6084, 21.7747
              position cg = 9.4738, 9.24415
                 longueur = 122.876
                 ruptures = [0, 86]
              composantes = [u'unenervure2d.gnu-#0']
      nb pts ctl par comp = [87]
[debugNSplineComposee] (module testsplinecomposee.py)

    S[len(S)-1] = S[0] (unenervure2d.gnu)
    -------------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = unenervure2d.gnu
                     role = NSplineComposee
          nb pts controle = 87
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0, 0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000]
      mode echantillonage = ['courbure']
       nb pts echantillon = [50]
         largeur, hauteur = 22.6081, 21.7751
              position cg = 9.47668, 9.24722
                 longueur = 124.754
                 ruptures = [0, 86]
              composantes = [u'unenervure2d.gnu-#0']
      nb pts ctl par comp = [87]
[debugNSplineComposee] (module testsplinecomposee.py)

    S.appendPoint((2,1.5)) (unenervure2d.gnu)
    -----------------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = unenervure2d.gnu
                     role = NSplineComposee
          nb pts controle = 88
                   closed = False
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0, 0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000]
      mode echantillonage = ['courbure']
       nb pts echantillon = [50]
         largeur, hauteur = 22.6084, 21.7749
              position cg = 9.48238, 9.25355
                 longueur = 125.835
                 ruptures = [0, 87]
              composantes = [u'unenervure2d.gnu-#0']
      nb pts ctl par comp = [88]
[debugNSplineComposee] (module testsplinecomposee.py)

    S.insertPoint((2,-2)) (unenervure2d.gnu)
    ----------------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = unenervure2d.gnu
                     role = NSplineComposee
          nb pts controle = 89
                   closed = False
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0, 0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000]
      mode echantillonage = ['courbure']
       nb pts echantillon = [50]
         largeur, hauteur = 22.6082, 22.296
              position cg = 9.52919, 9.31202
                 longueur = 129.275
                 ruptures = [0, 88]
              composantes = [u'unenervure2d.gnu-#0']
      nb pts ctl par comp = [89]
[debugNSplineComposee] (module testsplinecomposee.py)

    S.insertPoint((6,0)) (unenervure2d.gnu)
    ---------------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = unenervure2d.gnu
                     role = NSplineComposee
          nb pts controle = 90
                   closed = False
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0, 0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000]
      mode echantillonage = ['courbure']
       nb pts echantillon = [50]
         largeur, hauteur = 22.6081, 22.2941
              position cg = 7.52109, 9.71269
                 longueur = 131.971
                 ruptures = [0, 89]
              composantes = [u'unenervure2d.gnu-#0']
      nb pts ctl par comp = [90]
[debugNSplineComposee] (module testsplinecomposee.py)

    S.removePoint(3) (unenervure2d.gnu)
    -----------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = unenervure2d.gnu
                     role = NSplineComposee
          nb pts controle = 89
                   closed = False
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0, 0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000]
      mode echantillonage = ['courbure']
       nb pts echantillon = [50]
         largeur, hauteur = 22.6081, 22.2941
              position cg = 7.51246, 9.71487
                 longueur = 131.971
                 ruptures = [0, 88]
              composantes = [u'unenervure2d.gnu-#0']
      nb pts ctl par comp = [89]
[debugNSplineComposee] (module testsplinecomposee.py)

    S._update() (unenervure2d.gnu)
    ------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = unenervure2d.gnu
                     role = NSplineComposee
          nb pts controle = 89
                   closed = False
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0, 0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000]
      mode echantillonage = ['courbure']
       nb pts echantillon = [50]
         largeur, hauteur = 22.6082, 22.2941
              position cg = 7.51246, 9.71487
                 longueur = 131.969
                 ruptures = [0, 88]
              composantes = [u'unenervure2d.gnu-#0']
      nb pts ctl par comp = [89]
[debugNSplineComposee] (module testsplinecomposee.py)
===========================================
Fin debugNSplineComposee : unenervure2d.gnu
===========================================


[testNSplineComposee] (module testsplinecomposee.py)
========================================
testNSplineComposee : (unenervure2d.gnu)
========================================


[testNSplineComposee] (module testsplinecomposee.py)

    1. Constructeur vide
    --------------------

[testNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = vide
                     role = NSplineComposee
          nb pts controle = 1
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = []
    nb pts discretisation = []
      mode echantillonage = []
       nb pts echantillon = []
         largeur, hauteur = 0, 0
              position cg = 0, 0
                 longueur = 0
                 ruptures = [0]
              composantes = []
      nb pts ctl par comp = []
[testNSplineComposee] (module testsplinecomposee.py)

    methode-0 : [('cubic', 'natural'), ('cubic', 'natural')] (unenervure2d.gnu)
    ---------------------------------------------------------------------------

[testNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = unenervure2d.gnu-1
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', 'natural'), ('cubic', 'natural')]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [100, 100]
         largeur, hauteur = 2.61948, 0.465482
              position cg = -0.680757, 0.172271
                 longueur = 5.4517
                 ruptures = [0, 45, 85]
              composantes = [u'unenervure2d.gnu-1-#0', u'unenervure2d.gnu-1-#1']
      nb pts ctl par comp = [46, 41]
[testNSplineComposee] (module testsplinecomposee.py)

    methode-1 : [('cubic', ((1, 0, 3.14), (1, 0, -3.14))), ('cubic', ((1, 0, 0), (1, 0, 0)))] (unenervure2d.gnu)
    ------------------------------------------------------------------------------------------------------------

[testNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = unenervure2d.gnu-2
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((1, 0, 3.14), (1, 0, -3.14))), ('cubic', ((1, 0, 0), (1, 0, 0)))]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [100, 100]
         largeur, hauteur = 2.61948, 0.465482
              position cg = -0.681105, 0.17228
                 longueur = 5.46019
                 ruptures = [0, 45, 85]
              composantes = [u'unenervure2d.gnu-2-#0', u'unenervure2d.gnu-2-#1']
      nb pts ctl par comp = [46, 41]
[testNSplineComposee] (module testsplinecomposee.py)

    methode-2 : [('cubic', 'not-a-knot'), ('cubic', 'not-a-knot')] (unenervure2d.gnu)
    ---------------------------------------------------------------------------------

[testNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = unenervure2d.gnu-3
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', 'not-a-knot'), ('cubic', 'not-a-knot')]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [100, 100]
         largeur, hauteur = 2.61948, 0.465482
              position cg = -0.680768, 0.172271
                 longueur = 5.45174
                 ruptures = [0, 45, 85]
              composantes = [u'unenervure2d.gnu-3-#0', u'unenervure2d.gnu-3-#1']
      nb pts ctl par comp = [46, 41]
[testNSplineComposee] (module testsplinecomposee.py)

    methode-3 : [['cubic', ((1, 0, 2), (1, 0, -2))], ['cubic', ((1, 1, 0), (1, 1, 0))]] (unenervure2d.gnu)
    ------------------------------------------------------------------------------------------------------

[testNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = unenervure2d.gnu-4
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [['cubic', ((1, 0, 2), (1, 0, -2))], ['cubic', ((1, 1, 0), (1, 1, 0))]]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [100, 100]
         largeur, hauteur = 2.61948, 0.465482
              position cg = -0.680952, 0.172279
                 longueur = 5.45701
                 ruptures = [0, 45, 85]
              composantes = [u'unenervure2d.gnu-4-#0', u'unenervure2d.gnu-4-#1']
      nb pts ctl par comp = [46, 41]
[testNSplineComposee] (module testsplinecomposee.py)

    methode-4 : [('cubic', ((2, 0, 0), (1, 0, -5))), ('cubic', ((1, 0, -5), (2, 0, 0)))] (unenervure2d.gnu)
    -------------------------------------------------------------------------------------------------------

[testNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = unenervure2d.gnu-5
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0, 0), (1, 0, -5))), ('cubic', ((1, 0, -5), (2, 0, 0)))]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [100, 100]
         largeur, hauteur = 2.61948, 0.465482
              position cg = -0.680742, 0.172273
                 longueur = 5.46951
                 ruptures = [0, 45, 85]
              composantes = [u'unenervure2d.gnu-5-#0', u'unenervure2d.gnu-5-#1']
      nb pts ctl par comp = [46, 41]
[testNSplineComposee] (module testsplinecomposee.py)

    hardScale : unenervure2d.gnu
    ----------------------------

[testNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = unenervure2d.gnu-5
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0.0, 0.0), (1, 0.0, -1.0))), ('cubic', ((1, 0.0, -1.0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [100, 100]
         largeur, hauteur = 0.523895, 0.0930963
              position cg = -0.501822, 0.155857
                 longueur = 1.0939
                 ruptures = [0, 45, 85]
              composantes = [u'unenervure2d.gnu-5-#0', u'unenervure2d.gnu-5-#1']
      nb pts ctl par comp = [46, 41]
[testNSplineComposee] (module testsplinecomposee.py)

    translate((-1.5,0.05)) : unenervure2d.gnu
    -----------------------------------------

[testNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = unenervure2d.gnu-5
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0.0, 0.0), (1, 0.0, -1.0))), ('cubic', ((1, 0.0, -1.0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [100, 100]
         largeur, hauteur = 0.523895, 0.0930963
              position cg = -2.00182, 0.205857
                 longueur = 1.0939
                 ruptures = [0, 45, 85]
              composantes = [u'unenervure2d.gnu-5-#0', u'unenervure2d.gnu-5-#1']
      nb pts ctl par comp = [46, 41]
[testNSplineComposee] (module testsplinecomposee.py)

    hardRotate(30) : unenervure2d.gnu
    ---------------------------------

[testNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = unenervure2d.gnu-5
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [['cubic', [(2, 0.0, 0.0), (1, 0.49999999999999994, -0.8660254037844387)]], ['cubic', [(1, 0.49999999999999994, -0.8660254037844387), (2, 0.0, 0.0)]]]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [100, 100]
         largeur, hauteur = 0.457808, 0.26788
              position cg = -1.99788, 0.182943
                 longueur = 1.0939
                 ruptures = [0, 45, 85]
              composantes = [u'unenervure2d.gnu-5-#0', u'unenervure2d.gnu-5-#1']
      nb pts ctl par comp = [46, 41]
[testNSplineComposee] (module testsplinecomposee.py)

    symetriser(1) : unenervure2d.gnu
    --------------------------------

[testNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = unenervure2d.gnu-5
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0.0, -0.0), (1, 0.49999999999999994, 0.8660254037844387))), ('cubic', ((1, 0.49999999999999994, 0.8660254037844387), (2, 0.0, -0.0)))]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [100, 100]
         largeur, hauteur = 0.457808, 0.26788
              position cg = -1.99788, 0.220565
                 longueur = 1.0939
                 ruptures = [0, 45, 85]
              composantes = [u'unenervure2d.gnu-5-#0', u'unenervure2d.gnu-5-#1']
      nb pts ctl par comp = [46, 41]
[testNSplineComposee] (module testsplinecomposee.py)

    symetriser(1) : unenervure2d.gnu
    --------------------------------

[testNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = unenervure2d.gnu
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [['cubic', ((2, 0, 0), (1, 0, -20))], ['cubic', ((1, 0, -20), (2, 0, 0))]]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [20, 10]
         largeur, hauteur = 2.61948, 0.465482
              position cg = -0.680692, 0.172278
                 longueur = 5.55488
                 ruptures = [0, 45, 85]
              composantes = [u'unenervure2d.gnu-#0', u'unenervure2d.gnu-#1']
      nb pts ctl par comp = [46, 41]
[testNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = unenervure2d.gnu
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0.0, 0.0), (1, 0.0, -4.0))), ('cubic', ((1, 0.0, -4.0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [20, 10]
         largeur, hauteur = 0.523895, 0.0930963
              position cg = -0.136138, 0.0344556
                 longueur = 1.11098
                 ruptures = [0, 45, 85]
              composantes = [u'unenervure2d.gnu-#0', u'unenervure2d.gnu-#1']
      nb pts ctl par comp = [46, 41]
[testNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = unenervure2d.gnu
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [['cubic', [(2, 0.0, 0.0), (1, 0.6945927106677213, -3.939231012048832)]], ['cubic', [(1, 0.6945927106677213, -3.939231012048832), (2, 0.0, 0.0)]]]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [20, 10]
         largeur, hauteur = 0.516612, 0.111002
              position cg = -0.136172, 0.0266277
                 longueur = 1.11098
                 ruptures = [0, 45, 85]
              composantes = [u'unenervure2d.gnu-#0', u'unenervure2d.gnu-#1']
      nb pts ctl par comp = [46, 41]
[testNSplineComposee] (module testsplinecomposee.py)
join_1 = <NSplineComposee>
                     name = unenervure2d.gnu
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [['cubic', [(2, 0.0, 0.0), (1, 0.6945927106677213, -3.939231012048832)]], ['cubic', [(1, 0.6945927106677213, -3.939231012048832), (2, 0.0, 0.0)]]]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [20, 10]
         largeur, hauteur = 0.516612, 0.111002
              position cg = -0.136172, 0.0266277
                 longueur = 1.11098
                 ruptures = [0, 45, 85]
              composantes = [u'unenervure2d.gnu-#0', u'unenervure2d.gnu-#1']
      nb pts ctl par comp = [46, 41] ; R = [[ 0.1799371   0.0738214 ]
 [-0.33599896 -0.01715205]
 [ 0.1799371   0.0738214 ]]
[testNSplineComposee] (module testsplinecomposee.py)
S = <NSplineComposee>
                     name = unenervure2d.gnu
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [['cubic', [(2, 0.0, 0.0), (1, 0.6945927106677213, -3.939231012048832)]], ['cubic', [(1, 0.6945927106677213, -3.939231012048832), (2, 0.0, 0.0)]]]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [20, 10]
         largeur, hauteur = 0.516612, 0.111002
              position cg = -0.136172, 0.0266277
                 longueur = 1.11098
                 ruptures = [0, 45, 85]
              composantes = [u'unenervure2d.gnu-#0', u'unenervure2d.gnu-#1']
      nb pts ctl par comp = [46, 41] ; R = [[ 0.1799371   0.0738214 ]
 [-0.33599896 -0.01715205]
 [ 0.1799371   0.0738214 ]]
[testNSplineComposee] (module testsplinecomposee.py)
join_1 = <NSplineComposee>
                     name = unenervure2d.gnu
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [['cubic', [(1, 0.6945927106677213, -3.939231012048832), (2, 0.0, 0.0)]]]
    nb pts discretisation = [1000]
      mode echantillonage = ['courbure']
       nb pts echantillon = [10]
         largeur, hauteur = 0.516699, 0.111
              position cg = -0.135972, 0.0266541
                 longueur = 1.09592
                 ruptures = [0, 85]
              composantes = [u'unenervure2d.gnu-#0']
      nb pts ctl par comp = [86] ; R = [[0.1799371 0.0738214]
 [0.1799371 0.0738214]]
[testNSplineComposee] (module testsplinecomposee.py)
split_nba = <NSplineComposee>
                     name = unenervure2d.gnu
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((1, 0.6945927106677213, -3.939231012048832), (2, 0, 0))), ('cubic', ((2, 0, 0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [10, 10]
         largeur, hauteur = 0.517212, 0.111002
              position cg = -0.135744, 0.0266839
                 longueur = 1.10488
                 ruptures = [0, 45, 85]
              composantes = [u'unenervure2d.gnu-#0', u'unenervure2d.gnu-#1']
      nb pts ctl par comp = [46, 41] ; R = [[ 0.1799371   0.0738214 ]
 [-0.33599896 -0.01715205]
 [ 0.1799371   0.0738214 ]]
[testNSplineComposee] (module testsplinecomposee.py)
normal ; On tente la suppression d'un point anguleux (45)
[testNSplineComposee] (module testsplinecomposee.py)
points = [[0.17993709719581433, 0.0738214014557819], [20.0, 20.0], [0.17231778920106464, 0.0719714170879712], [0.1677016365345936, 0.0708278573475849], [0.16204903541174284, 0.06940385974016183], [0.15548532235711895, 0.06771766585553317], [0.14825935354347214, 0.06582066990819858], [0.13824597631903854, 0.06312125502322917], [0.1289134356894859, 0.0605307203066602], [0.11802319572408787, 0.05741633547879327], [0.10748773138517786, 0.05430894302177154], [0.09669908279623954, 0.0510111530145093], [0.08595265327864154, 0.0476443863618143], [0.07255616824035113, 0.04333315383845621], [0.05939783810694724, 0.03892668969808744], [0.045299825166562696, 0.03403768040556728], [0.024757132647405228, 0.026645739087012763], [0.007002038174564157, 0.02092701908070994], [-0.010906915602143352, 0.015245165774689939], [-0.030338991923884832, 0.009422930293686328], [-0.04956617345885544, 0.003995159219718523], [-0.07053575688310967, -0.0016080764688494315], [-0.09077210693924705, -0.00654153205448809], [-0.11057950491063454, -0.01108359475492221], [-0.12607346355594504, -0.014466465851758162], [-0.15351736445632203, -0.019798129177277496], [-0.16809892804714305, -0.022390515292508344], [-0.18620646705911792, -0.02537905914023919], [-0.205777487049971, -0.028042535284158412], [-0.22320922348666986, -0.030398395358072983], [-0.23900207231817003, -0.0325353600735947], [-0.25514712648223214, -0.03442553531666083], [-0.268500953362274, -0.03589429680658081], [-0.2804530971086905, -0.0369045934637052], [-0.28904393952307705, -0.03717912433438027], [-0.29576438995997084, -0.036820055239472266], [-0.2988760203966811, -0.03636881077705505], [-0.3013158672116636, -0.03589209941348599], [-0.30360714954920504, -0.03522136038290352], [-0.30557008851322826, -0.0344893198157767], [-0.325865346847819, -0.02700909298735587], [-0.32806129583378574, -0.026084305933688115], [-0.33038904787841217, -0.025057008883786015], [-0.3326311696496005, -0.023593941969539317], [-0.33424179153365674, -0.021565974136412], [-0.3352705907065655, -0.01949759998703232], [-0.33639546652385877, -0.010250244514484023], [-0.33519879451548357, -0.0031122016913867137], [-0.3324135502159832, 0.004196080128035785], [-0.328045041737588, 0.011578011793541006], [-0.32211079169375156, 0.018914135705882438], [-0.3146304907175277, 0.02607425463402213], [-0.30563388589731344, 0.0329276166344491], [-0.29516265617716775, 0.03935355097491183], [-0.2832718710015044, 0.045249740519543606], [-0.27002737081022976, 0.050540400860496035], [-0.2555101230253815, 0.055177949263835596], [-0.2398063739735982, 0.05914474115132039], [-0.2230252017774962, 0.06244895962544904], [-0.2052738157671582, 0.06512389371659524], [-0.1866765813558558, 0.06721950665105372], [-0.16723959366440913, 0.0685618980852303], [-0.1474777641186683, 0.06958809399493074], [-0.12547309593654848, 0.07028048347694382], [-0.10637904670568707, 0.07069299734270001], [-0.0852766395635214, 0.07111906480951197], [-0.06446495716291659, 0.07150889797428314], [-0.04369250820645136, 0.07186784915626591], [-0.023961547291375895, 0.07218064665971577], [-0.004030173309824275, 0.07246927839461538], [0.016025571219833418, 0.07273150570602585], [0.035053961104363596, 0.0729543362297634], [0.05334558933483524, 0.07314473675028006], [0.07039728921366104, 0.07330110900629704], [0.08661855798180942, 0.07343107727740678], [0.10186854866400852, 0.07353641061894906], [0.11329707562849659, 0.07360377694562328], [0.12295446101311872, 0.07365291077191466], [0.1309724463776164, 0.07368876401027223], [0.1399290608374092, 0.07374552613347579], [0.14788047319780329, 0.0737696407550231], [0.15505775168305214, 0.07378438609950998], [0.16178392933680055, 0.07379595027759714], [0.1673705034508219, 0.07380457979363725], [0.17194021291569042, 0.07381099903741596], [0.17993709719581433, 0.0738214014557819]]
<NSplineComposee>
                     name = unenervure2d.gnu
                     role = NSplineComposee
          nb pts controle = 90
                   closed = False
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0, 0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000]
      mode echantillonage = ['courbure']
       nb pts echantillon = [10]
         largeur, hauteur = 22.6494, 22.2739
              position cg = 7.5706, 9.77582
                 longueur = 131.846
                 ruptures = [0, 89]
              composantes = [u'unenervure2d.gnu-#0']
      nb pts ctl par comp = [90]
[testNSplineComposee] (module testsplinecomposee.py)
============================================
Fin testNSplineComposee : (unenervure2d.gnu)
============================================


[debugNSplineComposee] (module testsplinecomposee.py)
====================================
debugNSplineComposee : (diamirE.spl)
====================================


[debugNSplineComposee] (module testsplinecomposee.py)

    Constructeur vide
    -----------------

<NSplineComposee>
                     name = NSplineComposee
                     role = NSplineComposee
          nb pts controle = 1
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = []
    nb pts discretisation = []
      mode echantillonage = []
       nb pts echantillon = []
         largeur, hauteur = 0, 0
              position cg = 0, 0
                 longueur = 0
                 ruptures = [0]
              composantes = []
      nb pts ctl par comp = []
[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = diamirE.spl
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0, 0), (1, 0, -5))), ('cubic', ((1, 0, -5), (2, 0, 0)))]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [50, 40]
         largeur, hauteur = 1, 0.189582
              position cg = 0.408154, 0.00935867
                 longueur = 2.09141
                 ruptures = [0, 40, 85]
              composantes = [u'diamirE.spl-#0', u'diamirE.spl-#1']
      nb pts ctl par comp = [41, 46]
[debugNSplineComposee] (module testsplinecomposee.py)

    elaguer(eps=1, replace=True) : (diamirE.spl)
    --------------------------------------------

[elaguer] (module splinesimple.py)
historique_distances = [400.12, 163.13, 66.81, 33.57, 15.02, 11.86, 5.33, 1.36, 0.54]
[elaguer] (module splinesimple.py)
Apres ELAGAGE : dist = 0.54 mm/m ; 41 points => 11 points 
[elaguer] (module splinesimple.py)
historique_distances = [412.92, 170.6, 70.48, 23.89, 14.79, 7.09, 4.54, 7.42, 4.95, 3.7, 2.66, 1.66, 1.52, 0.76]
[elaguer] (module splinesimple.py)
Apres ELAGAGE : dist = 0.76 mm/m ; 46 points => 16 points 
[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = diamirE.spl
                     role = NSplineComposee
          nb pts controle = 26
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0, 0), (1, 0, -5))), ('cubic', ((1, 0, -5), (2, 0, 0)))]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [50, 40]
         largeur, hauteur = 1, 0.189763
              position cg = 0.407822, 0.00940468
                 longueur = 2.09246
                 ruptures = [0, 10, 25]
              composantes = [u'diamirE.spl-#0', u'diamirE.spl-#1']
      nb pts ctl par comp = [11, 16]
[debugNSplineComposee] (module testsplinecomposee.py)

    echantillonner() (diamirE.spl)
    ------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
echantillon = [[1.0, 0.0], [0.7528747414970827, 0.041864410965634244], [0.6081487262082915, 0.06581416429825204], [0.5082251542688148, 0.0818366240995377], [0.4305014016660776, 0.09372403671693219], [0.38057351458139543, 0.10088906319530112], [0.3468687090652668, 0.10516135508710693], [0.31840110216988393, 0.10818168510275698], [0.29294182868965357, 0.11028569816601153], [0.2695232160146781, 0.11161961587540374], [0.24762560997018906, 0.11226317688019909], [0.2269165589887495, 0.11226647193753513], [0.20714649695162732, 0.11166157180281037], [0.18814936621846615, 0.11046863926026727], [0.16984333990465067, 0.10870478788648207], [0.15295307309827655, 0.10647439986309636], [0.1374493335583544, 0.10381597608635967], [0.12308383174429416, 0.1007357559897486], [0.10967993650345653, 0.09723853351526109], [0.09712675253312146, 0.09333375582274425], [0.085300469441087, 0.08901582441127713], [0.07412691046970579, 0.08428424054357618], [0.06359850674261933, 0.07916039803991683], [0.05383491141724584, 0.07372903166166898], [0.04484337778092453, 0.06803075702185706], [0.03665039283046521, 0.06212677154697007], [0.029890363911923033, 0.05655869910231204], [0.024222278570978247, 0.05111442906462714], [0.018032716059301054, 0.044124155803842637], [0.011175510892586026, 0.03555581370470426], [0.00865085385524097, 0.03165624467495651], [0.006444218534117846, 0.02690482231842008], [0.003162521857952857, 0.016357053027422366], [0.0022070293501571456, 0.013785403810184515], [0.001888439717864692, 0.013282931964915257], [0.0017290049349329777, 0.013143909533882298], [0.0016256176397732918, 0.013104294603005072], [0.001537361613844979, 0.013106942058153518], [0.001444430497868282, 0.013149333311926803], [0.0013069259055148003, 0.01328223284339375], [0.0010701200650178797, 0.013671704665258749], [0.0007016819496963685, 0.014423357178662935], [0.0006043791570776808, 0.014557410832601987], [0.0005561762528312123, 0.014594042340803103], [0.0005241747142658819, 0.014603286306822175], [0.0004958887413003548, 0.014599285846263604], [0.00046431101236027954, 0.014578909044835756], [0.00041821461210956207, 0.014512632185219037], [0.0003206270341668435, 0.014172194875311652], [5.421010862427522e-20, 0.0], [0.00040792281768999434, -0.009341333404563864], [0.0005310436260445425, -0.009531691784178337], [0.000608730592962398, -0.009559020481155832], [0.0007037660908997346, -0.009529974066031482], [0.0009368170049947752, -0.00930026552719895], [0.0014376351454644908, -0.00872982199051259], [0.0016516703840007692, -0.008633395162953087], [0.0018309325650518484, -0.008667680325015107], [0.002165400478295965, -0.009023925835204902], [0.003995862950800409, -0.01288025623398869], [0.005786587820851662, -0.015144438875927011], [0.014607040506857785, -0.021135623746951954], [0.02776020004000811, -0.029053109798843013], [0.048643567294653176, -0.04095855295306991], [0.06359758647110648, -0.05038391257693422], [0.0717547154482714, -0.054927744391603535], [0.07861813395546823, -0.05784102311873353], [0.08638573283768296, -0.060184916638946574], [0.0957367879550154, -0.06204987742465464], [0.10821259035096306, -0.06350390992522077], [0.1959913965050358, -0.06929749725008712], [0.27823822932347797, -0.07425001530043288], [0.3262531150284786, -0.07648275881615285], [0.36112398653737826, -0.07734176670689624], [0.3909886554150905, -0.07728572664769529], [0.43935299371445174, -0.07575932540875774], [0.5336231386420058, -0.07241284506157927], [0.5820256334918342, -0.06997172753791962], [0.6217055534756054, -0.06718731324678862], [0.6567289452272179, -0.0639273951559105], [0.6887010567266766, -0.06013736499590972], [0.7197668984004059, -0.05559854927212757], [0.7523136170517722, -0.04996644843100905], [0.7866846041644817, -0.043133419322409564], [0.8239737915883888, -0.03480509410034549], [0.8805093636711812, -0.021469604740591144], [0.9105178173772286, -0.015086784974715366], [0.9435161332281415, -0.009035095810558516], [1.0, -2.6020852139652106e-18]]
[debugNSplineComposee] (module testsplinecomposee.py)

    hardScale((0.2, 0.2)) : (diamirE.spl)
    -------------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = diamirE.spl
                     role = NSplineComposee
          nb pts controle = 26
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0.0, 0.0), (1, 0.0, -1.0))), ('cubic', ((1, 0.0, -1.0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [50, 40]
         largeur, hauteur = 0.2, 0.0379526
              position cg = 0.307224, -0.00082598
                 longueur = 0.418493
                 ruptures = [0, 10, 25]
              composantes = [u'diamirE.spl-#0', u'diamirE.spl-#1']
      nb pts ctl par comp = [11, 16]
[debugNSplineComposee] (module testsplinecomposee.py)

    translate((-1.5,0.05)) : (diamirE.spl)
    --------------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = diamirE.spl
                     role = NSplineComposee
          nb pts controle = 26
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0.0, 0.0), (1, 0.0, -1.0))), ('cubic', ((1, 0.0, -1.0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [50, 40]
         largeur, hauteur = 0.2, 0.0379526
              position cg = -1.19278, 0.049174
                 longueur = 0.418493
                 ruptures = [0, 10, 25]
              composantes = [u'diamirE.spl-#0', u'diamirE.spl-#1']
      nb pts ctl par comp = [11, 16]
[debugNSplineComposee] (module testsplinecomposee.py)

    hardRotate(30) (diamirE.spl)
    ----------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = diamirE.spl
                     role = NSplineComposee
          nb pts controle = 26
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0.0, 0.0), (1, 0.0, -1.0))), ('cubic', ((1, 0.0, -1.0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [50, 40]
         largeur, hauteur = 0.2, 0.0379526
              position cg = -1.19278, 0.049174
                 longueur = 0.418493
                 ruptures = [0, 10, 25]
              composantes = [u'diamirE.spl-#0', u'diamirE.spl-#1']
      nb pts ctl par comp = [11, 16]
[debugNSplineComposee] (module testsplinecomposee.py)

    symetriser(1) (diamirE.spl)
    ---------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = diamirE.spl
                     role = NSplineComposee
          nb pts controle = 26
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [['cubic', [(2, 0.0, 0.0), (1, 0.49999999999999994, -0.8660254037844387)]], ['cubic', [(1, 0.49999999999999994, -0.8660254037844387), (2, 0.0, 0.0)]]]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [50, 40]
         largeur, hauteur = 0.174873, 0.102376
              position cg = -1.19742, 0.061406
                 longueur = 0.418493
                 ruptures = [0, 10, 25]
              composantes = [u'diamirE.spl-#0', u'diamirE.spl-#1']
      nb pts ctl par comp = [11, 16]
[debugNSplineComposee] (module testsplinecomposee.py)

    reconstruction (diamirE.spl)
    ----------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = diamirE.spl
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [['cubic', ((2, 0, 0), (1, 0, -20))], ['cubic', ((1, 0, -20), (2, 0, 0))]]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [50, 50]
         largeur, hauteur = 1, 0.189582
              position cg = 0.408106, 0.00936192
                 longueur = 2.19435
                 ruptures = [0, 40, 85]
              composantes = [u'diamirE.spl-#0', u'diamirE.spl-#1']
      nb pts ctl par comp = [41, 46]
[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = diamirE.spl
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [['cubic', ((2, 0, 0), (1, 0, -20))], ['cubic', ((1, 0, -20), (2, 0, 0))]]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [50, 50]
         largeur, hauteur = 1, 0.189582
              position cg = 0.408106, 0.00936192
                 longueur = 2.19435
                 ruptures = [0, 40, 85]
              composantes = [u'diamirE.spl-#0', u'diamirE.spl-#1']
      nb pts ctl par comp = [41, 46]
[debugNSplineComposee] (module testsplinecomposee.py)

    hardScale((0.2,0.2), centre=np.asarray((0,0))) (diamirE.spl)
    ------------------------------------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = diamirE.spl
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0.0, 0.0), (1, 0.0, -4.0))), ('cubic', ((1, 0.0, -4.0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [50, 50]
         largeur, hauteur = 0.2, 0.0379164
              position cg = 0.0816213, 0.00187238
                 longueur = 0.43887
                 ruptures = [0, 40, 85]
              composantes = [u'diamirE.spl-#0', u'diamirE.spl-#1']
      nb pts ctl par comp = [41, 46]
[debugNSplineComposee] (module testsplinecomposee.py)

    S.hardRotate(10) (diamirE.spl)
    ------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = diamirE.spl
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [['cubic', [(2, 0.0, 0.0), (1, 0.6945927106677213, -3.939231012048832)]], ['cubic', [(1, 0.6945927106677213, -3.939231012048832), (2, 0.0, 0.0)]]]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [50, 50]
         largeur, hauteur = 0.198495, 0.0436813
              position cg = 0.0816225, -0.000487539
                 longueur = 0.43887
                 ruptures = [0, 40, 85]
              composantes = [u'diamirE.spl-#0', u'diamirE.spl-#1']
      nb pts ctl par comp = [41, 46]
[debugNSplineComposee] (module testsplinecomposee.py)

    S.toDump() (diamirE.spl)
    ------------------------

{'classename': 'NSplineComposee',
 'cpoints': [[0.19852789502972187, 0.018224772712410665],
             [0.1954750752690747, 0.01822084850672671],
             [0.19373054195984563, 0.01821840637523502],
             [0.1915978273590968, 0.01821513466672761],
             [0.18903003603719643, 0.01821077413680304],
             [0.18629008698956429, 0.018205125157086402],
             [0.1832546109704876, 0.018195959023862195],
             [0.17983532042667744, 0.01817435118031983],
             [0.17677438481027352, 0.018160697864022086],
             [0.17308760208116963, 0.018141994617315853],
             [0.16872468128148116, 0.018116357891676933],
             [0.16290294375891395, 0.018076197655805506],
             [0.15671034830030328, 0.018026672338537164],
             [0.15020072515789762, 0.0179670422271803],
             [0.14321776398791744, 0.01789444888937673],
             [0.13595352106908037, 0.017809465251981536],
             [0.12829713952440525, 0.01770943486284798],
             [0.12068819245022255, 0.017599385167296283],
             [0.11315574368620947, 0.017480005520983794],
             [0.10522574659287938, 0.017343100075480917],
             [0.09728077045543115, 0.017194386148902688],
             [0.08922471528611854, 0.017031790658721364],
             [0.08193546118058603, 0.016874426247745822],
             [0.07353504883756631, 0.01661016320328852],
             [0.06599080291011171, 0.016218508531608784],
             [0.05857064223495826, 0.015706045690315577],
             [0.0514709893853053, 0.014906113137997116],
             [0.04469456301764588, 0.013884963490502686],
             [0.03828763069199356, 0.012623427806015166],
             [0.03229323094210887, 0.011109143837176334],
             [0.026750595091904597, 0.009338637248934889],
             [0.021694593900515993, 0.007318824359482747],
             [0.017155423119653318, 0.0050677934070606015],
             [0.01315837708755585, 0.002614648869829678],
             [0.009723887705446146, -1.8037469764679674e-06],
             [0.00686790144874147, -0.002735460951323428],
             [0.004602148490396682, -0.005536336415415996],
             [0.002934869953897662, -0.008354581774509793],
             [0.0018713793375967208, -0.011144776306469852],
             [0.0014147509558259663, -0.01386994645075102],
             [0.001566344427280264, -0.0165048628209754],
             [0.0018443750618152704, -0.017400424908377534],
             [0.002225414433881509, -0.01814770904091038],
             [0.002851896005745244, -0.018964348242058077],
             [0.003707994608745213, -0.019522906027578505],
             [0.004593338023524338, -0.019938499556531073],
             [0.005434747718322544, -0.020268239791448754],
             [0.01318287513328735, -0.023124128959113862],
             [0.01392280759968588, -0.02346657556819241],
             [0.014942324710281271, -0.023880886595290713],
             [0.01614463657830989, -0.024318184873875822],
             [0.018102553253903267, -0.02496543337015326],
             [0.02032204505025023, -0.025372836026144204],
             [0.022978561265399683, -0.02543705647942882],
             [0.027543695928433615, -0.02499861830332865],
             [0.032686256997798126, -0.02447817524561676],
             [0.03875518114052571, -0.023767275462748375],
             [0.044944804195056864, -0.02306209542965013],
             [0.05165734110190244, -0.022300937935608292],
             [0.059116335050457894, -0.02144565150653722],
             [0.06597094755367977, -0.020521849914790252],
             [0.07161414826653509, -0.01974514043250151],
             [0.08211066585773041, -0.01798166614399394],
             [0.08817586991790005, -0.016711995359617995],
             [0.09574696397684777, -0.01513385111620856],
             [0.10346361597103157, -0.013552577459784986],
             [0.11117325279056751, -0.011952457660396331],
             [0.11879132747717779, -0.010170769019853414],
             [0.1265644135721855, -0.008201174213848465],
             [0.13332053821775267, -0.006249192492630701],
             [0.13991231992695446, -0.004237698497663605],
             [0.14669945019758224, -0.0018356491678861923],
             [0.15326516412231606, 0.0005037132620558664],
             [0.15862209979238878, 0.0025919483624568342],
             [0.16340029510869264, 0.004546499292143683],
             [0.16732509355379832, 0.0062024225855119835],
             [0.17135131825601094, 0.007965094109073067],
             [0.1757019270965183, 0.009831077892481561],
             [0.17937764833002975, 0.01133922635015571],
             [0.1831442785508265, 0.012820931250755181],
             [0.1862576357310809, 0.013997734334638969],
             [0.18899851824608987, 0.014998353238091329],
             [0.19165473084100537, 0.015936821151017647],
             [0.19378659633220002, 0.016668014173589273],
             [0.19574674622299126, 0.017323161794550315],
             [0.19852789502972187, 0.018224772712410665]],
 'methode': [['cubic',
              [(2, 0.0, 0.0), (1, 0.6945927106677213, -3.939231012048832)]],
             ['cubic',
              [(1, 0.6945927106677213, -3.939231012048832), (2, 0.0, 0.0)]]],
 'mode': ['courbure', 'courbure'],
 'name': u'diamirE.spl',
 'nbpd': [1000, 1000],
 'nbpe': [50, 50],
 'role': 'NSplineComposee',
 'ruptures': [0, 40, 85]}
[debugNSplineComposee] (module testsplinecomposee.py)

    NSplineComposee(**dump0) (diamirE.spl)
    --------------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
join_1 = <NSplineComposee>
                     name = diamirE.spl
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [['cubic', [(2, 0.0, 0.0), (1, 0.6945927106677213, -3.939231012048832)]], ['cubic', [(1, 0.6945927106677213, -3.939231012048832), (2, 0.0, 0.0)]]]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [50, 50]
         largeur, hauteur = 0.198495, 0.0436813
              position cg = 0.0816225, -0.000487539
                 longueur = 0.43887
                 ruptures = [0, 40, 85]
              composantes = [u'diamirE.spl-#0', u'diamirE.spl-#1']
      nb pts ctl par comp = [41, 46]
[debugNSplineComposee] (module testsplinecomposee.py)
Rupture = [[0.19852789502972187, 0.018224772712410665], [0.001566344427280264, -0.0165048628209754], [0.19852789502972187, 0.018224772712410665]]
[debugNSplineComposee] (module testsplinecomposee.py)

    dump1 = S.toDump() (diamirE.spl)
    --------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
dump_equal_dump1 = True
[debugNSplineComposee] (module testsplinecomposee.py)

    S.load(dump1) (diamirE.spl)
    ---------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = diamirE.spl
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [['cubic', [(2, 0.0, 0.0), (1, 0.6945927106677213, -3.939231012048832)]], ['cubic', [(1, 0.6945927106677213, -3.939231012048832), (2, 0.0, 0.0)]]]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [50, 50]
         largeur, hauteur = 0.198495, 0.0436813
              position cg = 0.0816225, -0.000487539
                 longueur = 0.43887
                 ruptures = [0, 40, 85]
              composantes = [u'diamirE.spl-#0', u'diamirE.spl-#1']
      nb pts ctl par comp = [41, 46]
[debugNSplineComposee] (module testsplinecomposee.py)
R = [[ 0.1985279   0.01822477]
 [ 0.00156634 -0.01650486]
 [ 0.1985279   0.01822477]]
[debugNSplineComposee] (module testsplinecomposee.py)
dump1_equal_dump2 = False
[debugNSplineComposee] (module testsplinecomposee.py)

    S.join(1) (diamirE.spl)
    -----------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = diamirE.spl
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [['cubic', [(1, 0.6945927106677213, -3.939231012048832), (2, 0.0, 0.0)]]]
    nb pts discretisation = [1000]
      mode echantillonage = ['courbure']
       nb pts echantillon = [50]
         largeur, hauteur = 0.19758, 0.0442444
              position cg = 0.0814421, -0.000513848
                 longueur = 0.425402
                 ruptures = [0, 85]
              composantes = [u'diamirE.spl-#0']
      nb pts ctl par comp = [86]
[debugNSplineComposee] (module testsplinecomposee.py)
Ruptures = [[0.1985279  0.01822477]
 [0.1985279  0.01822477]]
[debugNSplineComposee] (module testsplinecomposee.py)

    S.split(len(S)/2) (diamirE.spl)
    -------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = diamirE.spl
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((1, 0.6945927106677213, -3.939231012048832), (2, 0, 0))), ('cubic', ((2, 0, 0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [50, 50]
         largeur, hauteur = 0.198316, 0.0447739
              position cg = 0.0812525, -0.00053497
                 longueur = 0.435169
                 ruptures = [0, 43, 85]
              composantes = [u'diamirE.spl-#0', u'diamirE.spl-#1']
      nb pts ctl par comp = [44, 43]
[debugNSplineComposee] (module testsplinecomposee.py)
ruptures = [[ 0.1985279   0.01822477]
 [ 0.0028519  -0.01896435]
 [ 0.1985279   0.01822477]]
[debugNSplineComposee] (module testsplinecomposee.py)

    removePoint(rupture[1]) (diamirE.spl)
    -------------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
normal ; On tente la suppression d'un point anguleux (43)
[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = diamirE.spl
                     role = NSplineComposee
          nb pts controle = 85
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0, 0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000]
      mode echantillonage = ['courbure']
       nb pts echantillon = [50]
         largeur, hauteur = 0.197143, 0.0436809
              position cg = 0.081635, -0.000485943
                 longueur = 0.41731
                 ruptures = [0, 84]
              composantes = [u'diamirE.spl-#0']
      nb pts ctl par comp = [85]
[debugNSplineComposee] (module testsplinecomposee.py)

    S.insertPoint((20, 20)) diamirE.spl
    -----------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = diamirE.spl
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0, 0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000]
      mode echantillonage = ['courbure']
       nb pts echantillon = [50]
         largeur, hauteur = 19.9906, 20.4666
              position cg = 10.9441, 9.46843
                 longueur = 58.8141
                 ruptures = [0, 85]
              composantes = [u'diamirE.spl-#0']
      nb pts ctl par comp = [86]
[debugNSplineComposee] (module testsplinecomposee.py)
points = [[0.19852789502972187, 0.018224772712410665], [20.0, 20.0], [0.1954750752690747, 0.01822084850672671], [0.19373054195984563, 0.01821840637523502], [0.1915978273590968, 0.01821513466672761], [0.18903003603719643, 0.01821077413680304], [0.18629008698956429, 0.018205125157086402], [0.1832546109704876, 0.018195959023862195], [0.17983532042667744, 0.01817435118031983], [0.17677438481027352, 0.018160697864022086], [0.17308760208116963, 0.018141994617315853], [0.16872468128148116, 0.018116357891676933], [0.16290294375891395, 0.018076197655805506], [0.15671034830030328, 0.018026672338537164], [0.15020072515789762, 0.0179670422271803], [0.14321776398791744, 0.01789444888937673], [0.13595352106908037, 0.017809465251981536], [0.12829713952440525, 0.01770943486284798], [0.12068819245022255, 0.017599385167296283], [0.11315574368620947, 0.017480005520983794], [0.10522574659287938, 0.017343100075480917], [0.09728077045543115, 0.017194386148902688], [0.08922471528611854, 0.017031790658721364], [0.08193546118058603, 0.016874426247745822], [0.07353504883756631, 0.01661016320328852], [0.06599080291011171, 0.016218508531608784], [0.05857064223495826, 0.015706045690315577], [0.0514709893853053, 0.014906113137997116], [0.04469456301764588, 0.013884963490502686], [0.03828763069199356, 0.012623427806015166], [0.03229323094210887, 0.011109143837176334], [0.026750595091904597, 0.009338637248934889], [0.021694593900515993, 0.007318824359482747], [0.017155423119653318, 0.0050677934070606015], [0.01315837708755585, 0.002614648869829678], [0.009723887705446146, -1.8037469764679674e-06], [0.00686790144874147, -0.002735460951323428], [0.004602148490396682, -0.005536336415415996], [0.002934869953897662, -0.008354581774509793], [0.0018713793375967208, -0.011144776306469852], [0.0014147509558259663, -0.01386994645075102], [0.001566344427280264, -0.0165048628209754], [0.0018443750618152704, -0.017400424908377534], [0.002225414433881509, -0.01814770904091038], [0.003707994608745213, -0.019522906027578505], [0.004593338023524338, -0.019938499556531073], [0.005434747718322544, -0.020268239791448754], [0.01318287513328735, -0.023124128959113862], [0.01392280759968588, -0.02346657556819241], [0.014942324710281271, -0.023880886595290713], [0.01614463657830989, -0.024318184873875822], [0.018102553253903267, -0.02496543337015326], [0.02032204505025023, -0.025372836026144204], [0.022978561265399683, -0.02543705647942882], [0.027543695928433615, -0.02499861830332865], [0.032686256997798126, -0.02447817524561676], [0.03875518114052571, -0.023767275462748375], [0.044944804195056864, -0.02306209542965013], [0.05165734110190244, -0.022300937935608292], [0.059116335050457894, -0.02144565150653722], [0.06597094755367977, -0.020521849914790252], [0.07161414826653509, -0.01974514043250151], [0.08211066585773041, -0.01798166614399394], [0.08817586991790005, -0.016711995359617995], [0.09574696397684777, -0.01513385111620856], [0.10346361597103157, -0.013552577459784986], [0.11117325279056751, -0.011952457660396331], [0.11879132747717779, -0.010170769019853414], [0.1265644135721855, -0.008201174213848465], [0.13332053821775267, -0.006249192492630701], [0.13991231992695446, -0.004237698497663605], [0.14669945019758224, -0.0018356491678861923], [0.15326516412231606, 0.0005037132620558664], [0.15862209979238878, 0.0025919483624568342], [0.16340029510869264, 0.004546499292143683], [0.16732509355379832, 0.0062024225855119835], [0.17135131825601094, 0.007965094109073067], [0.1757019270965183, 0.009831077892481561], [0.17937764833002975, 0.01133922635015571], [0.1831442785508265, 0.012820931250755181], [0.1862576357310809, 0.013997734334638969], [0.18899851824608987, 0.014998353238091329], [0.19165473084100537, 0.015936821151017647], [0.19378659633220002, 0.016668014173589273], [0.19574674622299126, 0.017323161794550315], [0.19852789502972187, 0.018224772712410665]]
[debugNSplineComposee] (module testsplinecomposee.py)

    S.insertPoint(pt,43) diamirE.spl
    --------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = diamirE.spl
                     role = NSplineComposee
          nb pts controle = 87
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0, 0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000]
      mode echantillonage = ['courbure']
       nb pts echantillon = [50]
         largeur, hauteur = 21.2662, 22.5588
              position cg = 7.89522, 9.19714
                 longueur = 124.18
                 ruptures = [0, 86]
              composantes = [u'diamirE.spl-#0']
      nb pts ctl par comp = [87]
[debugNSplineComposee] (module testsplinecomposee.py)

    S[0] = (2,0.5) (diamirE.spl)
    ----------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = diamirE.spl
                     role = NSplineComposee
          nb pts controle = 87
                   closed = False
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0, 0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000]
      mode echantillonage = ['courbure']
       nb pts echantillon = [50]
         largeur, hauteur = 21.2661, 22.5589
              position cg = 7.9542, 9.10443
                 longueur = 122.353
                 ruptures = [0, 86]
              composantes = [u'diamirE.spl-#0']
      nb pts ctl par comp = [87]
[debugNSplineComposee] (module testsplinecomposee.py)

    S[len(S)-1] = S[0] (diamirE.spl)
    --------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = diamirE.spl
                     role = NSplineComposee
          nb pts controle = 87
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0, 0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000]
      mode echantillonage = ['courbure']
       nb pts echantillon = [50]
         largeur, hauteur = 21.2662, 22.5589
              position cg = 7.95527, 9.10579
                 longueur = 124.218
                 ruptures = [0, 86]
              composantes = [u'diamirE.spl-#0']
      nb pts ctl par comp = [87]
[debugNSplineComposee] (module testsplinecomposee.py)

    S.appendPoint((2,1.5)) (diamirE.spl)
    ------------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = diamirE.spl
                     role = NSplineComposee
          nb pts controle = 88
                   closed = False
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0, 0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000]
      mode echantillonage = ['courbure']
       nb pts echantillon = [50]
         largeur, hauteur = 21.266, 22.5589
              position cg = 7.94677, 9.09437
                 longueur = 125.28
                 ruptures = [0, 87]
              composantes = [u'diamirE.spl-#0']
      nb pts ctl par comp = [88]
[debugNSplineComposee] (module testsplinecomposee.py)

    S.insertPoint((2,-2)) (diamirE.spl)
    -----------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = diamirE.spl
                     role = NSplineComposee
          nb pts controle = 89
                   closed = False
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0, 0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000]
      mode echantillonage = ['courbure']
       nb pts echantillon = [50]
         largeur, hauteur = 21.2663, 22.6233
              position cg = 7.88327, 8.99763
                 longueur = 128.782
                 ruptures = [0, 88]
              composantes = [u'diamirE.spl-#0']
      nb pts ctl par comp = [89]
[debugNSplineComposee] (module testsplinecomposee.py)

    S.insertPoint((6,0)) (diamirE.spl)
    ----------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = diamirE.spl
                     role = NSplineComposee
          nb pts controle = 90
                   closed = False
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0, 0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000]
      mode echantillonage = ['courbure']
       nb pts echantillon = [50]
         largeur, hauteur = 21.2663, 22.621
              position cg = 9.70059, 8.9218
                 longueur = 130.898
                 ruptures = [0, 89]
              composantes = [u'diamirE.spl-#0']
      nb pts ctl par comp = [90]
[debugNSplineComposee] (module testsplinecomposee.py)

    S.removePoint(3) (diamirE.spl)
    ------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = diamirE.spl
                     role = NSplineComposee
          nb pts controle = 89
                   closed = False
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0, 0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000]
      mode echantillonage = ['courbure']
       nb pts echantillon = [50]
         largeur, hauteur = 21.2663, 22.621
              position cg = 9.70072, 8.92167
                 longueur = 130.898
                 ruptures = [0, 88]
              composantes = [u'diamirE.spl-#0']
      nb pts ctl par comp = [89]
[debugNSplineComposee] (module testsplinecomposee.py)

    S._update() (diamirE.spl)
    -------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = diamirE.spl
                     role = NSplineComposee
          nb pts controle = 89
                   closed = False
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0, 0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000]
      mode echantillonage = ['courbure']
       nb pts echantillon = [50]
         largeur, hauteur = 21.2663, 22.621
              position cg = 9.70072, 8.92167
                 longueur = 130.897
                 ruptures = [0, 88]
              composantes = [u'diamirE.spl-#0']
      nb pts ctl par comp = [89]
[debugNSplineComposee] (module testsplinecomposee.py)
======================================
Fin debugNSplineComposee : diamirE.spl
======================================


[testNSplineComposee] (module testsplinecomposee.py)
===================================
testNSplineComposee : (diamirE.spl)
===================================


[testNSplineComposee] (module testsplinecomposee.py)

    1. Constructeur vide
    --------------------

[testNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = vide
                     role = NSplineComposee
          nb pts controle = 1
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = []
    nb pts discretisation = []
      mode echantillonage = []
       nb pts echantillon = []
         largeur, hauteur = 0, 0
              position cg = 0, 0
                 longueur = 0
                 ruptures = [0]
              composantes = []
      nb pts ctl par comp = []
[testNSplineComposee] (module testsplinecomposee.py)

    methode-0 : [('cubic', 'natural'), ('cubic', 'natural')] (diamirE.spl)
    ----------------------------------------------------------------------

[testNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = diamirE.spl-1
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', 'natural'), ('cubic', 'natural')]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [100, 100]
         largeur, hauteur = 1, 0.189582
              position cg = 0.408171, 0.00935898
                 longueur = 2.0866
                 ruptures = [0, 40, 85]
              composantes = [u'diamirE.spl-1-#0', u'diamirE.spl-1-#1']
      nb pts ctl par comp = [41, 46]
[testNSplineComposee] (module testsplinecomposee.py)

    methode-1 : [('cubic', ((1, 0, 3.14), (1, 0, -3.14))), ('cubic', ((1, 0, 0), (1, 0, 0)))] (diamirE.spl)
    -------------------------------------------------------------------------------------------------------

[testNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = diamirE.spl-2
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((1, 0, 3.14), (1, 0, -3.14))), ('cubic', ((1, 0, 0), (1, 0, 0)))]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [100, 100]
         largeur, hauteur = 1, 0.189582
              position cg = 0.408467, 0.00935605
                 longueur = 2.09429
                 ruptures = [0, 40, 85]
              composantes = [u'diamirE.spl-2-#0', u'diamirE.spl-2-#1']
      nb pts ctl par comp = [41, 46]
[testNSplineComposee] (module testsplinecomposee.py)

    methode-2 : [('cubic', 'not-a-knot'), ('cubic', 'not-a-knot')] (diamirE.spl)
    ----------------------------------------------------------------------------

[testNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = diamirE.spl-3
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', 'not-a-knot'), ('cubic', 'not-a-knot')]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [100, 100]
         largeur, hauteur = 1, 0.189582
              position cg = 0.408166, 0.00935892
                 longueur = 2.08662
                 ruptures = [0, 40, 85]
              composantes = [u'diamirE.spl-3-#0', u'diamirE.spl-3-#1']
      nb pts ctl par comp = [41, 46]
[testNSplineComposee] (module testsplinecomposee.py)

    methode-3 : [['cubic', ((1, 0, 2), (1, 0, -2))], ['cubic', ((1, 1, 0), (1, 1, 0))]] (diamirE.spl)
    -------------------------------------------------------------------------------------------------

[testNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = diamirE.spl-4
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [['cubic', ((1, 0, 2), (1, 0, -2))], ['cubic', ((1, 1, 0), (1, 1, 0))]]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [100, 100]
         largeur, hauteur = 1, 0.189582
              position cg = 0.408353, 0.00935712
                 longueur = 2.09107
                 ruptures = [0, 40, 85]
              composantes = [u'diamirE.spl-4-#0', u'diamirE.spl-4-#1']
      nb pts ctl par comp = [41, 46]
[testNSplineComposee] (module testsplinecomposee.py)

    methode-4 : [('cubic', ((2, 0, 0), (1, 0, -5))), ('cubic', ((1, 0, -5), (2, 0, 0)))] (diamirE.spl)
    --------------------------------------------------------------------------------------------------

[testNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = diamirE.spl-5
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0, 0), (1, 0, -5))), ('cubic', ((1, 0, -5), (2, 0, 0)))]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [100, 100]
         largeur, hauteur = 1, 0.189582
              position cg = 0.408154, 0.00935867
                 longueur = 2.09141
                 ruptures = [0, 40, 85]
              composantes = [u'diamirE.spl-5-#0', u'diamirE.spl-5-#1']
      nb pts ctl par comp = [41, 46]
[testNSplineComposee] (module testsplinecomposee.py)

    hardScale : diamirE.spl
    -----------------------

[testNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = diamirE.spl-5
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0.0, 0.0), (1, 0.0, -1.0))), ('cubic', ((1, 0.0, -1.0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [100, 100]
         largeur, hauteur = 0.2, 0.0379164
              position cg = 0.462066, 0.00466881
                 longueur = 0.418283
                 ruptures = [0, 40, 85]
              composantes = [u'diamirE.spl-5-#0', u'diamirE.spl-5-#1']
      nb pts ctl par comp = [41, 46]
[testNSplineComposee] (module testsplinecomposee.py)

    translate((-1.5,0.05)) : diamirE.spl
    ------------------------------------

[testNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = diamirE.spl-5
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0.0, 0.0), (1, 0.0, -1.0))), ('cubic', ((1, 0.0, -1.0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [100, 100]
         largeur, hauteur = 0.2, 0.0379164
              position cg = -1.03793, 0.0546688
                 longueur = 0.418283
                 ruptures = [0, 40, 85]
              composantes = [u'diamirE.spl-5-#0', u'diamirE.spl-5-#1']
      nb pts ctl par comp = [41, 46]
[testNSplineComposee] (module testsplinecomposee.py)

    hardRotate(30) : diamirE.spl
    ----------------------------

[testNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = diamirE.spl-5
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [['cubic', [(2, 0.0, 0.0), (1, 0.49999999999999994, -0.8660254037844387)]], ['cubic', [(1, 0.49999999999999994, -0.8660254037844387), (2, 0.0, 0.0)]]]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [100, 100]
         largeur, hauteur = 0.174873, 0.102359
              position cg = -1.03671, 0.0477727
                 longueur = 0.418283
                 ruptures = [0, 40, 85]
              composantes = [u'diamirE.spl-5-#0', u'diamirE.spl-5-#1']
      nb pts ctl par comp = [41, 46]
[testNSplineComposee] (module testsplinecomposee.py)

    symetriser(1) : diamirE.spl
    ---------------------------

[testNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = diamirE.spl-5
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0.0, -0.0), (1, 0.49999999999999994, 0.8660254037844387))), ('cubic', ((1, 0.49999999999999994, 0.8660254037844387), (2, 0.0, -0.0)))]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [100, 100]
         largeur, hauteur = 0.174873, 0.102359
              position cg = -1.03671, 0.05922
                 longueur = 0.418283
                 ruptures = [0, 40, 85]
              composantes = [u'diamirE.spl-5-#0', u'diamirE.spl-5-#1']
      nb pts ctl par comp = [41, 46]
[testNSplineComposee] (module testsplinecomposee.py)

    symetriser(1) : diamirE.spl
    ---------------------------

[testNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = diamirE.spl
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [['cubic', ((2, 0, 0), (1, 0, -20))], ['cubic', ((1, 0, -20), (2, 0, 0))]]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [20, 10]
         largeur, hauteur = 1, 0.189582
              position cg = 0.408106, 0.00936192
                 longueur = 2.19435
                 ruptures = [0, 40, 85]
              composantes = [u'diamirE.spl-#0', u'diamirE.spl-#1']
      nb pts ctl par comp = [41, 46]
[testNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = diamirE.spl
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0.0, 0.0), (1, 0.0, -4.0))), ('cubic', ((1, 0.0, -4.0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [20, 10]
         largeur, hauteur = 0.2, 0.0379164
              position cg = 0.0816213, 0.00187238
                 longueur = 0.43887
                 ruptures = [0, 40, 85]
              composantes = [u'diamirE.spl-#0', u'diamirE.spl-#1']
      nb pts ctl par comp = [41, 46]
[testNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = diamirE.spl
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [['cubic', [(2, 0.0, 0.0), (1, 0.6945927106677213, -3.939231012048832)]], ['cubic', [(1, 0.6945927106677213, -3.939231012048832), (2, 0.0, 0.0)]]]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [20, 10]
         largeur, hauteur = 0.198495, 0.0436813
              position cg = 0.0816225, -0.000487539
                 longueur = 0.43887
                 ruptures = [0, 40, 85]
              composantes = [u'diamirE.spl-#0', u'diamirE.spl-#1']
      nb pts ctl par comp = [41, 46]
[testNSplineComposee] (module testsplinecomposee.py)
join_1 = <NSplineComposee>
                     name = diamirE.spl
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [['cubic', [(2, 0.0, 0.0), (1, 0.6945927106677213, -3.939231012048832)]], ['cubic', [(1, 0.6945927106677213, -3.939231012048832), (2, 0.0, 0.0)]]]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [20, 10]
         largeur, hauteur = 0.198495, 0.0436813
              position cg = 0.0816225, -0.000487539
                 longueur = 0.43887
                 ruptures = [0, 40, 85]
              composantes = [u'diamirE.spl-#0', u'diamirE.spl-#1']
      nb pts ctl par comp = [41, 46] ; R = [[ 0.1985279   0.01822477]
 [ 0.00156634 -0.01650486]
 [ 0.1985279   0.01822477]]
[testNSplineComposee] (module testsplinecomposee.py)
S = <NSplineComposee>
                     name = diamirE.spl
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [['cubic', [(2, 0.0, 0.0), (1, 0.6945927106677213, -3.939231012048832)]], ['cubic', [(1, 0.6945927106677213, -3.939231012048832), (2, 0.0, 0.0)]]]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [20, 10]
         largeur, hauteur = 0.198495, 0.0436813
              position cg = 0.0816225, -0.000487539
                 longueur = 0.43887
                 ruptures = [0, 40, 85]
              composantes = [u'diamirE.spl-#0', u'diamirE.spl-#1']
      nb pts ctl par comp = [41, 46] ; R = [[ 0.1985279   0.01822477]
 [ 0.00156634 -0.01650486]
 [ 0.1985279   0.01822477]]
[testNSplineComposee] (module testsplinecomposee.py)
join_1 = <NSplineComposee>
                     name = diamirE.spl
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [['cubic', [(1, 0.6945927106677213, -3.939231012048832), (2, 0.0, 0.0)]]]
    nb pts discretisation = [1000]
      mode echantillonage = ['courbure']
       nb pts echantillon = [10]
         largeur, hauteur = 0.19758, 0.0442444
              position cg = 0.0814421, -0.000513848
                 longueur = 0.425402
                 ruptures = [0, 85]
              composantes = [u'diamirE.spl-#0']
      nb pts ctl par comp = [86] ; R = [[0.1985279  0.01822477]
 [0.1985279  0.01822477]]
[testNSplineComposee] (module testsplinecomposee.py)
split_nba = <NSplineComposee>
                     name = diamirE.spl
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((1, 0.6945927106677213, -3.939231012048832), (2, 0, 0))), ('cubic', ((2, 0, 0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [10, 10]
         largeur, hauteur = 0.198315, 0.0447893
              position cg = 0.0812485, -0.000535228
                 longueur = 0.435441
                 ruptures = [0, 40, 85]
              composantes = [u'diamirE.spl-#0', u'diamirE.spl-#1']
      nb pts ctl par comp = [41, 46] ; R = [[ 0.1985279   0.01822477]
 [ 0.00156634 -0.01650486]
 [ 0.1985279   0.01822477]]
[testNSplineComposee] (module testsplinecomposee.py)
normal ; On tente la suppression d'un point anguleux (40)
[testNSplineComposee] (module testsplinecomposee.py)
points = [[0.19852789502972187, 0.018224772712410665], [20.0, 20.0], [0.1954750752690747, 0.01822084850672671], [0.19373054195984563, 0.01821840637523502], [0.1915978273590968, 0.01821513466672761], [0.18903003603719643, 0.01821077413680304], [0.18629008698956429, 0.018205125157086402], [0.1832546109704876, 0.018195959023862195], [0.17983532042667744, 0.01817435118031983], [0.17677438481027352, 0.018160697864022086], [0.17308760208116963, 0.018141994617315853], [0.16872468128148116, 0.018116357891676933], [0.16290294375891395, 0.018076197655805506], [0.15671034830030328, 0.018026672338537164], [0.15020072515789762, 0.0179670422271803], [0.14321776398791744, 0.01789444888937673], [0.13595352106908037, 0.017809465251981536], [0.12829713952440525, 0.01770943486284798], [0.12068819245022255, 0.017599385167296283], [0.11315574368620947, 0.017480005520983794], [0.10522574659287938, 0.017343100075480917], [0.09728077045543115, 0.017194386148902688], [0.08922471528611854, 0.017031790658721364], [0.08193546118058603, 0.016874426247745822], [0.07353504883756631, 0.01661016320328852], [0.06599080291011171, 0.016218508531608784], [0.05857064223495826, 0.015706045690315577], [0.0514709893853053, 0.014906113137997116], [0.04469456301764588, 0.013884963490502686], [0.03828763069199356, 0.012623427806015166], [0.03229323094210887, 0.011109143837176334], [0.026750595091904597, 0.009338637248934889], [0.021694593900515993, 0.007318824359482747], [0.017155423119653318, 0.0050677934070606015], [0.01315837708755585, 0.002614648869829678], [0.009723887705446146, -1.8037469764679674e-06], [0.00686790144874147, -0.002735460951323428], [0.004602148490396682, -0.005536336415415996], [0.002934869953897662, -0.008354581774509793], [0.0018713793375967208, -0.011144776306469852], [0.0014147509558259663, -0.01386994645075102], [0.0018443750618152704, -0.017400424908377534], [0.002225414433881509, -0.01814770904091038], [0.002851896005745244, -0.018964348242058077], [0.003707994608745213, -0.019522906027578505], [0.004593338023524338, -0.019938499556531073], [0.005434747718322544, -0.020268239791448754], [0.01318287513328735, -0.023124128959113862], [0.01392280759968588, -0.02346657556819241], [0.014942324710281271, -0.023880886595290713], [0.01614463657830989, -0.024318184873875822], [0.018102553253903267, -0.02496543337015326], [0.02032204505025023, -0.025372836026144204], [0.022978561265399683, -0.02543705647942882], [0.027543695928433615, -0.02499861830332865], [0.032686256997798126, -0.02447817524561676], [0.03875518114052571, -0.023767275462748375], [0.044944804195056864, -0.02306209542965013], [0.05165734110190244, -0.022300937935608292], [0.059116335050457894, -0.02144565150653722], [0.06597094755367977, -0.020521849914790252], [0.07161414826653509, -0.01974514043250151], [0.08211066585773041, -0.01798166614399394], [0.08817586991790005, -0.016711995359617995], [0.09574696397684777, -0.01513385111620856], [0.10346361597103157, -0.013552577459784986], [0.11117325279056751, -0.011952457660396331], [0.11879132747717779, -0.010170769019853414], [0.1265644135721855, -0.008201174213848465], [0.13332053821775267, -0.006249192492630701], [0.13991231992695446, -0.004237698497663605], [0.14669945019758224, -0.0018356491678861923], [0.15326516412231606, 0.0005037132620558664], [0.15862209979238878, 0.0025919483624568342], [0.16340029510869264, 0.004546499292143683], [0.16732509355379832, 0.0062024225855119835], [0.17135131825601094, 0.007965094109073067], [0.1757019270965183, 0.009831077892481561], [0.17937764833002975, 0.01133922635015571], [0.1831442785508265, 0.012820931250755181], [0.1862576357310809, 0.013997734334638969], [0.18899851824608987, 0.014998353238091329], [0.19165473084100537, 0.015936821151017647], [0.19378659633220002, 0.016668014173589273], [0.19574674622299126, 0.017323161794550315], [0.19852789502972187, 0.018224772712410665]]
<NSplineComposee>
                     name = diamirE.spl
                     role = NSplineComposee
          nb pts controle = 90
                   closed = False
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0, 0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000]
      mode echantillonage = ['courbure']
       nb pts echantillon = [10]
         largeur, hauteur = 21.8351, 22.435
              position cg = 9.72756, 8.79836
                 longueur = 131.033
                 ruptures = [0, 89]
              composantes = [u'diamirE.spl-#0']
      nb pts ctl par comp = [90]
[testNSplineComposee] (module testsplinecomposee.py)
=======================================
Fin testNSplineComposee : (diamirE.spl)
=======================================


[debugNSplineComposee] (module testsplinecomposee.py)
======================================
debugNSplineComposee : (E-diamirE.spl)
======================================


[debugNSplineComposee] (module testsplinecomposee.py)

    Constructeur vide
    -----------------

<NSplineComposee>
                     name = NSplineComposee
                     role = NSplineComposee
          nb pts controle = 1
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = []
    nb pts discretisation = []
      mode echantillonage = []
       nb pts echantillon = []
         largeur, hauteur = 0, 0
              position cg = 0, 0
                 longueur = 0
                 ruptures = [0]
              composantes = []
      nb pts ctl par comp = []
[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = E-diamirE.spl
                     role = NSplineComposee
          nb pts controle = 24
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0, 0), (1, 0, -5))), ('cubic', ((1, 0, -5), (2, 0, 0)))]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [50, 40]
         largeur, hauteur = 1, 0.189683
              position cg = 0.408689, 0.00940024
                 longueur = 2.10834
                 ruptures = [0, 9, 23]
              composantes = [u'E-diamirE.spl-#0', u'E-diamirE.spl-#1']
      nb pts ctl par comp = [10, 15]
[debugNSplineComposee] (module testsplinecomposee.py)

    elaguer(eps=1, replace=True) : (E-diamirE.spl)
    ----------------------------------------------

[elaguer] (module splinesimple.py)
historique_distances = [402.17, 174.8, 92.46, 36.27, 29.69, 4.78, 3.1, 5.01, 4.32, 2.9, 1.98, 0.44]
[elaguer] (module splinesimple.py)
Apres ELAGAGE : dist = 0.44 mm/m ; 15 points => 14 points 
[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = E-diamirE.spl
                     role = NSplineComposee
          nb pts controle = 23
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0, 0), (1, 0, -5))), ('cubic', ((1, 0, -5), (2, 0, 0)))]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [50, 40]
         largeur, hauteur = 1, 0.189683
              position cg = 0.408683, 0.00939906
                 longueur = 2.10834
                 ruptures = [0, 9, 22]
              composantes = [u'E-diamirE.spl-#0', u'E-diamirE.spl-#1']
      nb pts ctl par comp = [10, 14]
[debugNSplineComposee] (module testsplinecomposee.py)

    echantillonner() (E-diamirE.spl)
    --------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
echantillon = [[1.0, 0.0], [0.8436345942978757, 0.026904971666607172], [0.7105757440522906, 0.049039094672613893], [0.5297980853307772, 0.07853410548656783], [0.46141195364344934, 0.08917864714816577], [0.40732872935505243, 0.0970420953976061], [0.3679446519141847, 0.10223591690118716], [0.3353754103460035, 0.10595775005139424], [0.30644685161688384, 0.1086783254900849], [0.279932230765866, 0.11058112671175732], [0.25516641086926456, 0.11176433423268572], [0.23198722623822304, 0.11228308980401476], [0.21250197440379953, 0.11216389412652521], [0.19562584370643707, 0.11148424616326827], [0.18034589051064104, 0.11028159369981906], [0.16619318514024786, 0.10857154031764968], [0.15279277804015337, 0.10634126202127354], [0.13861454510601726, 0.10331372006055506], [0.12251068800997819, 0.09918420944875271], [0.10290527120635394, 0.09342585637839008], [0.06895413594858082, 0.0825456526415408], [0.05922837626502223, 0.07910136008444119], [0.052447893812032506, 0.07616901681091541], [0.04668578373752849, 0.07309279130021609], [0.04144830872342052, 0.06964224054521369], [0.036462435882803235, 0.06559319805667281], [0.031566674164562235, 0.06068308399402364], [0.026603150042455764, 0.05449212320613064], [0.02085268491043901, 0.04541718279803416], [0.013002472533413294, 0.03178012500988119], [0.010460073516465336, 0.028220289646299076], [0.009036332002606189, 0.026746263711346106], [0.008108659072275702, 0.0260832713185496], [0.007436353228932622, 0.02579119427656404], [0.00689221547815662, 0.02569434164030962], [0.006411353008243909, 0.02572988607566877], [0.005945214879433078, 0.02588924390384982], [0.005386909469173458, 0.026252602787472004], [0.004614237983871362, 0.027014180657937925], [0.0032290357027772547, 0.02873144672831373], [0.0027015108510509843, 0.02928033674829459], [0.0024104059729992667, 0.029483936139005226], [0.002217143430124164, 0.029557973261883363], [0.002064563010187083, 0.029571390480208713], [0.0019250850558844433, 0.029541114626112898], [0.001777155922617885, 0.02945562494512041], [0.0015950753016396152, 0.029258189813947705], [0.0013324887317137724, 0.028739826747483065], [0.0008636241801223934, 0.026722917530905412], [-2.168404344971009e-19, 0.0], [0.000973763941679504, -0.017017682657057467], [0.001412988845414952, -0.017810190532996963], [0.0016976508433854305, -0.017969159177724695], [0.0020070163447277506, -0.017949065049389503], [0.0025554508304865492, -0.01760748948958729], [0.004809400742038883, -0.015029415934348634], [0.006772794499308495, -0.013399816483702011], [0.008865432008519298, -0.012570156279754201], [0.011409012714204641, -0.012362282555144807], [0.014850116228005793, -0.013003352980071296], [0.019928176601671586, -0.015212412232629416], [0.027701239189131335, -0.020406553916665477], [0.039089993204057254, -0.03021228675571757], [0.05203653202933602, -0.04234036825021162], [0.058737823707210535, -0.047671914355379465], [0.06608160519268977, -0.0523260043332385], [0.07431574948662573, -0.05639322210321423], [0.08264407132011717, -0.05943062544933809], [0.09156558722468203, -0.06157451831411323], [0.10407201462851369, -0.06337458860943433], [0.13058532748381, -0.0654820207477704], [0.21477674479750694, -0.0703645552994784], [0.29784886550441614, -0.07516058196221648], [0.3396273096701996, -0.07688375084067528], [0.3728888136776414, -0.07737219677952474], [0.4100993679517472, -0.07681393221996316], [0.4871923449453551, -0.07434495595934887], [0.5556606882129222, -0.07203420230179923], [0.593385085161854, -0.06987906067388198], [0.6294508629006695, -0.06684363535483419], [0.6662207871983173, -0.06277369859148192], [0.7037181397724112, -0.057644423316956725], [0.7419827501679631, -0.05142677017245301], [0.7810193941095631, -0.04409586525118003], [0.8208481708414496, -0.03562419565380545], [0.8817097240585663, -0.021417994112150236], [0.9161731125027072, -0.01392607809696957], [0.947112184617942, -0.008230222942997143], [0.9999999999999999, -2.168404344971009e-19]]
[debugNSplineComposee] (module testsplinecomposee.py)

    hardScale((0.2, 0.2)) : (E-diamirE.spl)
    ---------------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = E-diamirE.spl
                     role = NSplineComposee
          nb pts controle = 23
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0.0, 0.0), (1, 0.0, -1.0))), ('cubic', ((1, 0.0, -1.0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [50, 40]
         largeur, hauteur = 0.2, 0.0379365
              position cg = 0.3663, 0.000102645
                 longueur = 0.421668
                 ruptures = [0, 9, 22]
              composantes = [u'E-diamirE.spl-#0', u'E-diamirE.spl-#1']
      nb pts ctl par comp = [10, 14]
[debugNSplineComposee] (module testsplinecomposee.py)

    translate((-1.5,0.05)) : (E-diamirE.spl)
    ----------------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = E-diamirE.spl
                     role = NSplineComposee
          nb pts controle = 23
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0.0, 0.0), (1, 0.0, -1.0))), ('cubic', ((1, 0.0, -1.0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [50, 40]
         largeur, hauteur = 0.2, 0.0379365
              position cg = -1.1337, 0.0501026
                 longueur = 0.421668
                 ruptures = [0, 9, 22]
              composantes = [u'E-diamirE.spl-#0', u'E-diamirE.spl-#1']
      nb pts ctl par comp = [10, 14]
[debugNSplineComposee] (module testsplinecomposee.py)

    hardRotate(30) (E-diamirE.spl)
    ------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = E-diamirE.spl
                     role = NSplineComposee
          nb pts controle = 23
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0.0, 0.0), (1, 0.0, -1.0))), ('cubic', ((1, 0.0, -1.0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [50, 40]
         largeur, hauteur = 0.2, 0.0379365
              position cg = -1.1337, 0.0501026
                 longueur = 0.421668
                 ruptures = [0, 9, 22]
              composantes = [u'E-diamirE.spl-#0', u'E-diamirE.spl-#1']
      nb pts ctl par comp = [10, 14]
[debugNSplineComposee] (module testsplinecomposee.py)

    symetriser(1) (E-diamirE.spl)
    -----------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = E-diamirE.spl
                     role = NSplineComposee
          nb pts controle = 23
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [['cubic', [(2, 0.0, 0.0), (1, 0.49999999999999994, -0.8660254037844387)]], ['cubic', [(1, 0.49999999999999994, -0.8660254037844387), (2, 0.0, 0.0)]]]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [50, 40]
         largeur, hauteur = 0.175855, 0.102947
              position cg = -1.13628, 0.0550891
                 longueur = 0.421668
                 ruptures = [0, 9, 22]
              composantes = [u'E-diamirE.spl-#0', u'E-diamirE.spl-#1']
      nb pts ctl par comp = [10, 14]
[debugNSplineComposee] (module testsplinecomposee.py)

    reconstruction (E-diamirE.spl)
    ------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = E-diamirE.spl
                     role = NSplineComposee
          nb pts controle = 24
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [['cubic', ((2, 0, 0), (1, 0, -20))], ['cubic', ((1, 0, -20), (2, 0, 0))]]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [50, 50]
         largeur, hauteur = 1, 0.190836
              position cg = 0.409016, 0.00941382
                 longueur = 2.40071
                 ruptures = [0, 9, 23]
              composantes = [u'E-diamirE.spl-#0', u'E-diamirE.spl-#1']
      nb pts ctl par comp = [10, 15]
[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = E-diamirE.spl
                     role = NSplineComposee
          nb pts controle = 24
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [['cubic', ((2, 0, 0), (1, 0, -20))], ['cubic', ((1, 0, -20), (2, 0, 0))]]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [50, 50]
         largeur, hauteur = 1, 0.190836
              position cg = 0.409016, 0.00941382
                 longueur = 2.40071
                 ruptures = [0, 9, 23]
              composantes = [u'E-diamirE.spl-#0', u'E-diamirE.spl-#1']
      nb pts ctl par comp = [10, 15]
[debugNSplineComposee] (module testsplinecomposee.py)

    hardScale((0.2,0.2), centre=np.asarray((0,0))) (E-diamirE.spl)
    --------------------------------------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = E-diamirE.spl
                     role = NSplineComposee
          nb pts controle = 24
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0.0, 0.0), (1, 0.0, -4.0))), ('cubic', ((1, 0.0, -4.0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [50, 50]
         largeur, hauteur = 0.2, 0.0381671
              position cg = 0.0818032, 0.00188276
                 longueur = 0.480141
                 ruptures = [0, 9, 23]
              composantes = [u'E-diamirE.spl-#0', u'E-diamirE.spl-#1']
      nb pts ctl par comp = [10, 15]
[debugNSplineComposee] (module testsplinecomposee.py)

    S.hardRotate(10) (E-diamirE.spl)
    --------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = E-diamirE.spl
                     role = NSplineComposee
          nb pts controle = 24
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [['cubic', [(2, 0.0, 0.0), (1, 0.6945927106677213, -3.939231012048832)]], ['cubic', [(1, 0.6945927106677213, -3.939231012048832), (2, 0.0, 0.0)]]]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [50, 50]
         largeur, hauteur = 0.199977, 0.0458537
              position cg = 0.0811278, 0.00410916
                 longueur = 0.480141
                 ruptures = [0, 9, 23]
              composantes = [u'E-diamirE.spl-#0', u'E-diamirE.spl-#1']
      nb pts ctl par comp = [10, 15]
[debugNSplineComposee] (module testsplinecomposee.py)

    S.toDump() (E-diamirE.spl)
    --------------------------

{'classename': 'NSplineComposee',
 'cpoints': [[0.1978558859741592, 0.022779663794580067],
             [0.16768035148586796, 0.02265901746762354],
             [0.12001618339465994, 0.02215427624946569],
             [0.08126345212502341, 0.02142931732991523],
             [0.044022553962083225, 0.018439854572672085],
             [0.027914853343308073, 0.014532600130220421],
             [0.012486368031993204, 0.0071695399519990785],
             [0.003930139434834043, -0.0009814453332465957],
             [0.0011819422674424762, -0.0066484768524486286],
             [0.0008943353717176111, -0.011949971738806003],
             [0.0024531891878931678, -0.014611944031165978],
             [0.008413370272604671, -0.015773188770980332],
             [0.013973124215376782, -0.019229069589920832],
             [0.01606990172131003, -0.019949639247718927],
             [0.019271516825038366, -0.020789474054295102],
             [0.022306552209837037, -0.020882165397259414],
             [0.027006046070353243, -0.020511802797077275],
             [0.04872874457683953, -0.017984028831911636],
             [0.07635703761545778, -0.014356234153219566],
             [0.09507495492128512, -0.010578960034039159],
             [0.11811931842161513, -0.005615877937684011],
             [0.1644496714553586, 0.0098104631794228],
             [0.18247226949526388, 0.017375822332924586],
             [0.1978558859741592, 0.022779663794580067]],
 'methode': [['cubic',
              [(2, 0.0, 0.0), (1, 0.6945927106677213, -3.939231012048832)]],
             ['cubic',
              [(1, 0.6945927106677213, -3.939231012048832), (2, 0.0, 0.0)]]],
 'mode': ['courbure', 'courbure'],
 'name': u'E-diamirE.spl',
 'nbpd': [1000, 1000],
 'nbpe': [50, 50],
 'role': 'NSplineComposee',
 'ruptures': [0, 9, 23]}
[debugNSplineComposee] (module testsplinecomposee.py)

    NSplineComposee(**dump0) (E-diamirE.spl)
    ----------------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
join_1 = <NSplineComposee>
                     name = E-diamirE.spl
                     role = NSplineComposee
          nb pts controle = 24
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [['cubic', [(2, 0.0, 0.0), (1, 0.6945927106677213, -3.939231012048832)]], ['cubic', [(1, 0.6945927106677213, -3.939231012048832), (2, 0.0, 0.0)]]]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [50, 50]
         largeur, hauteur = 0.199977, 0.0458537
              position cg = 0.0811278, 0.00410916
                 longueur = 0.480141
                 ruptures = [0, 9, 23]
              composantes = [u'E-diamirE.spl-#0', u'E-diamirE.spl-#1']
      nb pts ctl par comp = [10, 15]
[debugNSplineComposee] (module testsplinecomposee.py)
Rupture = [[0.1978558859741592, 0.022779663794580067], [0.0008943353717176111, -0.011949971738806003], [0.1978558859741592, 0.022779663794580067]]
[debugNSplineComposee] (module testsplinecomposee.py)

    dump1 = S.toDump() (E-diamirE.spl)
    ----------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
dump_equal_dump1 = True
[debugNSplineComposee] (module testsplinecomposee.py)

    S.load(dump1) (E-diamirE.spl)
    -----------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = E-diamirE.spl
                     role = NSplineComposee
          nb pts controle = 24
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [['cubic', [(2, 0.0, 0.0), (1, 0.6945927106677213, -3.939231012048832)]], ['cubic', [(1, 0.6945927106677213, -3.939231012048832), (2, 0.0, 0.0)]]]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [50, 50]
         largeur, hauteur = 0.199977, 0.0458537
              position cg = 0.0811278, 0.00410916
                 longueur = 0.480141
                 ruptures = [0, 9, 23]
              composantes = [u'E-diamirE.spl-#0', u'E-diamirE.spl-#1']
      nb pts ctl par comp = [10, 15]
[debugNSplineComposee] (module testsplinecomposee.py)
R = [[ 0.19785589  0.02277966]
 [ 0.00089434 -0.01194997]
 [ 0.19785589  0.02277966]]
[debugNSplineComposee] (module testsplinecomposee.py)
dump1_equal_dump2 = False
[debugNSplineComposee] (module testsplinecomposee.py)

    S.join(1) (E-diamirE.spl)
    -------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = E-diamirE.spl
                     role = NSplineComposee
          nb pts controle = 24
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [['cubic', [(1, 0.6945927106677213, -3.939231012048832), (2, 0.0, 0.0)]]]
    nb pts discretisation = [1000]
      mode echantillonage = ['courbure']
       nb pts echantillon = [50]
         largeur, hauteur = 0.202311, 0.0738354
              position cg = 0.067927, 0.00824927
                 longueur = 0.523307
                 ruptures = [0, 23]
              composantes = [u'E-diamirE.spl-#0']
      nb pts ctl par comp = [24]
[debugNSplineComposee] (module testsplinecomposee.py)
Ruptures = [[0.19785589 0.02277966]
 [0.19785589 0.02277966]]
[debugNSplineComposee] (module testsplinecomposee.py)

    S.split(len(S)/2) (E-diamirE.spl)
    ---------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = E-diamirE.spl
                     role = NSplineComposee
          nb pts controle = 24
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((1, 0.6945927106677213, -3.939231012048832), (2, 0, 0))), ('cubic', ((2, 0, 0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [50, 50]
         largeur, hauteur = 0.208801, 0.136037
              position cg = 0.053832, 0.0212145
                 longueur = 0.643853
                 ruptures = [0, 12, 23]
              composantes = [u'E-diamirE.spl-#0', u'E-diamirE.spl-#1']
      nb pts ctl par comp = [13, 12]
[debugNSplineComposee] (module testsplinecomposee.py)
ruptures = [[ 0.19785589  0.02277966]
 [ 0.01397312 -0.01922907]
 [ 0.19785589  0.02277966]]
[debugNSplineComposee] (module testsplinecomposee.py)

    removePoint(rupture[1]) (E-diamirE.spl)
    ---------------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
normal ; On tente la suppression d'un point anguleux (12)
[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = E-diamirE.spl
                     role = NSplineComposee
          nb pts controle = 23
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0, 0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000]
      mode echantillonage = ['courbure']
       nb pts echantillon = [50]
         largeur, hauteur = 0.197212, 0.0436798
              position cg = 0.0810741, 0.00410339
                 longueur = 0.417604
                 ruptures = [0, 22]
              composantes = [u'E-diamirE.spl-#0']
      nb pts ctl par comp = [23]
[debugNSplineComposee] (module testsplinecomposee.py)

    S.insertPoint((20, 20)) E-diamirE.spl
    -------------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = E-diamirE.spl
                     role = NSplineComposee
          nb pts controle = 24
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0, 0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000]
      mode echantillonage = ['courbure']
       nb pts echantillon = [50]
         largeur, hauteur = 19.9913, 20.4532
              position cg = 10.944, 9.48989
                 longueur = 58.757
                 ruptures = [0, 23]
              composantes = [u'E-diamirE.spl-#0']
      nb pts ctl par comp = [24]
[debugNSplineComposee] (module testsplinecomposee.py)
points = [[0.1978558859741592, 0.022779663794580067], [20.0, 20.0], [0.16768035148586796, 0.02265901746762354], [0.12001618339465994, 0.02215427624946569], [0.08126345212502341, 0.02142931732991523], [0.044022553962083225, 0.018439854572672085], [0.027914853343308073, 0.014532600130220421], [0.012486368031993204, 0.0071695399519990785], [0.003930139434834043, -0.0009814453332465957], [0.0011819422674424762, -0.0066484768524486286], [0.0008943353717176111, -0.011949971738806003], [0.0024531891878931678, -0.014611944031165978], [0.008413370272604671, -0.015773188770980332], [0.01606990172131003, -0.019949639247718927], [0.019271516825038366, -0.020789474054295102], [0.022306552209837037, -0.020882165397259414], [0.027006046070353243, -0.020511802797077275], [0.04872874457683953, -0.017984028831911636], [0.07635703761545778, -0.014356234153219566], [0.09507495492128512, -0.010578960034039159], [0.11811931842161513, -0.005615877937684011], [0.1644496714553586, 0.0098104631794228], [0.18247226949526388, 0.017375822332924586], [0.1978558859741592, 0.022779663794580067]]
[debugNSplineComposee] (module testsplinecomposee.py)

    S.insertPoint(pt,12) E-diamirE.spl
    ----------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = E-diamirE.spl
                     role = NSplineComposee
          nb pts controle = 25
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0, 0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000]
      mode echantillonage = ['courbure']
       nb pts echantillon = [50]
         largeur, hauteur = 22.0117, 21.9847
              position cg = 8.21958, 8.91197
                 longueur = 124.356
                 ruptures = [0, 24]
              composantes = [u'E-diamirE.spl-#0']
      nb pts ctl par comp = [25]
[debugNSplineComposee] (module testsplinecomposee.py)

    S[0] = (2,0.5) (E-diamirE.spl)
    ------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = E-diamirE.spl
                     role = NSplineComposee
          nb pts controle = 25
                   closed = False
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0, 0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000]
      mode echantillonage = ['courbure']
       nb pts echantillon = [50]
         largeur, hauteur = 22.0118, 21.936
              position cg = 8.23941, 8.85507
                 longueur = 122.535
                 ruptures = [0, 24]
              composantes = [u'E-diamirE.spl-#0']
      nb pts ctl par comp = [25]
[debugNSplineComposee] (module testsplinecomposee.py)

    S[len(S)-1] = S[0] (E-diamirE.spl)
    ----------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = E-diamirE.spl
                     role = NSplineComposee
          nb pts controle = 25
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0, 0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000]
      mode echantillonage = ['courbure']
       nb pts echantillon = [50]
         largeur, hauteur = 22.0116, 21.9364
              position cg = 8.24193, 8.85808
                 longueur = 124.403
                 ruptures = [0, 24]
              composantes = [u'E-diamirE.spl-#0']
      nb pts ctl par comp = [25]
[debugNSplineComposee] (module testsplinecomposee.py)

    S.appendPoint((2,1.5)) (E-diamirE.spl)
    --------------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = E-diamirE.spl
                     role = NSplineComposee
          nb pts controle = 26
                   closed = False
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0, 0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000]
      mode echantillonage = ['courbure']
       nb pts echantillon = [50]
         largeur, hauteur = 22.0118, 21.9361
              position cg = 8.23317, 8.84718
                 longueur = 125.459
                 ruptures = [0, 25]
              composantes = [u'E-diamirE.spl-#0']
      nb pts ctl par comp = [26]
[debugNSplineComposee] (module testsplinecomposee.py)

    S.insertPoint((2,-2)) (E-diamirE.spl)
    -------------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = E-diamirE.spl
                     role = NSplineComposee
          nb pts controle = 27
                   closed = False
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0, 0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000]
      mode echantillonage = ['courbure']
       nb pts echantillon = [50]
         largeur, hauteur = 22.0116, 22.3921
              position cg = 8.1695, 8.75687
                 longueur = 128.978
                 ruptures = [0, 26]
              composantes = [u'E-diamirE.spl-#0']
      nb pts ctl par comp = [27]
[debugNSplineComposee] (module testsplinecomposee.py)

    S.insertPoint((6,0)) (E-diamirE.spl)
    ------------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = E-diamirE.spl
                     role = NSplineComposee
          nb pts controle = 28
                   closed = False
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0, 0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000]
      mode echantillonage = ['courbure']
       nb pts echantillon = [50]
         largeur, hauteur = 22.0118, 22.3907
              position cg = 9.80271, 8.78503
                 longueur = 131.121
                 ruptures = [0, 27]
              composantes = [u'E-diamirE.spl-#0']
      nb pts ctl par comp = [28]
[debugNSplineComposee] (module testsplinecomposee.py)

    S.removePoint(3) (E-diamirE.spl)
    --------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = E-diamirE.spl
                     role = NSplineComposee
          nb pts controle = 27
                   closed = False
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0, 0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000]
      mode echantillonage = ['courbure']
       nb pts echantillon = [50]
         largeur, hauteur = 22.0118, 22.3907
              position cg = 9.80626, 8.78241
                 longueur = 131.121
                 ruptures = [0, 26]
              composantes = [u'E-diamirE.spl-#0']
      nb pts ctl par comp = [27]
[debugNSplineComposee] (module testsplinecomposee.py)

    S._update() (E-diamirE.spl)
    ---------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = E-diamirE.spl
                     role = NSplineComposee
          nb pts controle = 27
                   closed = False
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0, 0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000]
      mode echantillonage = ['courbure']
       nb pts echantillon = [50]
         largeur, hauteur = 22.0118, 22.3906
              position cg = 9.80626, 8.78241
                 longueur = 131.103
                 ruptures = [0, 26]
              composantes = [u'E-diamirE.spl-#0']
      nb pts ctl par comp = [27]
[debugNSplineComposee] (module testsplinecomposee.py)
========================================
Fin debugNSplineComposee : E-diamirE.spl
========================================


[testNSplineComposee] (module testsplinecomposee.py)
=====================================
testNSplineComposee : (E-diamirE.spl)
=====================================


[testNSplineComposee] (module testsplinecomposee.py)

    1. Constructeur vide
    --------------------

[testNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = vide
                     role = NSplineComposee
          nb pts controle = 1
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = []
    nb pts discretisation = []
      mode echantillonage = []
       nb pts echantillon = []
         largeur, hauteur = 0, 0
              position cg = 0, 0
                 longueur = 0
                 ruptures = [0]
              composantes = []
      nb pts ctl par comp = []
[testNSplineComposee] (module testsplinecomposee.py)

    methode-0 : [('cubic', 'natural'), ('cubic', 'natural')] (E-diamirE.spl)
    ------------------------------------------------------------------------

[testNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = E-diamirE.spl-1
                     role = NSplineComposee
          nb pts controle = 24
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', 'natural'), ('cubic', 'natural')]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [100, 100]
         largeur, hauteur = 1, 0.189579
              position cg = 0.408651, 0.00940966
                 longueur = 2.08779
                 ruptures = [0, 9, 23]
              composantes = [u'E-diamirE.spl-1-#0', u'E-diamirE.spl-1-#1']
      nb pts ctl par comp = [10, 15]
[testNSplineComposee] (module testsplinecomposee.py)

    methode-1 : [('cubic', ((1, 0, 3.14), (1, 0, -3.14))), ('cubic', ((1, 0, 0), (1, 0, 0)))] (E-diamirE.spl)
    ---------------------------------------------------------------------------------------------------------

[testNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = E-diamirE.spl-2
                     role = NSplineComposee
          nb pts controle = 24
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((1, 0, 3.14), (1, 0, -3.14))), ('cubic', ((1, 0, 0), (1, 0, 0)))]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [100, 100]
         largeur, hauteur = 1, 0.189698
              position cg = 0.425832, 0.0107136
                 longueur = 2.18399
                 ruptures = [0, 9, 23]
              composantes = [u'E-diamirE.spl-2-#0', u'E-diamirE.spl-2-#1']
      nb pts ctl par comp = [10, 15]
[testNSplineComposee] (module testsplinecomposee.py)

    methode-2 : [('cubic', 'not-a-knot'), ('cubic', 'not-a-knot')] (E-diamirE.spl)
    ------------------------------------------------------------------------------

[testNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = E-diamirE.spl-3
                     role = NSplineComposee
          nb pts controle = 24
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', 'not-a-knot'), ('cubic', 'not-a-knot')]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [100, 100]
         largeur, hauteur = 1.00004, 0.189579
              position cg = 0.40848, 0.00942221
                 longueur = 2.08813
                 ruptures = [0, 9, 23]
              composantes = [u'E-diamirE.spl-3-#0', u'E-diamirE.spl-3-#1']
      nb pts ctl par comp = [10, 15]
[testNSplineComposee] (module testsplinecomposee.py)

    methode-3 : [['cubic', ((1, 0, 2), (1, 0, -2))], ['cubic', ((1, 1, 0), (1, 1, 0))]] (E-diamirE.spl)
    ---------------------------------------------------------------------------------------------------

[testNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = E-diamirE.spl-4
                     role = NSplineComposee
          nb pts controle = 24
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [['cubic', ((1, 0, 2), (1, 0, -2))], ['cubic', ((1, 1, 0), (1, 1, 0))]]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [100, 100]
         largeur, hauteur = 1, 0.18963
              position cg = 0.419246, 0.00972073
                 longueur = 2.13817
                 ruptures = [0, 9, 23]
              composantes = [u'E-diamirE.spl-4-#0', u'E-diamirE.spl-4-#1']
      nb pts ctl par comp = [10, 15]
[testNSplineComposee] (module testsplinecomposee.py)

    methode-4 : [('cubic', ((2, 0, 0), (1, 0, -5))), ('cubic', ((1, 0, -5), (2, 0, 0)))] (E-diamirE.spl)
    ----------------------------------------------------------------------------------------------------

[testNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = E-diamirE.spl-5
                     role = NSplineComposee
          nb pts controle = 24
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0, 0), (1, 0, -5))), ('cubic', ((1, 0, -5), (2, 0, 0)))]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [100, 100]
         largeur, hauteur = 1, 0.189683
              position cg = 0.408689, 0.00940024
                 longueur = 2.10834
                 ruptures = [0, 9, 23]
              composantes = [u'E-diamirE.spl-5-#0', u'E-diamirE.spl-5-#1']
      nb pts ctl par comp = [10, 15]
[testNSplineComposee] (module testsplinecomposee.py)

    hardScale : E-diamirE.spl
    -------------------------

[testNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = E-diamirE.spl-5
                     role = NSplineComposee
          nb pts controle = 24
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0.0, 0.0), (1, 0.0, -1.0))), ('cubic', ((1, 0.0, -1.0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [100, 100]
         largeur, hauteur = 0.2, 0.0379367
              position cg = 0.356704, -0.0015753
                 longueur = 0.421668
                 ruptures = [0, 9, 23]
              composantes = [u'E-diamirE.spl-5-#0', u'E-diamirE.spl-5-#1']
      nb pts ctl par comp = [10, 15]
[testNSplineComposee] (module testsplinecomposee.py)

    translate((-1.5,0.05)) : E-diamirE.spl
    --------------------------------------

[testNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = E-diamirE.spl-5
                     role = NSplineComposee
          nb pts controle = 24
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0.0, 0.0), (1, 0.0, -1.0))), ('cubic', ((1, 0.0, -1.0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [100, 100]
         largeur, hauteur = 0.2, 0.0379367
              position cg = -1.1433, 0.0484247
                 longueur = 0.421668
                 ruptures = [0, 9, 23]
              composantes = [u'E-diamirE.spl-5-#0', u'E-diamirE.spl-5-#1']
      nb pts ctl par comp = [10, 15]
[testNSplineComposee] (module testsplinecomposee.py)

    hardRotate(30) : E-diamirE.spl
    ------------------------------

[testNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = E-diamirE.spl-5
                     role = NSplineComposee
          nb pts controle = 24
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [['cubic', [(2, 0.0, 0.0), (1, 0.49999999999999994, -0.8660254037844387)]], ['cubic', [(1, 0.49999999999999994, -0.8660254037844387), (2, 0.0, 0.0)]]]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [100, 100]
         largeur, hauteur = 0.175855, 0.102948
              position cg = -1.14641, 0.0545552
                 longueur = 0.421668
                 ruptures = [0, 9, 23]
              composantes = [u'E-diamirE.spl-5-#0', u'E-diamirE.spl-5-#1']
      nb pts ctl par comp = [10, 15]
[testNSplineComposee] (module testsplinecomposee.py)

    symetriser(1) : E-diamirE.spl
    -----------------------------

[testNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = E-diamirE.spl-5
                     role = NSplineComposee
          nb pts controle = 24
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0.0, -0.0), (1, 0.49999999999999994, 0.8660254037844387))), ('cubic', ((1, 0.49999999999999994, 0.8660254037844387), (2, 0.0, -0.0)))]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [100, 100]
         largeur, hauteur = 0.175855, 0.102948
              position cg = -1.14641, 0.0368065
                 longueur = 0.421668
                 ruptures = [0, 9, 23]
              composantes = [u'E-diamirE.spl-5-#0', u'E-diamirE.spl-5-#1']
      nb pts ctl par comp = [10, 15]
[testNSplineComposee] (module testsplinecomposee.py)

    symetriser(1) : E-diamirE.spl
    -----------------------------

[testNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = E-diamirE.spl
                     role = NSplineComposee
          nb pts controle = 24
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [['cubic', ((2, 0, 0), (1, 0, -20))], ['cubic', ((1, 0, -20), (2, 0, 0))]]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [20, 10]
         largeur, hauteur = 1, 0.190836
              position cg = 0.409016, 0.00941382
                 longueur = 2.40071
                 ruptures = [0, 9, 23]
              composantes = [u'E-diamirE.spl-#0', u'E-diamirE.spl-#1']
      nb pts ctl par comp = [10, 15]
[testNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = E-diamirE.spl
                     role = NSplineComposee
          nb pts controle = 24
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0.0, 0.0), (1, 0.0, -4.0))), ('cubic', ((1, 0.0, -4.0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [20, 10]
         largeur, hauteur = 0.2, 0.0381671
              position cg = 0.0818032, 0.00188276
                 longueur = 0.480141
                 ruptures = [0, 9, 23]
              composantes = [u'E-diamirE.spl-#0', u'E-diamirE.spl-#1']
      nb pts ctl par comp = [10, 15]
[testNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = E-diamirE.spl
                     role = NSplineComposee
          nb pts controle = 24
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [['cubic', [(2, 0.0, 0.0), (1, 0.6945927106677213, -3.939231012048832)]], ['cubic', [(1, 0.6945927106677213, -3.939231012048832), (2, 0.0, 0.0)]]]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [20, 10]
         largeur, hauteur = 0.199977, 0.0458537
              position cg = 0.0811278, 0.00410916
                 longueur = 0.480141
                 ruptures = [0, 9, 23]
              composantes = [u'E-diamirE.spl-#0', u'E-diamirE.spl-#1']
      nb pts ctl par comp = [10, 15]
[testNSplineComposee] (module testsplinecomposee.py)
join_1 = <NSplineComposee>
                     name = E-diamirE.spl
                     role = NSplineComposee
          nb pts controle = 24
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [['cubic', [(2, 0.0, 0.0), (1, 0.6945927106677213, -3.939231012048832)]], ['cubic', [(1, 0.6945927106677213, -3.939231012048832), (2, 0.0, 0.0)]]]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [20, 10]
         largeur, hauteur = 0.199977, 0.0458537
              position cg = 0.0811278, 0.00410916
                 longueur = 0.480141
                 ruptures = [0, 9, 23]
              composantes = [u'E-diamirE.spl-#0', u'E-diamirE.spl-#1']
      nb pts ctl par comp = [10, 15] ; R = [[ 0.19785589  0.02277966]
 [ 0.00089434 -0.01194997]
 [ 0.19785589  0.02277966]]
[testNSplineComposee] (module testsplinecomposee.py)
S = <NSplineComposee>
                     name = E-diamirE.spl
                     role = NSplineComposee
          nb pts controle = 24
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [['cubic', [(2, 0.0, 0.0), (1, 0.6945927106677213, -3.939231012048832)]], ['cubic', [(1, 0.6945927106677213, -3.939231012048832), (2, 0.0, 0.0)]]]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [20, 10]
         largeur, hauteur = 0.199977, 0.0458537
              position cg = 0.0811278, 0.00410916
                 longueur = 0.480141
                 ruptures = [0, 9, 23]
              composantes = [u'E-diamirE.spl-#0', u'E-diamirE.spl-#1']
      nb pts ctl par comp = [10, 15] ; R = [[ 0.19785589  0.02277966]
 [ 0.00089434 -0.01194997]
 [ 0.19785589  0.02277966]]
[testNSplineComposee] (module testsplinecomposee.py)
join_1 = <NSplineComposee>
                     name = E-diamirE.spl
                     role = NSplineComposee
          nb pts controle = 24
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [['cubic', [(1, 0.6945927106677213, -3.939231012048832), (2, 0.0, 0.0)]]]
    nb pts discretisation = [1000]
      mode echantillonage = ['courbure']
       nb pts echantillon = [10]
         largeur, hauteur = 0.202311, 0.0738354
              position cg = 0.067927, 0.00824927
                 longueur = 0.523307
                 ruptures = [0, 23]
              composantes = [u'E-diamirE.spl-#0']
      nb pts ctl par comp = [24] ; R = [[0.19785589 0.02277966]
 [0.19785589 0.02277966]]
[testNSplineComposee] (module testsplinecomposee.py)
split_nba = <NSplineComposee>
                     name = E-diamirE.spl
                     role = NSplineComposee
          nb pts controle = 24
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((1, 0.6945927106677213, -3.939231012048832), (2, 0, 0))), ('cubic', ((2, 0, 0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [10, 10]
         largeur, hauteur = 0.209691, 0.146177
              position cg = 0.0512253, 0.0242631
                 longueur = 0.664144
                 ruptures = [0, 9, 23]
              composantes = [u'E-diamirE.spl-#0', u'E-diamirE.spl-#1']
      nb pts ctl par comp = [10, 15] ; R = [[ 0.19785589  0.02277966]
 [ 0.00089434 -0.01194997]
 [ 0.19785589  0.02277966]]
[testNSplineComposee] (module testsplinecomposee.py)
normal ; On tente la suppression d'un point anguleux (9)
[testNSplineComposee] (module testsplinecomposee.py)
points = [[0.1978558859741592, 0.022779663794580067], [20.0, 20.0], [0.16768035148586796, 0.02265901746762354], [0.12001618339465994, 0.02215427624946569], [0.08126345212502341, 0.02142931732991523], [0.044022553962083225, 0.018439854572672085], [0.027914853343308073, 0.014532600130220421], [0.012486368031993204, 0.0071695399519990785], [0.003930139434834043, -0.0009814453332465957], [0.0011819422674424762, -0.0066484768524486286], [0.0024531891878931678, -0.014611944031165978], [0.008413370272604671, -0.015773188770980332], [0.013973124215376782, -0.019229069589920832], [0.01606990172131003, -0.019949639247718927], [0.019271516825038366, -0.020789474054295102], [0.022306552209837037, -0.020882165397259414], [0.027006046070353243, -0.020511802797077275], [0.04872874457683953, -0.017984028831911636], [0.07635703761545778, -0.014356234153219566], [0.09507495492128512, -0.010578960034039159], [0.11811931842161513, -0.005615877937684011], [0.1644496714553586, 0.0098104631794228], [0.18247226949526388, 0.017375822332924586], [0.1978558859741592, 0.022779663794580067]]
<NSplineComposee>
                     name = E-diamirE.spl
                     role = NSplineComposee
          nb pts controle = 28
                   closed = False
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0, 0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000]
      mode echantillonage = ['courbure']
       nb pts echantillon = [10]
         largeur, hauteur = 22.9437, 22.0623
              position cg = 10.067, 9.11608
                 longueur = 129.486
                 ruptures = [0, 27]
              composantes = [u'E-diamirE.spl-#0']
      nb pts ctl par comp = [28]
[testNSplineComposee] (module testsplinecomposee.py)
=========================================
Fin testNSplineComposee : (E-diamirE.spl)
=========================================


[debugNSplineComposee] (module testsplinecomposee.py)
====================================
debugNSplineComposee : (E-shark.spl)
====================================


[debugNSplineComposee] (module testsplinecomposee.py)

    Constructeur vide
    -----------------

<NSplineComposee>
                     name = NSplineComposee
                     role = NSplineComposee
          nb pts controle = 1
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = []
    nb pts discretisation = []
      mode echantillonage = []
       nb pts echantillon = []
         largeur, hauteur = 0, 0
              position cg = 0, 0
                 longueur = 0
                 ruptures = [0]
              composantes = []
      nb pts ctl par comp = []
[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = E-shark.spl
                     role = NSplineComposee
          nb pts controle = 26
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0, 0), (1, 0, -5))), ('cubic', ((1, 0, -5), (2, 0, 0)))]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [50, 40]
         largeur, hauteur = 1, 0.169337
              position cg = 0.387446, 0.0155093
                 longueur = 2.0985
                 ruptures = [0, 8, 25]
              composantes = [u'E-shark.spl-#0', u'E-shark.spl-#1']
      nb pts ctl par comp = [9, 18]
[debugNSplineComposee] (module testsplinecomposee.py)

    elaguer(eps=1, replace=True) : (E-shark.spl)
    --------------------------------------------

[elaguer] (module splinesimple.py)
Élagage inutile, 9 points de contrôle seulement
[elaguer] (module splinesimple.py)
historique_distances = [408.72, 191.61, 85.15, 33.69, 24.24, 10.11, 5.05, 1.02, 1.04, 0.72]
[elaguer] (module splinesimple.py)
Apres ELAGAGE : dist = 0.72 mm/m ; 18 points => 12 points 
[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = E-shark.spl
                     role = NSplineComposee
          nb pts controle = 20
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0, 0), (1, 0, -5))), ('cubic', ((1, 0, -5), (2, 0, 0)))]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [50, 40]
         largeur, hauteur = 1, 0.169377
              position cg = 0.387515, 0.0155637
                 longueur = 2.09842
                 ruptures = [0, 8, 19]
              composantes = [u'E-shark.spl-#0', u'E-shark.spl-#1']
      nb pts ctl par comp = [9, 12]
[debugNSplineComposee] (module testsplinecomposee.py)

    echantillonner() (E-shark.spl)
    ------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
echantillon = [[1.0, 0.0], [0.8583813342493806, 0.021331363454246327], [0.7678141125807721, 0.03553750343888019], [0.6197631731665035, 0.05931085202188163], [0.5374222231089686, 0.07209199373375577], [0.46206562546283353, 0.08324566178754414], [0.39203297020126576, 0.09307408979568328], [0.3523453704807184, 0.0982347734967254], [0.32350319481013146, 0.10147603195325994], [0.2988229688569148, 0.1037225431787057], [0.2766334200455678, 0.10520818633507725], [0.2561669281189344, 0.10604096462185633], [0.23699853885232827, 0.1062817142997269], [0.2188274901711579, 0.10596842042035295], [0.20126849204546318, 0.1051135279362977], [0.1817638042987414, 0.10355976685440547], [0.1572176207561784, 0.10095769485188218], [0.11379858237736448, 0.09561593977793381], [0.10145163165770989, 0.09377795162030562], [0.09256696422475252, 0.091961590218316], [0.08505683117534497, 0.08990824656859377], [0.07834277523689928, 0.08753000776659627], [0.07214138872413958, 0.08475685579917171], [0.06627808828129414, 0.08150959684506044], [0.06060832663497378, 0.07767071418745125], [0.055018669595358394, 0.07307767218870716], [0.04941074492683523, 0.06749842425494602], [0.0421017406408047, 0.05867649976084729], [0.033297039155467244, 0.04771060638161555], [0.029547964114600443, 0.043872698286321024], [0.02693334186644346, 0.041796941561436624], [0.024933545135696004, 0.04064836184522516], [0.023295761833935728, 0.04004540359077145], [0.0218588618109548, 0.03980082358928007], [0.020532146605833197, 0.03983624539513324], [0.01919899478699275, 0.0401473477623106], [0.017627433730859638, 0.04085846317727288], [0.015479458968870374, 0.042284147341364466], [0.011373852324142005, 0.045623516716917265], [0.009487009938084786, 0.04695475837177206], [0.008338355482982642, 0.04752484348652269], [0.007497005088389854, 0.04775877243485296], [0.006817178275670627, 0.04779542154641428], [0.006213560458366619, 0.04768399282546702], [0.0056264710253760165, 0.0474156914112262], [0.004985736418713801, 0.04690052865122719], [0.004223499760238074, 0.04590163651352566], [0.003205947321725315, 0.0436564283500223], [0.001712552967788148, 0.03702219103597343], [0.0, -1.3877787807814457e-17], [0.0002120345069220987, -0.007658010192152185], [0.0002693879313191126, -0.007744559880487542], [0.00030487702152922334, -0.0077538681751727545], [0.00035707038637034855, -0.007729133524726271], [0.000563603817935989, -0.007437080551650145], [0.0010128124677518584, -0.006824350210247607], [0.00126143903059173, -0.006711771842839643], [0.0015683844975470293, -0.006776139940288147], [0.002300010455849486, -0.007410869376978962], [0.005760395876038895, -0.012249472689668398], [0.008515598853745506, -0.014869633314968739], [0.011353080442000752, -0.0164117428241104], [0.01508281917905844, -0.017452763346648657], [0.02449211544094769, -0.019034286716213735], [0.029708842491721767, -0.020475734560828202], [0.033647912133982064, -0.02231537039649025], [0.03787645521693457, -0.025223963590637024], [0.04522368559833707, -0.03187499694091011], [0.05146045469396746, -0.03739974196854105], [0.05628072615792893, -0.04064994792602374], [0.0619020148153409, -0.04347955830460857], [0.06870238741483917, -0.045975515120792024], [0.07753101673286227, -0.04825912464354182], [0.09444695644989463, -0.051282458790570654], [0.12148049546527862, -0.05524106258317218], [0.14763406799702758, -0.05829222278438207], [0.17352368280910785, -0.06054517675848227], [0.19972116728896738, -0.06205558578412934], [0.22865673961087776, -0.06290048342126799], [0.26417532971011143, -0.06306438401423904], [0.30693419961066426, -0.06243733081284154], [0.352144055956423, -0.06097599083103293], [0.40059139046390235, -0.0586064246160834], [0.4535929641134553, -0.05520101326793953], [0.5131694971014205, -0.05055000808299099], [0.5807858817564837, -0.04444115351819109], [0.6634691691313768, -0.03609338890290503], [0.8246822546859547, -0.01855609852835624], [1.0, -2.981555974335137e-19]]
[debugNSplineComposee] (module testsplinecomposee.py)

    hardScale((0.2, 0.2)) : (E-shark.spl)
    -------------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = E-shark.spl
                     role = NSplineComposee
          nb pts controle = 20
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0.0, 0.0), (1, 0.0, -1.0))), ('cubic', ((1, 0.0, -1.0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [50, 40]
         largeur, hauteur = 0.2, 0.0338755
              position cg = 0.325367, 0.00913442
                 longueur = 0.419684
                 ruptures = [0, 8, 19]
              composantes = [u'E-shark.spl-#0', u'E-shark.spl-#1']
      nb pts ctl par comp = [9, 12]
[debugNSplineComposee] (module testsplinecomposee.py)

    translate((-1.5,0.05)) : (E-shark.spl)
    --------------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = E-shark.spl
                     role = NSplineComposee
          nb pts controle = 20
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0.0, 0.0), (1, 0.0, -1.0))), ('cubic', ((1, 0.0, -1.0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [50, 40]
         largeur, hauteur = 0.2, 0.0338755
              position cg = -1.17463, 0.0591344
                 longueur = 0.419684
                 ruptures = [0, 8, 19]
              composantes = [u'E-shark.spl-#0', u'E-shark.spl-#1']
      nb pts ctl par comp = [9, 12]
[debugNSplineComposee] (module testsplinecomposee.py)

    hardRotate(30) (E-shark.spl)
    ----------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = E-shark.spl
                     role = NSplineComposee
          nb pts controle = 20
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0.0, 0.0), (1, 0.0, -1.0))), ('cubic', ((1, 0.0, -1.0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [50, 40]
         largeur, hauteur = 0.2, 0.0338755
              position cg = -1.17463, 0.0591344
                 longueur = 0.419684
                 ruptures = [0, 8, 19]
              composantes = [u'E-shark.spl-#0', u'E-shark.spl-#1']
      nb pts ctl par comp = [9, 12]
[debugNSplineComposee] (module testsplinecomposee.py)

    symetriser(1) (E-shark.spl)
    ---------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = E-shark.spl
                     role = NSplineComposee
          nb pts controle = 20
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [['cubic', [(2, 0.0, 0.0), (1, 0.49999999999999994, -0.8660254037844387)]], ['cubic', [(1, 0.49999999999999994, -0.8660254037844387), (2, 0.0, 0.0)]]]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [50, 40]
         largeur, hauteur = 0.177063, 0.101736
              position cg = -1.17752, 0.0666876
                 longueur = 0.419684
                 ruptures = [0, 8, 19]
              composantes = [u'E-shark.spl-#0', u'E-shark.spl-#1']
      nb pts ctl par comp = [9, 12]
[debugNSplineComposee] (module testsplinecomposee.py)

    reconstruction (E-shark.spl)
    ----------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = E-shark.spl
                     role = NSplineComposee
          nb pts controle = 26
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [['cubic', ((2, 0, 0), (1, 0, -20))], ['cubic', ((1, 0, -20), (2, 0, 0))]]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [50, 50]
         largeur, hauteur = 1, 0.216084
              position cg = 0.382348, 0.0169072
                 longueur = 2.39712
                 ruptures = [0, 8, 25]
              composantes = [u'E-shark.spl-#0', u'E-shark.spl-#1']
      nb pts ctl par comp = [9, 18]
[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = E-shark.spl
                     role = NSplineComposee
          nb pts controle = 26
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [['cubic', ((2, 0, 0), (1, 0, -20))], ['cubic', ((1, 0, -20), (2, 0, 0))]]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [50, 50]
         largeur, hauteur = 1, 0.216084
              position cg = 0.382348, 0.0169072
                 longueur = 2.39712
                 ruptures = [0, 8, 25]
              composantes = [u'E-shark.spl-#0', u'E-shark.spl-#1']
      nb pts ctl par comp = [9, 18]
[debugNSplineComposee] (module testsplinecomposee.py)

    hardScale((0.2,0.2), centre=np.asarray((0,0))) (E-shark.spl)
    ------------------------------------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = E-shark.spl
                     role = NSplineComposee
          nb pts controle = 26
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0.0, 0.0), (1, 0.0, -4.0))), ('cubic', ((1, 0.0, -4.0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [50, 50]
         largeur, hauteur = 0.2, 0.0432168
              position cg = 0.0764696, 0.00338145
                 longueur = 0.479424
                 ruptures = [0, 8, 25]
              composantes = [u'E-shark.spl-#0', u'E-shark.spl-#1']
      nb pts ctl par comp = [9, 18]
[debugNSplineComposee] (module testsplinecomposee.py)

    S.hardRotate(10) (E-shark.spl)
    ------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = E-shark.spl
                     role = NSplineComposee
          nb pts controle = 26
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [['cubic', [(2, 0.0, 0.0), (1, 0.6945927106677213, -3.939231012048832)]], ['cubic', [(1, 0.6945927106677213, -3.939231012048832), (2, 0.0, 0.0)]]]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [50, 50]
         largeur, hauteur = 0.201582, 0.0415695
              position cg = 0.0755085, 0.00589723
                 longueur = 0.479424
                 ruptures = [0, 8, 25]
              composantes = [u'E-shark.spl-#0', u'E-shark.spl-#1']
      nb pts ctl par comp = [9, 18]
[debugNSplineComposee] (module testsplinecomposee.py)

    S.toDump() (E-shark.spl)
    ------------------------

{'classename': 'NSplineComposee',
 'cpoints': [[0.19774942724661618, 0.024017986752232427],
             [0.16020347629773815, 0.023117327100659044],
             [0.11722037298003071, 0.022430221092781408],
             [0.07627452012292936, 0.021293684541225592],
             [0.038053570357975804, 0.017284317478825417],
             [0.021360563737625585, 0.012529491095217732],
             [0.00804002839126186, 0.00408212473268191],
             [0.0032593188624147687, -0.0021479362520156154],
             [0.0007878766441745608, -0.010711648781153639],
             [0.001249363080658615, -0.011998649342335074],
             [0.0022942814262811376, -0.012876989347021433],
             [0.00486500252228713, -0.013620912260851312],
             [0.006298371026787264, -0.013742036523986988],
             [0.007675324826570032, -0.013781262035116456],
             [0.012294847473824942, -0.016328508935458414],
             [0.016006763493371476, -0.017409787623218556],
             [0.020133586241734176, -0.01754472511439867],
             [0.026444667003297243, -0.01741417957249486],
             [0.0417492307713425, -0.016067369508021345],
             [0.05536595991900384, -0.013893368764754683],
             [0.06784115733815771, -0.011556780485443084],
             [0.09680003145385535, -0.004623943377442048],
             [0.11888697849073512, 0.0013194306858878406],
             [0.1353946190894581, 0.005999446340922758],
             [0.16789480595566827, 0.01544577345955899],
             [0.19774942724661618, 0.024017986752232427]],
 'methode': [['cubic',
              [(2, 0.0, 0.0), (1, 0.6945927106677213, -3.939231012048832)]],
             ['cubic',
              [(1, 0.6945927106677213, -3.939231012048832), (2, 0.0, 0.0)]]],
 'mode': ['courbure', 'courbure'],
 'name': u'E-shark.spl',
 'nbpd': [1000, 1000],
 'nbpe': [50, 50],
 'role': 'NSplineComposee',
 'ruptures': [0, 8, 25]}
[debugNSplineComposee] (module testsplinecomposee.py)

    NSplineComposee(**dump0) (E-shark.spl)
    --------------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
join_1 = <NSplineComposee>
                     name = E-shark.spl
                     role = NSplineComposee
          nb pts controle = 26
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [['cubic', [(2, 0.0, 0.0), (1, 0.6945927106677213, -3.939231012048832)]], ['cubic', [(1, 0.6945927106677213, -3.939231012048832), (2, 0.0, 0.0)]]]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [50, 50]
         largeur, hauteur = 0.201582, 0.0415695
              position cg = 0.0755085, 0.00589723
                 longueur = 0.479424
                 ruptures = [0, 8, 25]
              composantes = [u'E-shark.spl-#0', u'E-shark.spl-#1']
      nb pts ctl par comp = [9, 18]
[debugNSplineComposee] (module testsplinecomposee.py)
Rupture = [[0.19774942724661618, 0.024017986752232427], [0.0007878766441745608, -0.010711648781153639], [0.19774942724661618, 0.024017986752232427]]
[debugNSplineComposee] (module testsplinecomposee.py)

    dump1 = S.toDump() (E-shark.spl)
    --------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
dump_equal_dump1 = True
[debugNSplineComposee] (module testsplinecomposee.py)

    S.load(dump1) (E-shark.spl)
    ---------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = E-shark.spl
                     role = NSplineComposee
          nb pts controle = 26
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [['cubic', [(2, 0.0, 0.0), (1, 0.6945927106677213, -3.939231012048832)]], ['cubic', [(1, 0.6945927106677213, -3.939231012048832), (2, 0.0, 0.0)]]]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [50, 50]
         largeur, hauteur = 0.201582, 0.0415695
              position cg = 0.0755085, 0.00589723
                 longueur = 0.479424
                 ruptures = [0, 8, 25]
              composantes = [u'E-shark.spl-#0', u'E-shark.spl-#1']
      nb pts ctl par comp = [9, 18]
[debugNSplineComposee] (module testsplinecomposee.py)
R = [[ 0.19774943  0.02401799]
 [ 0.00078788 -0.01071165]
 [ 0.19774943  0.02401799]]
[debugNSplineComposee] (module testsplinecomposee.py)
dump1_equal_dump2 = False
[debugNSplineComposee] (module testsplinecomposee.py)

    S.join(1) (E-shark.spl)
    -----------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = E-shark.spl
                     role = NSplineComposee
          nb pts controle = 26
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [['cubic', [(1, 0.6945927106677213, -3.939231012048832), (2, 0.0, 0.0)]]]
    nb pts discretisation = [1000]
      mode echantillonage = ['courbure']
       nb pts echantillon = [50]
         largeur, hauteur = 0.203359, 0.0799103
              position cg = 0.0357604, 0.0122179
                 longueur = 0.532836
                 ruptures = [0, 25]
              composantes = [u'E-shark.spl-#0']
      nb pts ctl par comp = [26]
[debugNSplineComposee] (module testsplinecomposee.py)
Ruptures = [[0.19774943 0.02401799]
 [0.19774943 0.02401799]]
[debugNSplineComposee] (module testsplinecomposee.py)

    S.split(len(S)/2) (E-shark.spl)
    -------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = E-shark.spl
                     role = NSplineComposee
          nb pts controle = 26
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((1, 0.6945927106677213, -3.939231012048832), (2, 0, 0))), ('cubic', ((2, 0, 0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [50, 50]
         largeur, hauteur = 0.21193, 0.152722
              position cg = -0.0377691, 0.0521456
                 longueur = 0.674367
                 ruptures = [0, 13, 25]
              composantes = [u'E-shark.spl-#0', u'E-shark.spl-#1']
      nb pts ctl par comp = [14, 13]
[debugNSplineComposee] (module testsplinecomposee.py)
ruptures = [[ 0.19774943  0.02401799]
 [ 0.00767532 -0.01378126]
 [ 0.19774943  0.02401799]]
[debugNSplineComposee] (module testsplinecomposee.py)

    removePoint(rupture[1]) (E-shark.spl)
    -------------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
normal ; On tente la suppression d'un point anguleux (13)
[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = E-shark.spl
                     role = NSplineComposee
          nb pts controle = 25
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0, 0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000]
      mode echantillonage = ['courbure']
       nb pts echantillon = [50]
         largeur, hauteur = 0.197073, 0.04158
              position cg = 0.0768132, 0.00580522
                 longueur = 0.414568
                 ruptures = [0, 24]
              composantes = [u'E-shark.spl-#0']
      nb pts ctl par comp = [25]
[debugNSplineComposee] (module testsplinecomposee.py)

    S.insertPoint((20, 20)) E-shark.spl
    -----------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = E-shark.spl
                     role = NSplineComposee
          nb pts controle = 26
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0, 0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000]
      mode echantillonage = ['courbure']
       nb pts echantillon = [50]
         largeur, hauteur = 19.9892, 20.4459
              position cg = 10.9435, 9.49921
                 longueur = 58.7274
                 ruptures = [0, 25]
              composantes = [u'E-shark.spl-#0']
      nb pts ctl par comp = [26]
[debugNSplineComposee] (module testsplinecomposee.py)
points = [[0.19774942724661618, 0.024017986752232427], [20.0, 20.0], [0.16020347629773815, 0.023117327100659044], [0.11722037298003071, 0.022430221092781408], [0.07627452012292936, 0.021293684541225592], [0.038053570357975804, 0.017284317478825417], [0.021360563737625585, 0.012529491095217732], [0.00804002839126186, 0.00408212473268191], [0.0032593188624147687, -0.0021479362520156154], [0.0007878766441745608, -0.010711648781153639], [0.001249363080658615, -0.011998649342335074], [0.0022942814262811376, -0.012876989347021433], [0.00486500252228713, -0.013620912260851312], [0.006298371026787264, -0.013742036523986988], [0.012294847473824942, -0.016328508935458414], [0.016006763493371476, -0.017409787623218556], [0.020133586241734176, -0.01754472511439867], [0.026444667003297243, -0.01741417957249486], [0.0417492307713425, -0.016067369508021345], [0.05536595991900384, -0.013893368764754683], [0.06784115733815771, -0.011556780485443084], [0.09680003145385535, -0.004623943377442048], [0.11888697849073512, 0.0013194306858878406], [0.1353946190894581, 0.005999446340922758], [0.16789480595566827, 0.01544577345955899], [0.19774942724661618, 0.024017986752232427]]
[debugNSplineComposee] (module testsplinecomposee.py)

    S.insertPoint(pt,13) E-shark.spl
    --------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = E-shark.spl
                     role = NSplineComposee
          nb pts controle = 27
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0, 0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000]
      mode echantillonage = ['courbure']
       nb pts echantillon = [50]
         largeur, hauteur = 22.63, 20.5403
              position cg = 8.21966, 9.61496
                 longueur = 122.657
                 ruptures = [0, 26]
              composantes = [u'E-shark.spl-#0']
      nb pts ctl par comp = [27]
[debugNSplineComposee] (module testsplinecomposee.py)

    S[0] = (2,0.5) (E-shark.spl)
    ----------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = E-shark.spl
                     role = NSplineComposee
          nb pts controle = 27
                   closed = False
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0, 0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000]
      mode echantillonage = ['courbure']
       nb pts echantillon = [50]
         largeur, hauteur = 22.6298, 20.4262
              position cg = 8.24375, 9.45103
                 longueur = 120.838
                 ruptures = [0, 26]
              composantes = [u'E-shark.spl-#0']
      nb pts ctl par comp = [27]
[debugNSplineComposee] (module testsplinecomposee.py)

    S[len(S)-1] = S[0] (E-shark.spl)
    --------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = E-shark.spl
                     role = NSplineComposee
          nb pts controle = 27
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0, 0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000]
      mode echantillonage = ['courbure']
       nb pts echantillon = [50]
         largeur, hauteur = 22.6301, 20.4262
              position cg = 8.24427, 9.4517
                 longueur = 122.702
                 ruptures = [0, 26]
              composantes = [u'E-shark.spl-#0']
      nb pts ctl par comp = [27]
[debugNSplineComposee] (module testsplinecomposee.py)

    S.appendPoint((2,1.5)) (E-shark.spl)
    ------------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = E-shark.spl
                     role = NSplineComposee
          nb pts controle = 28
                   closed = False
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0, 0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000]
      mode echantillonage = ['courbure']
       nb pts echantillon = [50]
         largeur, hauteur = 22.6299, 20.4261
              position cg = 8.23379, 9.43769
                 longueur = 123.767
                 ruptures = [0, 27]
              composantes = [u'E-shark.spl-#0']
      nb pts ctl par comp = [28]
[debugNSplineComposee] (module testsplinecomposee.py)

    S.insertPoint((2,-2)) (E-shark.spl)
    -----------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = E-shark.spl
                     role = NSplineComposee
          nb pts controle = 29
                   closed = False
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0, 0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000]
      mode echantillonage = ['courbure']
       nb pts echantillon = [50]
         largeur, hauteur = 22.6301, 22.3195
              position cg = 8.15598, 9.32033
                 longueur = 127.239
                 ruptures = [0, 28]
              composantes = [u'E-shark.spl-#0']
      nb pts ctl par comp = [29]
[debugNSplineComposee] (module testsplinecomposee.py)

    S.insertPoint((6,0)) (E-shark.spl)
    ----------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = E-shark.spl
                     role = NSplineComposee
          nb pts controle = 30
                   closed = False
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0, 0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000]
      mode echantillonage = ['courbure']
       nb pts echantillon = [50]
         largeur, hauteur = 22.6298, 22.0814
              position cg = 9.98299, 9.08582
                 longueur = 129.395
                 ruptures = [0, 29]
              composantes = [u'E-shark.spl-#0']
      nb pts ctl par comp = [30]
[debugNSplineComposee] (module testsplinecomposee.py)

    S.removePoint(3) (E-shark.spl)
    ------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = E-shark.spl
                     role = NSplineComposee
          nb pts controle = 29
                   closed = False
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0, 0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000]
      mode echantillonage = ['courbure']
       nb pts echantillon = [50]
         largeur, hauteur = 22.6298, 22.0814
              position cg = 9.98596, 9.08268
                 longueur = 129.395
                 ruptures = [0, 28]
              composantes = [u'E-shark.spl-#0']
      nb pts ctl par comp = [29]
[debugNSplineComposee] (module testsplinecomposee.py)

    S._update() (E-shark.spl)
    -------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = E-shark.spl
                     role = NSplineComposee
          nb pts controle = 29
                   closed = False
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0, 0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000]
      mode echantillonage = ['courbure']
       nb pts echantillon = [50]
         largeur, hauteur = 22.6298, 22.0814
              position cg = 9.98596, 9.08268
                 longueur = 129.38
                 ruptures = [0, 28]
              composantes = [u'E-shark.spl-#0']
      nb pts ctl par comp = [29]
[debugNSplineComposee] (module testsplinecomposee.py)
======================================
Fin debugNSplineComposee : E-shark.spl
======================================


[testNSplineComposee] (module testsplinecomposee.py)
===================================
testNSplineComposee : (E-shark.spl)
===================================


[testNSplineComposee] (module testsplinecomposee.py)

    1. Constructeur vide
    --------------------

[testNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = vide
                     role = NSplineComposee
          nb pts controle = 1
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = []
    nb pts discretisation = []
      mode echantillonage = []
       nb pts echantillon = []
         largeur, hauteur = 0, 0
              position cg = 0, 0
                 longueur = 0
                 ruptures = [0]
              composantes = []
      nb pts ctl par comp = []
[testNSplineComposee] (module testsplinecomposee.py)

    methode-0 : [('cubic', 'natural'), ('cubic', 'natural')] (E-shark.spl)
    ----------------------------------------------------------------------

[testNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = E-shark.spl-1
                     role = NSplineComposee
          nb pts controle = 26
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', 'natural'), ('cubic', 'natural')]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [100, 100]
         largeur, hauteur = 1, 0.168674
              position cg = 0.389074, 0.0153307
                 longueur = 2.07273
                 ruptures = [0, 8, 25]
              composantes = [u'E-shark.spl-1-#0', u'E-shark.spl-1-#1']
      nb pts ctl par comp = [9, 18]
[testNSplineComposee] (module testsplinecomposee.py)

    methode-1 : [('cubic', ((1, 0, 3.14), (1, 0, -3.14))), ('cubic', ((1, 0, 0), (1, 0, 0)))] (E-shark.spl)
    -------------------------------------------------------------------------------------------------------

[testNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = E-shark.spl-2
                     role = NSplineComposee
          nb pts controle = 26
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((1, 0, 3.14), (1, 0, -3.14))), ('cubic', ((1, 0, 0), (1, 0, 0)))]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [100, 100]
         largeur, hauteur = 1, 0.168749
              position cg = 0.431031, 0.0184737
                 longueur = 2.18833
                 ruptures = [0, 8, 25]
              composantes = [u'E-shark.spl-2-#0', u'E-shark.spl-2-#1']
      nb pts ctl par comp = [9, 18]
[testNSplineComposee] (module testsplinecomposee.py)

    methode-2 : [('cubic', 'not-a-knot'), ('cubic', 'not-a-knot')] (E-shark.spl)
    ----------------------------------------------------------------------------

[testNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = E-shark.spl-3
                     role = NSplineComposee
          nb pts controle = 26
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', 'not-a-knot'), ('cubic', 'not-a-knot')]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [100, 100]
         largeur, hauteur = 1.00011, 0.168682
              position cg = 0.388824, 0.0153367
                 longueur = 2.07303
                 ruptures = [0, 8, 25]
              composantes = [u'E-shark.spl-3-#0', u'E-shark.spl-3-#1']
      nb pts ctl par comp = [9, 18]
[testNSplineComposee] (module testsplinecomposee.py)

    methode-3 : [['cubic', ((1, 0, 2), (1, 0, -2))], ['cubic', ((1, 1, 0), (1, 1, 0))]] (E-shark.spl)
    -------------------------------------------------------------------------------------------------

[testNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = E-shark.spl-4
                     role = NSplineComposee
          nb pts controle = 26
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [['cubic', ((1, 0, 2), (1, 0, -2))], ['cubic', ((1, 1, 0), (1, 1, 0))]]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [100, 100]
         largeur, hauteur = 1, 0.168685
              position cg = 0.4156, 0.0164019
                 longueur = 2.13201
                 ruptures = [0, 8, 25]
              composantes = [u'E-shark.spl-4-#0', u'E-shark.spl-4-#1']
      nb pts ctl par comp = [9, 18]
[testNSplineComposee] (module testsplinecomposee.py)

    methode-4 : [('cubic', ((2, 0, 0), (1, 0, -5))), ('cubic', ((1, 0, -5), (2, 0, 0)))] (E-shark.spl)
    --------------------------------------------------------------------------------------------------

[testNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = E-shark.spl-5
                     role = NSplineComposee
          nb pts controle = 26
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0, 0), (1, 0, -5))), ('cubic', ((1, 0, -5), (2, 0, 0)))]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [100, 100]
         largeur, hauteur = 1, 0.169337
              position cg = 0.387446, 0.0155093
                 longueur = 2.0985
                 ruptures = [0, 8, 25]
              composantes = [u'E-shark.spl-5-#0', u'E-shark.spl-5-#1']
      nb pts ctl par comp = [9, 18]
[testNSplineComposee] (module testsplinecomposee.py)

    hardScale : E-shark.spl
    -----------------------

[testNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = E-shark.spl-5
                     role = NSplineComposee
          nb pts controle = 26
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0.0, 0.0), (1, 0.0, -1.0))), ('cubic', ((1, 0.0, -1.0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [100, 100]
         largeur, hauteur = 0.2, 0.0338674
              position cg = 0.323934, -0.000310502
                 longueur = 0.4197
                 ruptures = [0, 8, 25]
              composantes = [u'E-shark.spl-5-#0', u'E-shark.spl-5-#1']
      nb pts ctl par comp = [9, 18]
[testNSplineComposee] (module testsplinecomposee.py)

    translate((-1.5,0.05)) : E-shark.spl
    ------------------------------------

[testNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = E-shark.spl-5
                     role = NSplineComposee
          nb pts controle = 26
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0.0, 0.0), (1, 0.0, -1.0))), ('cubic', ((1, 0.0, -1.0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [100, 100]
         largeur, hauteur = 0.2, 0.0338674
              position cg = -1.17607, 0.0496895
                 longueur = 0.4197
                 ruptures = [0, 8, 25]
              composantes = [u'E-shark.spl-5-#0', u'E-shark.spl-5-#1']
      nb pts ctl par comp = [9, 18]
[testNSplineComposee] (module testsplinecomposee.py)

    hardRotate(30) : E-shark.spl
    ----------------------------

[testNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = E-shark.spl-5
                     role = NSplineComposee
          nb pts controle = 26
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [['cubic', [(2, 0.0, 0.0), (1, 0.49999999999999994, -0.8660254037844387)]], ['cubic', [(1, 0.49999999999999994, -0.8660254037844387), (2, 0.0, 0.0)]]]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [100, 100]
         largeur, hauteur = 0.177063, 0.10171
              position cg = -1.18017, 0.0570985
                 longueur = 0.4197
                 ruptures = [0, 8, 25]
              composantes = [u'E-shark.spl-5-#0', u'E-shark.spl-5-#1']
      nb pts ctl par comp = [9, 18]
[testNSplineComposee] (module testsplinecomposee.py)

    symetriser(1) : E-shark.spl
    ---------------------------

[testNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = E-shark.spl-5
                     role = NSplineComposee
          nb pts controle = 26
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0.0, -0.0), (1, 0.49999999999999994, 0.8660254037844387))), ('cubic', ((1, 0.49999999999999994, 0.8660254037844387), (2, 0.0, -0.0)))]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [100, 100]
         largeur, hauteur = 0.177063, 0.10171
              position cg = -1.18017, 0.0343706
                 longueur = 0.4197
                 ruptures = [0, 8, 25]
              composantes = [u'E-shark.spl-5-#0', u'E-shark.spl-5-#1']
      nb pts ctl par comp = [9, 18]
[testNSplineComposee] (module testsplinecomposee.py)

    symetriser(1) : E-shark.spl
    ---------------------------

[testNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = E-shark.spl
                     role = NSplineComposee
          nb pts controle = 26
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [['cubic', ((2, 0, 0), (1, 0, -20))], ['cubic', ((1, 0, -20), (2, 0, 0))]]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [20, 10]
         largeur, hauteur = 1, 0.216084
              position cg = 0.382348, 0.0169072
                 longueur = 2.39712
                 ruptures = [0, 8, 25]
              composantes = [u'E-shark.spl-#0', u'E-shark.spl-#1']
      nb pts ctl par comp = [9, 18]
[testNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = E-shark.spl
                     role = NSplineComposee
          nb pts controle = 26
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0.0, 0.0), (1, 0.0, -4.0))), ('cubic', ((1, 0.0, -4.0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [20, 10]
         largeur, hauteur = 0.2, 0.0432168
              position cg = 0.0764696, 0.00338145
                 longueur = 0.479424
                 ruptures = [0, 8, 25]
              composantes = [u'E-shark.spl-#0', u'E-shark.spl-#1']
      nb pts ctl par comp = [9, 18]
[testNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = E-shark.spl
                     role = NSplineComposee
          nb pts controle = 26
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [['cubic', [(2, 0.0, 0.0), (1, 0.6945927106677213, -3.939231012048832)]], ['cubic', [(1, 0.6945927106677213, -3.939231012048832), (2, 0.0, 0.0)]]]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [20, 10]
         largeur, hauteur = 0.201582, 0.0415695
              position cg = 0.0755085, 0.00589723
                 longueur = 0.479424
                 ruptures = [0, 8, 25]
              composantes = [u'E-shark.spl-#0', u'E-shark.spl-#1']
      nb pts ctl par comp = [9, 18]
[testNSplineComposee] (module testsplinecomposee.py)
join_1 = <NSplineComposee>
                     name = E-shark.spl
                     role = NSplineComposee
          nb pts controle = 26
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [['cubic', [(2, 0.0, 0.0), (1, 0.6945927106677213, -3.939231012048832)]], ['cubic', [(1, 0.6945927106677213, -3.939231012048832), (2, 0.0, 0.0)]]]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [20, 10]
         largeur, hauteur = 0.201582, 0.0415695
              position cg = 0.0755085, 0.00589723
                 longueur = 0.479424
                 ruptures = [0, 8, 25]
              composantes = [u'E-shark.spl-#0', u'E-shark.spl-#1']
      nb pts ctl par comp = [9, 18] ; R = [[ 0.19774943  0.02401799]
 [ 0.00078788 -0.01071165]
 [ 0.19774943  0.02401799]]
[testNSplineComposee] (module testsplinecomposee.py)
S = <NSplineComposee>
                     name = E-shark.spl
                     role = NSplineComposee
          nb pts controle = 26
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [['cubic', [(2, 0.0, 0.0), (1, 0.6945927106677213, -3.939231012048832)]], ['cubic', [(1, 0.6945927106677213, -3.939231012048832), (2, 0.0, 0.0)]]]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [20, 10]
         largeur, hauteur = 0.201582, 0.0415695
              position cg = 0.0755085, 0.00589723
                 longueur = 0.479424
                 ruptures = [0, 8, 25]
              composantes = [u'E-shark.spl-#0', u'E-shark.spl-#1']
      nb pts ctl par comp = [9, 18] ; R = [[ 0.19774943  0.02401799]
 [ 0.00078788 -0.01071165]
 [ 0.19774943  0.02401799]]
[testNSplineComposee] (module testsplinecomposee.py)
join_1 = <NSplineComposee>
                     name = E-shark.spl
                     role = NSplineComposee
          nb pts controle = 26
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [['cubic', [(1, 0.6945927106677213, -3.939231012048832), (2, 0.0, 0.0)]]]
    nb pts discretisation = [1000]
      mode echantillonage = ['courbure']
       nb pts echantillon = [10]
         largeur, hauteur = 0.203359, 0.0799103
              position cg = 0.0357604, 0.0122179
                 longueur = 0.532836
                 ruptures = [0, 25]
              composantes = [u'E-shark.spl-#0']
      nb pts ctl par comp = [26] ; R = [[0.19774943 0.02401799]
 [0.19774943 0.02401799]]
[testNSplineComposee] (module testsplinecomposee.py)
split_nba = <NSplineComposee>
                     name = E-shark.spl
                     role = NSplineComposee
          nb pts controle = 26
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((1, 0.6945927106677213, -3.939231012048832), (2, 0, 0))), ('cubic', ((2, 0, 0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [10, 10]
         largeur, hauteur = 0.212562, 0.158747
              position cg = -0.0469303, 0.0583535
                 longueur = 0.686378
                 ruptures = [0, 8, 25]
              composantes = [u'E-shark.spl-#0', u'E-shark.spl-#1']
      nb pts ctl par comp = [9, 18] ; R = [[ 0.19774943  0.02401799]
 [ 0.00078788 -0.01071165]
 [ 0.19774943  0.02401799]]
[testNSplineComposee] (module testsplinecomposee.py)
normal ; On tente la suppression d'un point anguleux (8)
[testNSplineComposee] (module testsplinecomposee.py)
points = [[0.19774942724661618, 0.024017986752232427], [20.0, 20.0], [0.16020347629773815, 0.023117327100659044], [0.11722037298003071, 0.022430221092781408], [0.07627452012292936, 0.021293684541225592], [0.038053570357975804, 0.017284317478825417], [0.021360563737625585, 0.012529491095217732], [0.00804002839126186, 0.00408212473268191], [0.0032593188624147687, -0.0021479362520156154], [0.001249363080658615, -0.011998649342335074], [0.0022942814262811376, -0.012876989347021433], [0.00486500252228713, -0.013620912260851312], [0.006298371026787264, -0.013742036523986988], [0.007675324826570032, -0.013781262035116456], [0.012294847473824942, -0.016328508935458414], [0.016006763493371476, -0.017409787623218556], [0.020133586241734176, -0.01754472511439867], [0.026444667003297243, -0.01741417957249486], [0.0417492307713425, -0.016067369508021345], [0.05536595991900384, -0.013893368764754683], [0.06784115733815771, -0.011556780485443084], [0.09680003145385535, -0.004623943377442048], [0.11888697849073512, 0.0013194306858878406], [0.1353946190894581, 0.005999446340922758], [0.16789480595566827, 0.01544577345955899], [0.19774942724661618, 0.024017986752232427]]
<NSplineComposee>
                     name = E-shark.spl
                     role = NSplineComposee
          nb pts controle = 30
                   closed = False
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0, 0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000]
      mode echantillonage = ['courbure']
       nb pts echantillon = [10]
         largeur, hauteur = 22.4211, 22.0869
              position cg = 9.95072, 9.22849
                 longueur = 128.905
                 ruptures = [0, 29]
              composantes = [u'E-shark.spl-#0']
      nb pts ctl par comp = [30]
[testNSplineComposee] (module testsplinecomposee.py)
=======================================
Fin testNSplineComposee : (E-shark.spl)
=======================================


[debugNSplineComposee] (module testsplinecomposee.py)
==================================
debugNSplineComposee : (shark.spl)
==================================


[debugNSplineComposee] (module testsplinecomposee.py)

    Constructeur vide
    -----------------

<NSplineComposee>
                     name = NSplineComposee
                     role = NSplineComposee
          nb pts controle = 1
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = []
    nb pts discretisation = []
      mode echantillonage = []
       nb pts echantillon = []
         largeur, hauteur = 0, 0
              position cg = 0, 0
                 longueur = 0
                 ruptures = [0]
              composantes = []
      nb pts ctl par comp = []
[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = shark.spl
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0, 0), (1, 0, -5))), ('cubic', ((1, 0, -5), (2, 0, 0)))]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [50, 40]
         largeur, hauteur = 1, 0.168724
              position cg = 0.388902, 0.0153365
                 longueur = 2.07645
                 ruptures = [0, 40, 85]
              composantes = [u'shark.spl-#0', u'shark.spl-#1']
      nb pts ctl par comp = [41, 46]
[debugNSplineComposee] (module testsplinecomposee.py)

    elaguer(eps=1, replace=True) : (shark.spl)
    ------------------------------------------

[elaguer] (module splinesimple.py)
historique_distances = [412.41, 163.09, 71.04, 38.5, 17.39, 14.21, 7.15, 2.94, 1.51, 1.23, 0.86]
[elaguer] (module splinesimple.py)
Apres ELAGAGE : dist = 0.86 mm/m ; 41 points => 13 points 
[elaguer] (module splinesimple.py)
historique_distances = [432.27, 182.81, 80.27, 35.28, 23.16, 10.49, 5.0, 2.59, 1.74, 1.03, 1.41, 0.63]
[elaguer] (module splinesimple.py)
Apres ELAGAGE : dist = 0.63 mm/m ; 46 points => 14 points 
[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = shark.spl
                     role = NSplineComposee
          nb pts controle = 26
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0, 0), (1, 0, -5))), ('cubic', ((1, 0, -5), (2, 0, 0)))]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [50, 40]
         largeur, hauteur = 1, 0.169042
              position cg = 0.389031, 0.0154104
                 longueur = 2.07756
                 ruptures = [0, 12, 25]
              composantes = [u'shark.spl-#0', u'shark.spl-#1']
      nb pts ctl par comp = [13, 14]
[debugNSplineComposee] (module testsplinecomposee.py)

    echantillonner() (shark.spl)
    ----------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
echantillon = [[1.0, 0.0], [0.8484799836768243, 0.022829479364607663], [0.7595498650204203, 0.036723369149007305], [0.6327729177195911, 0.0573566112061598], [0.5506871640536937, 0.07051467556264972], [0.4917828012850871, 0.07946374873010538], [0.4414158345815031, 0.08660366983017073], [0.3976438618491677, 0.09230274030978239], [0.3591829456343436, 0.09679471838780652], [0.32406942107225367, 0.10037309628486367], [0.29369888272328265, 0.10297496345989157], [0.2685365261265546, 0.10462717625993526], [0.2462054605026332, 0.10557838180622585], [0.22575182350673492, 0.10592889590225213], [0.20665748462987266, 0.10573141239082434], [0.18860138364683446, 0.10501599308370167], [0.17138720409878785, 0.10380161482633742], [0.15556793254249893, 0.10216543597454908], [0.14118723354387247, 0.10015160550817982], [0.12791785398452526, 0.09776143621494748], [0.1155580058396863, 0.09499782318207418], [0.10397324034892742, 0.09186467396551859], [0.09305739871407162, 0.08836276161753286], [0.08270446765021726, 0.08448096561669467], [0.07307711585411727, 0.08030634443815338], [0.06418850141485138, 0.07587366994811932], [0.055993931661108345, 0.0711929155033632], [0.04845915566286516, 0.06627731843714878], [0.04150353986516515, 0.061101534839907934], [0.034553720436720094, 0.05522219911342789], [0.02727676261266051, 0.04832049459097792], [0.021193861954987885, 0.04189586897799832], [0.01636491204184587, 0.03604668492447875], [0.011013029721548526, 0.028480594130455048], [0.006031471769742382, 0.0207809801042576], [0.004408777363416619, 0.01739138806744055], [0.002638184227331599, 0.011393212672462957], [0.0014333409205969261, 0.006904845299928708], [0.0011998784818667535, 0.0064902918196686615], [0.0010922464965802726, 0.0064024210210164145], [0.0010226358202136934, 0.006387186785172128], [0.0009540205311640562, 0.00640773175594406], [0.0008468901981019491, 0.00651190568183856], [0.0005496054095923615, 0.007047760573410581], [0.00042920267154407897, 0.007221890328672707], [0.0003807033637160565, 0.007251844910012944], [0.00035083418083585287, 0.007252026755088946], [0.0003148471686032509, 0.007228213234621828], [0.0002492402130523058, 0.0070923759792414515], [-5.421010862427522e-20, 0.0], [0.00020960397356247756, -0.007629846823522123], [0.0002665832266596452, -0.007719558587711398], [0.00030185183052744354, -0.007730447087031122], [0.00034971747951328784, -0.007710721999714851], [0.0004948849897235125, -0.007526975290352519], [0.0009568612302125496, -0.006864462267453384], [0.0012012617851533834, -0.006725455299210684], [0.0014658832649788885, -0.006755012870455362], [0.0020188132026340583, -0.007167506414438056], [0.004888486591482625, -0.011156676968298345], [0.007223449259578879, -0.013540430261103405], [0.009830584382003875, -0.014970947459788803], [0.018948602481359524, -0.018257254643743927], [0.02503888877046212, -0.01980868450845391], [0.031015219691760965, -0.021022014078980026], [0.03425051892289419, -0.022381479033352768], [0.037788210288425224, -0.024722099227535103], [0.04282980775950744, -0.029273233550005544], [0.05010858669445548, -0.036178447647671405], [0.05514944548989782, -0.039982974766056854], [0.05995989045995803, -0.04274941470213805], [0.06546200088183136, -0.04502807782158811], [0.07256360344212964, -0.04707625167533564], [0.0860052606973097, -0.04969250449726123], [0.11187652838146978, -0.05381515421250484], [0.13722791595603384, -0.05710889909825847], [0.16236646794093482, -0.0596392071395558], [0.1876040662693865, -0.06144632437845035], [0.21386039626549141, -0.0625696930382353], [0.24486310952066387, -0.06308298426920476], [0.28425546277163577, -0.06290919969119904], [0.3266198328575992, -0.061971237945188634], [0.3714591167901565, -0.06021972099306496], [0.41953596558154393, -0.05757756025790612], [0.4720397964769774, -0.05392007601770846], [0.5305749136008722, -0.049059598862753746], [0.5994281086742771, -0.04253001849678551], [0.6986340850539694, -0.03216594453392186], [1.0, -8.131516293641283e-20]]
[debugNSplineComposee] (module testsplinecomposee.py)

    hardScale((0.2, 0.2)) : (shark.spl)
    -----------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = shark.spl
                     role = NSplineComposee
          nb pts controle = 26
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0.0, 0.0), (1, 0.0, -1.0))), ('cubic', ((1, 0.0, -1.0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [50, 40]
         largeur, hauteur = 0.2, 0.0338085
              position cg = 0.25571, 0.00920604
                 longueur = 0.415513
                 ruptures = [0, 12, 25]
              composantes = [u'shark.spl-#0', u'shark.spl-#1']
      nb pts ctl par comp = [13, 14]
[debugNSplineComposee] (module testsplinecomposee.py)

    translate((-1.5,0.05)) : (shark.spl)
    ------------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = shark.spl
                     role = NSplineComposee
          nb pts controle = 26
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0.0, 0.0), (1, 0.0, -1.0))), ('cubic', ((1, 0.0, -1.0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [50, 40]
         largeur, hauteur = 0.2, 0.0338085
              position cg = -1.24429, 0.059206
                 longueur = 0.415513
                 ruptures = [0, 12, 25]
              composantes = [u'shark.spl-#0', u'shark.spl-#1']
      nb pts ctl par comp = [13, 14]
[debugNSplineComposee] (module testsplinecomposee.py)

    hardRotate(30) (shark.spl)
    --------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = shark.spl
                     role = NSplineComposee
          nb pts controle = 26
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0.0, 0.0), (1, 0.0, -1.0))), ('cubic', ((1, 0.0, -1.0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [50, 40]
         largeur, hauteur = 0.2, 0.0338085
              position cg = -1.24429, 0.059206
                 longueur = 0.415513
                 ruptures = [0, 12, 25]
              composantes = [u'shark.spl-#0', u'shark.spl-#1']
      nb pts ctl par comp = [13, 14]
[debugNSplineComposee] (module testsplinecomposee.py)

    symetriser(1) (shark.spl)
    -------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = shark.spl
                     role = NSplineComposee
          nb pts controle = 26
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [['cubic', [(2, 0.0, 0.0), (1, 0.49999999999999994, -0.8660254037844387)]], ['cubic', [(1, 0.49999999999999994, -0.8660254037844387), (2, 0.0, 0.0)]]]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [50, 40]
         largeur, hauteur = 0.174238, 0.101634
              position cg = -1.24953, 0.0756635
                 longueur = 0.415513
                 ruptures = [0, 12, 25]
              composantes = [u'shark.spl-#0', u'shark.spl-#1']
      nb pts ctl par comp = [13, 14]
[debugNSplineComposee] (module testsplinecomposee.py)

    reconstruction (shark.spl)
    --------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = shark.spl
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [['cubic', ((2, 0, 0), (1, 0, -20))], ['cubic', ((1, 0, -20), (2, 0, 0))]]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [50, 50]
         largeur, hauteur = 1, 0.168724
              position cg = 0.388899, 0.0153355
                 longueur = 2.13403
                 ruptures = [0, 40, 85]
              composantes = [u'shark.spl-#0', u'shark.spl-#1']
      nb pts ctl par comp = [41, 46]
[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = shark.spl
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [['cubic', ((2, 0, 0), (1, 0, -20))], ['cubic', ((1, 0, -20), (2, 0, 0))]]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [50, 50]
         largeur, hauteur = 1, 0.168724
              position cg = 0.388899, 0.0153355
                 longueur = 2.13403
                 ruptures = [0, 40, 85]
              composantes = [u'shark.spl-#0', u'shark.spl-#1']
      nb pts ctl par comp = [41, 46]
[debugNSplineComposee] (module testsplinecomposee.py)

    hardScale((0.2,0.2), centre=np.asarray((0,0))) (shark.spl)
    ----------------------------------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = shark.spl
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0.0, 0.0), (1, 0.0, -4.0))), ('cubic', ((1, 0.0, -4.0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [50, 50]
         largeur, hauteur = 0.2, 0.0337448
              position cg = 0.0777797, 0.0030671
                 longueur = 0.426806
                 ruptures = [0, 40, 85]
              composantes = [u'shark.spl-#0', u'shark.spl-#1']
      nb pts ctl par comp = [41, 46]
[debugNSplineComposee] (module testsplinecomposee.py)

    S.hardRotate(10) (shark.spl)
    ----------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = shark.spl
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [['cubic', [(2, 0.0, 0.0), (1, 0.6945927106677213, -3.939231012048832)]], ['cubic', [(1, 0.6945927106677213, -3.939231012048832), (2, 0.0, 0.0)]]]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [50, 50]
         largeur, hauteur = 0.197132, 0.0415399
              position cg = 0.0776873, 0.000256216
                 longueur = 0.426806
                 ruptures = [0, 40, 85]
              composantes = [u'shark.spl-#0', u'shark.spl-#1']
      nb pts ctl par comp = [41, 46]
[debugNSplineComposee] (module testsplinecomposee.py)

    S.toDump() (shark.spl)
    ----------------------

{'classename': 'NSplineComposee',
 'cpoints': [[0.19858339476725345, 0.01845904305460559],
             [0.19825962127922073, 0.018450357333938402],
             [0.19729029092544015, 0.018424467690711235],
             [0.19568136173263362, 0.018381871963098127],
             [0.1934427249284742, 0.018323378932985183],
             [0.19058814662069595, 0.01825007850167314],
             [0.18713518648395774, 0.01816330175053998],
             [0.18310509365908179, 0.018064572952267537],
             [0.17852268022593432, 0.017955555809770294],
             [0.17341617272871673, 0.01783799645268741],
             [0.16781704235550388, 0.017713665841079758],
             [0.16175981451716415, 0.0175843042114709],
             [0.15528185872901273, 0.017451570049397527],
             [0.14842315986459048, 0.017316995797856758],
             [0.14122607202678944, 0.017181952124270518],
             [0.13373506557498108, 0.017047626836737873],
             [0.12599651999843658, 0.01693136262912047],
             [0.11805434050066799, 0.01687127739515457],
             [0.10996443512046378, 0.016780317218941125],
             [0.10177234426210086, 0.01662491847841685],
             [0.09353028826294842, 0.016402051277655802],
             [0.08529167931827285, 0.01610678719751022],
             [0.07710848764356662, 0.015734740843598757],
             [0.06903082228597476, 0.015271894730928616],
             [0.06111107576280834, 0.014683786139946925],
             [0.053400842361028975, 0.013964327161036042],
             [0.045978152589702885, 0.012951812620682518],
             [0.03888753787861307, 0.011725373781198584],
             [0.03219309931107266, 0.01023766788360047],
             [0.02597286098891917, 0.008414830418719441],
             [0.020351459719348916, 0.00616280926889412],
             [0.015419674522646143, 0.003513686175079648],
             [0.01122288458583845, 0.0006061293516697937],
             [0.007899688897911178, -0.002543342258227984],
             [0.005392470093137966, -0.0056975344955454135],
             [0.0035763942050729136, -0.008634974255802345],
             [0.0023882440242419117, -0.011230194256862036],
             [0.001785192935873925, -0.013383998999023592],
             [0.0015867132023413416, -0.01497519979191817],
             [0.0015791435408903376, -0.015949725081205395],
             [0.0016218441648118281, -0.01627059247878048],
             [0.0020833306012958824, -0.01755759303996191],
             [0.003128248946918391, -0.01843593304464827],
             [0.004406894869315253, -0.01894286133527917],
             [0.005763711460295459, -0.01917133856795713],
             [0.007132338547424524, -0.019300980221613827],
             [0.008509292347207292, -0.019340205732743296],
             [0.012010476715523757, -0.02119529365955743],
             [0.01228329332994113, -0.02138375713385632],
             [0.01312881499446221, -0.02188745263308525],
             [0.014625708198893986, -0.02251847612465265],
             [0.01684073101400875, -0.022968731320845395],
             [0.01972250455057331, -0.023071580825367446],
             [0.023213810340212387, -0.023076776870641785],
             [0.027278634523934503, -0.022973123270121694],
             [0.031890649889671246, -0.02273150414589744],
             [0.037006997175022115, -0.0222788490755156],
             [0.04258319829197976, -0.021626313205648184],
             [0.04857840010407645, -0.020759910004671867],
             [0.05495239050519381, -0.0196823236731116],
             [0.06167052986577031, -0.01847510334230065],
             [0.06867512485879497, -0.017115724183069923],
             [0.07590606177915987, -0.015546583615381136],
             [0.08331632979319009, -0.0137945259423761],
             [0.0908620507632106, -0.011911999213624583],
             [0.09849809714312295, -0.009949951055796984],
             [0.10617389891308751, -0.007931778598921224],
             [0.1138372428637289, -0.005872833096510423],
             [0.12143574734917803, -0.0037866805523328285],
             [0.1289160457879037, -0.0016783229719840931],
             [0.13622858661009535, 0.0004405026432959217],
             [0.14333378887203485, 0.0025154145678727485],
             [0.15018710152609488, 0.004509838472103417],
             [0.1567415182629816, 0.006411119886494148],
             [0.16295169086930567, 0.008209413974826036],
             [0.168775097584585, 0.009892861872622056],
             [0.17417189600237487, 0.01145017010326306],
             [0.17910511683243102, 0.01287113878461994],
             [0.1835409102342736, 0.014146770853330293],
             [0.18744882941052884, 0.015269039113769825],
             [0.19080204970244352, 0.01623088167041856],
             [0.193577553482852, 0.017026244410153095],
             [0.19575628859469865, 0.017650118783895472],
             [0.1973232993314522, 0.018098574083789617],
             [0.19826782914744, 0.01836878345825264],
             [0.19858339476725345, 0.01845904305460559]],
 'methode': [['cubic',
              [(2, 0.0, 0.0), (1, 0.6945927106677213, -3.939231012048832)]],
             ['cubic',
              [(1, 0.6945927106677213, -3.939231012048832), (2, 0.0, 0.0)]]],
 'mode': ['courbure', 'courbure'],
 'name': u'shark.spl',
 'nbpd': [1000, 1000],
 'nbpe': [50, 50],
 'role': 'NSplineComposee',
 'ruptures': [0, 40, 85]}
[debugNSplineComposee] (module testsplinecomposee.py)

    NSplineComposee(**dump0) (shark.spl)
    ------------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
join_1 = <NSplineComposee>
                     name = shark.spl
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [['cubic', [(2, 0.0, 0.0), (1, 0.6945927106677213, -3.939231012048832)]], ['cubic', [(1, 0.6945927106677213, -3.939231012048832), (2, 0.0, 0.0)]]]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [50, 50]
         largeur, hauteur = 0.197132, 0.0415399
              position cg = 0.0776873, 0.000256216
                 longueur = 0.426806
                 ruptures = [0, 40, 85]
              composantes = [u'shark.spl-#0', u'shark.spl-#1']
      nb pts ctl par comp = [41, 46]
[debugNSplineComposee] (module testsplinecomposee.py)
Rupture = [[0.19858339476725345, 0.01845904305460559], [0.0016218441648118281, -0.01627059247878048], [0.19858339476725345, 0.01845904305460559]]
[debugNSplineComposee] (module testsplinecomposee.py)

    dump1 = S.toDump() (shark.spl)
    ------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
dump_equal_dump1 = True
[debugNSplineComposee] (module testsplinecomposee.py)

    S.load(dump1) (shark.spl)
    -------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = shark.spl
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [['cubic', [(2, 0.0, 0.0), (1, 0.6945927106677213, -3.939231012048832)]], ['cubic', [(1, 0.6945927106677213, -3.939231012048832), (2, 0.0, 0.0)]]]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [50, 50]
         largeur, hauteur = 0.197132, 0.0415399
              position cg = 0.0776873, 0.000256216
                 longueur = 0.426806
                 ruptures = [0, 40, 85]
              composantes = [u'shark.spl-#0', u'shark.spl-#1']
      nb pts ctl par comp = [41, 46]
[debugNSplineComposee] (module testsplinecomposee.py)
R = [[ 0.19858339  0.01845904]
 [ 0.00162184 -0.01627059]
 [ 0.19858339  0.01845904]]
[debugNSplineComposee] (module testsplinecomposee.py)
dump1_equal_dump2 = False
[debugNSplineComposee] (module testsplinecomposee.py)

    S.join(1) (shark.spl)
    ---------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = shark.spl
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [['cubic', [(1, 0.6945927106677213, -3.939231012048832), (2, 0.0, 0.0)]]]
    nb pts discretisation = [1000]
      mode echantillonage = ['courbure']
       nb pts echantillon = [50]
         largeur, hauteur = 0.197019, 0.0421014
              position cg = 0.0776941, 0.000257506
                 longueur = 0.416478
                 ruptures = [0, 85]
              composantes = [u'shark.spl-#0']
      nb pts ctl par comp = [86]
[debugNSplineComposee] (module testsplinecomposee.py)
Ruptures = [[0.19858339 0.01845904]
 [0.19858339 0.01845904]]
[debugNSplineComposee] (module testsplinecomposee.py)

    S.split(len(S)/2) (shark.spl)
    -----------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = shark.spl
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((1, 0.6945927106677213, -3.939231012048832), (2, 0, 0))), ('cubic', ((2, 0, 0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [50, 50]
         largeur, hauteur = 0.19702, 0.0427218
              position cg = 0.0776939, 0.000257609
                 longueur = 0.419063
                 ruptures = [0, 43, 85]
              composantes = [u'shark.spl-#0', u'shark.spl-#1']
      nb pts ctl par comp = [44, 43]
[debugNSplineComposee] (module testsplinecomposee.py)
ruptures = [[ 0.19858339  0.01845904]
 [ 0.00440689 -0.01894286]
 [ 0.19858339  0.01845904]]
[debugNSplineComposee] (module testsplinecomposee.py)

    removePoint(rupture[1]) (shark.spl)
    -----------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
normal ; On tente la suppression d'un point anguleux (43)
[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = shark.spl
                     role = NSplineComposee
          nb pts controle = 85
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0, 0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000]
      mode echantillonage = ['courbure']
       nb pts echantillon = [50]
         largeur, hauteur = 0.197019, 0.0415399
              position cg = 0.0776893, 0.000256804
                 longueur = 0.414643
                 ruptures = [0, 84]
              composantes = [u'shark.spl-#0']
      nb pts ctl par comp = [85]
[debugNSplineComposee] (module testsplinecomposee.py)

    S.insertPoint((20, 20)) shark.spl
    ---------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = shark.spl
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0, 0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000]
      mode echantillonage = ['courbure']
       nb pts echantillon = [50]
         largeur, hauteur = 19.9885, 20.4471
              position cg = 10.9435, 9.503
                 longueur = 58.713
                 ruptures = [0, 85]
              composantes = [u'shark.spl-#0']
      nb pts ctl par comp = [86]
[debugNSplineComposee] (module testsplinecomposee.py)
points = [[0.19858339476725345, 0.01845904305460559], [20.0, 20.0], [0.19825962127922073, 0.018450357333938402], [0.19729029092544015, 0.018424467690711235], [0.19568136173263362, 0.018381871963098127], [0.1934427249284742, 0.018323378932985183], [0.19058814662069595, 0.01825007850167314], [0.18713518648395774, 0.01816330175053998], [0.18310509365908179, 0.018064572952267537], [0.17852268022593432, 0.017955555809770294], [0.17341617272871673, 0.01783799645268741], [0.16781704235550388, 0.017713665841079758], [0.16175981451716415, 0.0175843042114709], [0.15528185872901273, 0.017451570049397527], [0.14842315986459048, 0.017316995797856758], [0.14122607202678944, 0.017181952124270518], [0.13373506557498108, 0.017047626836737873], [0.12599651999843658, 0.01693136262912047], [0.11805434050066799, 0.01687127739515457], [0.10996443512046378, 0.016780317218941125], [0.10177234426210086, 0.01662491847841685], [0.09353028826294842, 0.016402051277655802], [0.08529167931827285, 0.01610678719751022], [0.07710848764356662, 0.015734740843598757], [0.06903082228597476, 0.015271894730928616], [0.06111107576280834, 0.014683786139946925], [0.053400842361028975, 0.013964327161036042], [0.045978152589702885, 0.012951812620682518], [0.03888753787861307, 0.011725373781198584], [0.03219309931107266, 0.01023766788360047], [0.02597286098891917, 0.008414830418719441], [0.020351459719348916, 0.00616280926889412], [0.015419674522646143, 0.003513686175079648], [0.01122288458583845, 0.0006061293516697937], [0.007899688897911178, -0.002543342258227984], [0.005392470093137966, -0.0056975344955454135], [0.0035763942050729136, -0.008634974255802345], [0.0023882440242419117, -0.011230194256862036], [0.001785192935873925, -0.013383998999023592], [0.0015867132023413416, -0.01497519979191817], [0.0015791435408903376, -0.015949725081205395], [0.0016218441648118281, -0.01627059247878048], [0.0020833306012958824, -0.01755759303996191], [0.003128248946918391, -0.01843593304464827], [0.005763711460295459, -0.01917133856795713], [0.007132338547424524, -0.019300980221613827], [0.008509292347207292, -0.019340205732743296], [0.012010476715523757, -0.02119529365955743], [0.01228329332994113, -0.02138375713385632], [0.01312881499446221, -0.02188745263308525], [0.014625708198893986, -0.02251847612465265], [0.01684073101400875, -0.022968731320845395], [0.01972250455057331, -0.023071580825367446], [0.023213810340212387, -0.023076776870641785], [0.027278634523934503, -0.022973123270121694], [0.031890649889671246, -0.02273150414589744], [0.037006997175022115, -0.0222788490755156], [0.04258319829197976, -0.021626313205648184], [0.04857840010407645, -0.020759910004671867], [0.05495239050519381, -0.0196823236731116], [0.06167052986577031, -0.01847510334230065], [0.06867512485879497, -0.017115724183069923], [0.07590606177915987, -0.015546583615381136], [0.08331632979319009, -0.0137945259423761], [0.0908620507632106, -0.011911999213624583], [0.09849809714312295, -0.009949951055796984], [0.10617389891308751, -0.007931778598921224], [0.1138372428637289, -0.005872833096510423], [0.12143574734917803, -0.0037866805523328285], [0.1289160457879037, -0.0016783229719840931], [0.13622858661009535, 0.0004405026432959217], [0.14333378887203485, 0.0025154145678727485], [0.15018710152609488, 0.004509838472103417], [0.1567415182629816, 0.006411119886494148], [0.16295169086930567, 0.008209413974826036], [0.168775097584585, 0.009892861872622056], [0.17417189600237487, 0.01145017010326306], [0.17910511683243102, 0.01287113878461994], [0.1835409102342736, 0.014146770853330293], [0.18744882941052884, 0.015269039113769825], [0.19080204970244352, 0.01623088167041856], [0.193577553482852, 0.017026244410153095], [0.19575628859469865, 0.017650118783895472], [0.1973232993314522, 0.018098574083789617], [0.19826782914744, 0.01836878345825264], [0.19858339476725345, 0.01845904305460559]]
[debugNSplineComposee] (module testsplinecomposee.py)

    S.insertPoint(pt,43) shark.spl
    ------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = shark.spl
                     role = NSplineComposee
          nb pts controle = 87
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0, 0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000]
      mode echantillonage = ['courbure']
       nb pts echantillon = [50]
         largeur, hauteur = 22.2525, 22.2224
              position cg = 7.7799, 8.48123
                 longueur = 124.41
                 ruptures = [0, 86]
              composantes = [u'shark.spl-#0']
      nb pts ctl par comp = [87]
[debugNSplineComposee] (module testsplinecomposee.py)

    S[0] = (2,0.5) (shark.spl)
    --------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = shark.spl
                     role = NSplineComposee
          nb pts controle = 87
                   closed = False
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0, 0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000]
      mode echantillonage = ['courbure']
       nb pts echantillon = [50]
         largeur, hauteur = 22.2529, 22.1092
              position cg = 7.85363, 8.4697
                 longueur = 122.589
                 ruptures = [0, 86]
              composantes = [u'shark.spl-#0']
      nb pts ctl par comp = [87]
[debugNSplineComposee] (module testsplinecomposee.py)

    S[len(S)-1] = S[0] (shark.spl)
    ------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = shark.spl
                     role = NSplineComposee
          nb pts controle = 87
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0, 0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000]
      mode echantillonage = ['courbure']
       nb pts echantillon = [50]
         largeur, hauteur = 22.2529, 22.109
              position cg = 7.85395, 8.47008
                 longueur = 124.454
                 ruptures = [0, 86]
              composantes = [u'shark.spl-#0']
      nb pts ctl par comp = [87]
[debugNSplineComposee] (module testsplinecomposee.py)

    S.appendPoint((2,1.5)) (shark.spl)
    ----------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = shark.spl
                     role = NSplineComposee
          nb pts controle = 88
                   closed = False
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0, 0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000]
      mode echantillonage = ['courbure']
       nb pts echantillon = [50]
         largeur, hauteur = 22.2528, 22.1092
              position cg = 7.84549, 8.45936
                 longueur = 125.519
                 ruptures = [0, 87]
              composantes = [u'shark.spl-#0']
      nb pts ctl par comp = [88]
[debugNSplineComposee] (module testsplinecomposee.py)

    S.insertPoint((2,-2)) (shark.spl)
    ---------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = shark.spl
                     role = NSplineComposee
          nb pts controle = 89
                   closed = False
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0, 0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000]
      mode echantillonage = ['courbure']
       nb pts echantillon = [50]
         largeur, hauteur = 22.2525, 22.3167
              position cg = 7.78159, 8.36687
                 longueur = 129.009
                 ruptures = [0, 88]
              composantes = [u'shark.spl-#0']
      nb pts ctl par comp = [89]
[debugNSplineComposee] (module testsplinecomposee.py)

    S.insertPoint((6,0)) (shark.spl)
    --------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = shark.spl
                     role = NSplineComposee
          nb pts controle = 90
                   closed = False
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0, 0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000]
      mode echantillonage = ['courbure']
       nb pts echantillon = [50]
         largeur, hauteur = 22.2527, 22.2941
              position cg = 9.66877, 8.56952
                 longueur = 131.18
                 ruptures = [0, 89]
              composantes = [u'shark.spl-#0']
      nb pts ctl par comp = [90]
[debugNSplineComposee] (module testsplinecomposee.py)

    S.removePoint(3) (shark.spl)
    ----------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = shark.spl
                     role = NSplineComposee
          nb pts controle = 89
                   closed = False
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0, 0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000]
      mode echantillonage = ['courbure']
       nb pts echantillon = [50]
         largeur, hauteur = 22.2527, 22.2941
              position cg = 9.66876, 8.56953
                 longueur = 131.18
                 ruptures = [0, 88]
              composantes = [u'shark.spl-#0']
      nb pts ctl par comp = [89]
[debugNSplineComposee] (module testsplinecomposee.py)

    S._update() (shark.spl)
    -----------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = shark.spl
                     role = NSplineComposee
          nb pts controle = 89
                   closed = False
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0, 0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000]
      mode echantillonage = ['courbure']
       nb pts echantillon = [50]
         largeur, hauteur = 22.2527, 22.2941
              position cg = 9.66876, 8.56953
                 longueur = 131.18
                 ruptures = [0, 88]
              composantes = [u'shark.spl-#0']
      nb pts ctl par comp = [89]
[debugNSplineComposee] (module testsplinecomposee.py)
====================================
Fin debugNSplineComposee : shark.spl
====================================


[testNSplineComposee] (module testsplinecomposee.py)
=================================
testNSplineComposee : (shark.spl)
=================================


[testNSplineComposee] (module testsplinecomposee.py)

    1. Constructeur vide
    --------------------

[testNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = vide
                     role = NSplineComposee
          nb pts controle = 1
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = []
    nb pts discretisation = []
      mode echantillonage = []
       nb pts echantillon = []
         largeur, hauteur = 0, 0
              position cg = 0, 0
                 longueur = 0
                 ruptures = [0]
              composantes = []
      nb pts ctl par comp = []
[testNSplineComposee] (module testsplinecomposee.py)

    methode-0 : [('cubic', 'natural'), ('cubic', 'natural')] (shark.spl)
    --------------------------------------------------------------------

[testNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = shark.spl-1
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', 'natural'), ('cubic', 'natural')]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [100, 100]
         largeur, hauteur = 1, 0.168724
              position cg = 0.388904, 0.0153365
                 longueur = 2.07322
                 ruptures = [0, 40, 85]
              composantes = [u'shark.spl-1-#0', u'shark.spl-1-#1']
      nb pts ctl par comp = [41, 46]
[testNSplineComposee] (module testsplinecomposee.py)

    methode-1 : [('cubic', ((1, 0, 3.14), (1, 0, -3.14))), ('cubic', ((1, 0, 0), (1, 0, 0)))] (shark.spl)
    -----------------------------------------------------------------------------------------------------

[testNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = shark.spl-2
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((1, 0, 3.14), (1, 0, -3.14))), ('cubic', ((1, 0, 0), (1, 0, 0)))]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [100, 100]
         largeur, hauteur = 1, 0.168724
              position cg = 0.3889, 0.0153366
                 longueur = 2.07477
                 ruptures = [0, 40, 85]
              composantes = [u'shark.spl-2-#0', u'shark.spl-2-#1']
      nb pts ctl par comp = [41, 46]
[testNSplineComposee] (module testsplinecomposee.py)

    methode-2 : [('cubic', 'not-a-knot'), ('cubic', 'not-a-knot')] (shark.spl)
    --------------------------------------------------------------------------

[testNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = shark.spl-3
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', 'not-a-knot'), ('cubic', 'not-a-knot')]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [100, 100]
         largeur, hauteur = 1.00012, 0.168724
              position cg = 0.388901, 0.0153364
                 longueur = 2.07329
                 ruptures = [0, 40, 85]
              composantes = [u'shark.spl-3-#0', u'shark.spl-3-#1']
      nb pts ctl par comp = [41, 46]
[testNSplineComposee] (module testsplinecomposee.py)

    methode-3 : [['cubic', ((1, 0, 2), (1, 0, -2))], ['cubic', ((1, 1, 0), (1, 1, 0))]] (shark.spl)
    -----------------------------------------------------------------------------------------------

[testNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = shark.spl-4
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [['cubic', ((1, 0, 2), (1, 0, -2))], ['cubic', ((1, 1, 0), (1, 1, 0))]]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [100, 100]
         largeur, hauteur = 1, 0.168724
              position cg = 0.388916, 0.0153372
                 longueur = 2.07471
                 ruptures = [0, 40, 85]
              composantes = [u'shark.spl-4-#0', u'shark.spl-4-#1']
      nb pts ctl par comp = [41, 46]
[testNSplineComposee] (module testsplinecomposee.py)

    methode-4 : [('cubic', ((2, 0, 0), (1, 0, -5))), ('cubic', ((1, 0, -5), (2, 0, 0)))] (shark.spl)
    ------------------------------------------------------------------------------------------------

[testNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = shark.spl-5
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0, 0), (1, 0, -5))), ('cubic', ((1, 0, -5), (2, 0, 0)))]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [100, 100]
         largeur, hauteur = 1, 0.168724
              position cg = 0.388902, 0.0153365
                 longueur = 2.07645
                 ruptures = [0, 40, 85]
              composantes = [u'shark.spl-5-#0', u'shark.spl-5-#1']
      nb pts ctl par comp = [41, 46]
[testNSplineComposee] (module testsplinecomposee.py)

    hardScale : shark.spl
    ---------------------

[testNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = shark.spl-5
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0.0, 0.0), (1, 0.0, -1.0))), ('cubic', ((1, 0.0, -1.0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [100, 100]
         largeur, hauteur = 0.2, 0.0337448
              position cg = 0.452972, 0.00760164
                 longueur = 0.415291
                 ruptures = [0, 40, 85]
              composantes = [u'shark.spl-5-#0', u'shark.spl-5-#1']
      nb pts ctl par comp = [41, 46]
[testNSplineComposee] (module testsplinecomposee.py)

    translate((-1.5,0.05)) : shark.spl
    ----------------------------------

[testNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = shark.spl-5
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0.0, 0.0), (1, 0.0, -1.0))), ('cubic', ((1, 0.0, -1.0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [100, 100]
         largeur, hauteur = 0.2, 0.0337448
              position cg = -1.04703, 0.0576016
                 longueur = 0.415291
                 ruptures = [0, 40, 85]
              composantes = [u'shark.spl-5-#0', u'shark.spl-5-#1']
      nb pts ctl par comp = [41, 46]
[testNSplineComposee] (module testsplinecomposee.py)

    hardRotate(30) : shark.spl
    --------------------------

[testNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = shark.spl-5
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [['cubic', [(2, 0.0, 0.0), (1, 0.49999999999999994, -0.8660254037844387)]], ['cubic', [(1, 0.49999999999999994, -0.8660254037844387), (2, 0.0, 0.0)]]]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [100, 100]
         largeur, hauteur = 0.174211, 0.101635
              position cg = -1.04585, 0.0493339
                 longueur = 0.415291
                 ruptures = [0, 40, 85]
              composantes = [u'shark.spl-5-#0', u'shark.spl-5-#1']
      nb pts ctl par comp = [41, 46]
[testNSplineComposee] (module testsplinecomposee.py)

    symetriser(1) : shark.spl
    -------------------------

[testNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = shark.spl-5
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0.0, -0.0), (1, 0.49999999999999994, 0.8660254037844387))), ('cubic', ((1, 0.49999999999999994, 0.8660254037844387), (2, 0.0, -0.0)))]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [100, 100]
         largeur, hauteur = 0.174211, 0.101635
              position cg = -1.04585, 0.062002
                 longueur = 0.415291
                 ruptures = [0, 40, 85]
              composantes = [u'shark.spl-5-#0', u'shark.spl-5-#1']
      nb pts ctl par comp = [41, 46]
[testNSplineComposee] (module testsplinecomposee.py)

    symetriser(1) : shark.spl
    -------------------------

[testNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = shark.spl
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [['cubic', ((2, 0, 0), (1, 0, -20))], ['cubic', ((1, 0, -20), (2, 0, 0))]]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [20, 10]
         largeur, hauteur = 1, 0.168724
              position cg = 0.388899, 0.0153355
                 longueur = 2.13403
                 ruptures = [0, 40, 85]
              composantes = [u'shark.spl-#0', u'shark.spl-#1']
      nb pts ctl par comp = [41, 46]
[testNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = shark.spl
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0.0, 0.0), (1, 0.0, -4.0))), ('cubic', ((1, 0.0, -4.0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [20, 10]
         largeur, hauteur = 0.2, 0.0337448
              position cg = 0.0777797, 0.0030671
                 longueur = 0.426806
                 ruptures = [0, 40, 85]
              composantes = [u'shark.spl-#0', u'shark.spl-#1']
      nb pts ctl par comp = [41, 46]
[testNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = shark.spl
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [['cubic', [(2, 0.0, 0.0), (1, 0.6945927106677213, -3.939231012048832)]], ['cubic', [(1, 0.6945927106677213, -3.939231012048832), (2, 0.0, 0.0)]]]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [20, 10]
         largeur, hauteur = 0.197132, 0.0415399
              position cg = 0.0776873, 0.000256216
                 longueur = 0.426806
                 ruptures = [0, 40, 85]
              composantes = [u'shark.spl-#0', u'shark.spl-#1']
      nb pts ctl par comp = [41, 46]
[testNSplineComposee] (module testsplinecomposee.py)
join_1 = <NSplineComposee>
                     name = shark.spl
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [['cubic', [(2, 0.0, 0.0), (1, 0.6945927106677213, -3.939231012048832)]], ['cubic', [(1, 0.6945927106677213, -3.939231012048832), (2, 0.0, 0.0)]]]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [20, 10]
         largeur, hauteur = 0.197132, 0.0415399
              position cg = 0.0776873, 0.000256216
                 longueur = 0.426806
                 ruptures = [0, 40, 85]
              composantes = [u'shark.spl-#0', u'shark.spl-#1']
      nb pts ctl par comp = [41, 46] ; R = [[ 0.19858339  0.01845904]
 [ 0.00162184 -0.01627059]
 [ 0.19858339  0.01845904]]
[testNSplineComposee] (module testsplinecomposee.py)
S = <NSplineComposee>
                     name = shark.spl
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [['cubic', [(2, 0.0, 0.0), (1, 0.6945927106677213, -3.939231012048832)]], ['cubic', [(1, 0.6945927106677213, -3.939231012048832), (2, 0.0, 0.0)]]]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [20, 10]
         largeur, hauteur = 0.197132, 0.0415399
              position cg = 0.0776873, 0.000256216
                 longueur = 0.426806
                 ruptures = [0, 40, 85]
              composantes = [u'shark.spl-#0', u'shark.spl-#1']
      nb pts ctl par comp = [41, 46] ; R = [[ 0.19858339  0.01845904]
 [ 0.00162184 -0.01627059]
 [ 0.19858339  0.01845904]]
[testNSplineComposee] (module testsplinecomposee.py)
join_1 = <NSplineComposee>
                     name = shark.spl
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [['cubic', [(1, 0.6945927106677213, -3.939231012048832), (2, 0.0, 0.0)]]]
    nb pts discretisation = [1000]
      mode echantillonage = ['courbure']
       nb pts echantillon = [10]
         largeur, hauteur = 0.197019, 0.0421014
              position cg = 0.0776941, 0.000257506
                 longueur = 0.416478
                 ruptures = [0, 85]
              composantes = [u'shark.spl-#0']
      nb pts ctl par comp = [86] ; R = [[0.19858339 0.01845904]
 [0.19858339 0.01845904]]
[testNSplineComposee] (module testsplinecomposee.py)
split_nba = <NSplineComposee>
                     name = shark.spl
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((1, 0.6945927106677213, -3.939231012048832), (2, 0, 0))), ('cubic', ((2, 0, 0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [10, 10]
         largeur, hauteur = 0.197022, 0.0427338
              position cg = 0.0776937, 0.00025757
                 longueur = 0.419173
                 ruptures = [0, 40, 85]
              composantes = [u'shark.spl-#0', u'shark.spl-#1']
      nb pts ctl par comp = [41, 46] ; R = [[ 0.19858339  0.01845904]
 [ 0.00162184 -0.01627059]
 [ 0.19858339  0.01845904]]
[testNSplineComposee] (module testsplinecomposee.py)
normal ; On tente la suppression d'un point anguleux (40)
[testNSplineComposee] (module testsplinecomposee.py)
points = [[0.19858339476725345, 0.01845904305460559], [20.0, 20.0], [0.19825962127922073, 0.018450357333938402], [0.19729029092544015, 0.018424467690711235], [0.19568136173263362, 0.018381871963098127], [0.1934427249284742, 0.018323378932985183], [0.19058814662069595, 0.01825007850167314], [0.18713518648395774, 0.01816330175053998], [0.18310509365908179, 0.018064572952267537], [0.17852268022593432, 0.017955555809770294], [0.17341617272871673, 0.01783799645268741], [0.16781704235550388, 0.017713665841079758], [0.16175981451716415, 0.0175843042114709], [0.15528185872901273, 0.017451570049397527], [0.14842315986459048, 0.017316995797856758], [0.14122607202678944, 0.017181952124270518], [0.13373506557498108, 0.017047626836737873], [0.12599651999843658, 0.01693136262912047], [0.11805434050066799, 0.01687127739515457], [0.10996443512046378, 0.016780317218941125], [0.10177234426210086, 0.01662491847841685], [0.09353028826294842, 0.016402051277655802], [0.08529167931827285, 0.01610678719751022], [0.07710848764356662, 0.015734740843598757], [0.06903082228597476, 0.015271894730928616], [0.06111107576280834, 0.014683786139946925], [0.053400842361028975, 0.013964327161036042], [0.045978152589702885, 0.012951812620682518], [0.03888753787861307, 0.011725373781198584], [0.03219309931107266, 0.01023766788360047], [0.02597286098891917, 0.008414830418719441], [0.020351459719348916, 0.00616280926889412], [0.015419674522646143, 0.003513686175079648], [0.01122288458583845, 0.0006061293516697937], [0.007899688897911178, -0.002543342258227984], [0.005392470093137966, -0.0056975344955454135], [0.0035763942050729136, -0.008634974255802345], [0.0023882440242419117, -0.011230194256862036], [0.001785192935873925, -0.013383998999023592], [0.0015867132023413416, -0.01497519979191817], [0.0015791435408903376, -0.015949725081205395], [0.0020833306012958824, -0.01755759303996191], [0.003128248946918391, -0.01843593304464827], [0.004406894869315253, -0.01894286133527917], [0.005763711460295459, -0.01917133856795713], [0.007132338547424524, -0.019300980221613827], [0.008509292347207292, -0.019340205732743296], [0.012010476715523757, -0.02119529365955743], [0.01228329332994113, -0.02138375713385632], [0.01312881499446221, -0.02188745263308525], [0.014625708198893986, -0.02251847612465265], [0.01684073101400875, -0.022968731320845395], [0.01972250455057331, -0.023071580825367446], [0.023213810340212387, -0.023076776870641785], [0.027278634523934503, -0.022973123270121694], [0.031890649889671246, -0.02273150414589744], [0.037006997175022115, -0.0222788490755156], [0.04258319829197976, -0.021626313205648184], [0.04857840010407645, -0.020759910004671867], [0.05495239050519381, -0.0196823236731116], [0.06167052986577031, -0.01847510334230065], [0.06867512485879497, -0.017115724183069923], [0.07590606177915987, -0.015546583615381136], [0.08331632979319009, -0.0137945259423761], [0.0908620507632106, -0.011911999213624583], [0.09849809714312295, -0.009949951055796984], [0.10617389891308751, -0.007931778598921224], [0.1138372428637289, -0.005872833096510423], [0.12143574734917803, -0.0037866805523328285], [0.1289160457879037, -0.0016783229719840931], [0.13622858661009535, 0.0004405026432959217], [0.14333378887203485, 0.0025154145678727485], [0.15018710152609488, 0.004509838472103417], [0.1567415182629816, 0.006411119886494148], [0.16295169086930567, 0.008209413974826036], [0.168775097584585, 0.009892861872622056], [0.17417189600237487, 0.01145017010326306], [0.17910511683243102, 0.01287113878461994], [0.1835409102342736, 0.014146770853330293], [0.18744882941052884, 0.015269039113769825], [0.19080204970244352, 0.01623088167041856], [0.193577553482852, 0.017026244410153095], [0.19575628859469865, 0.017650118783895472], [0.1973232993314522, 0.018098574083789617], [0.19826782914744, 0.01836878345825264], [0.19858339476725345, 0.01845904305460559]]
<NSplineComposee>
                     name = shark.spl
                     role = NSplineComposee
          nb pts controle = 90
                   closed = False
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0, 0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000]
      mode echantillonage = ['courbure']
       nb pts echantillon = [10]
         largeur, hauteur = 22.7758, 22.1117
              position cg = 10.0203, 8.6616
                 longueur = 130.632
                 ruptures = [0, 89]
              composantes = [u'shark.spl-#0']
      nb pts ctl par comp = [90]
[testNSplineComposee] (module testsplinecomposee.py)
=====================================
Fin testNSplineComposee : (shark.spl)
=====================================


[debugNSplineComposee] (module testsplinecomposee.py)
=====================================
debugNSplineComposee : (naca2415.spl)
=====================================


[debugNSplineComposee] (module testsplinecomposee.py)

    Constructeur vide
    -----------------

<NSplineComposee>
                     name = NSplineComposee
                     role = NSplineComposee
          nb pts controle = 1
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = []
    nb pts discretisation = []
      mode echantillonage = []
       nb pts echantillon = []
         largeur, hauteur = 0, 0
              position cg = 0, 0
                 longueur = 0
                 ruptures = [0]
              composantes = []
      nb pts ctl par comp = []
[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = naca2415.spl
                     role = NSplineComposee
          nb pts controle = 101
                   closed = False
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0, 0), (1, 0, -5))), ('cubic', ((1, 0, -5), (2, 0, 0)))]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [50, 40]
         largeur, hauteur = 1, 0.151184
              position cg = 0.41775, 0.0157192
                 longueur = 2.06364
                 ruptures = [0, 50, 100]
              composantes = [u'naca2415.spl-#0', u'naca2415.spl-#1']
      nb pts ctl par comp = [51, 51]
[debugNSplineComposee] (module testsplinecomposee.py)

    elaguer(eps=1, replace=True) : (naca2415.spl)
    ---------------------------------------------

[elaguer] (module splinesimple.py)
historique_distances = [417.03, 174.39, 85.98, 40.5, 19.39, 9.26, 6.05, 2.89, 2.29, 0.75]
[elaguer] (module splinesimple.py)
Apres ELAGAGE : dist = 0.75 mm/m ; 51 points => 12 points 
[elaguer] (module splinesimple.py)
historique_distances = [426.97, 180.38, 79.37, 36.69, 16.99, 8.31, 4.8, 1.54, 0.42]
[elaguer] (module splinesimple.py)
Apres ELAGAGE : dist = 0.42 mm/m ; 51 points => 11 points 
[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = naca2415.spl
                     role = NSplineComposee
          nb pts controle = 22
                   closed = False
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0, 0), (1, 0, -5))), ('cubic', ((1, 0, -5), (2, 0, 0)))]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [50, 40]
         largeur, hauteur = 1, 0.151211
              position cg = 0.417539, 0.015651
                 longueur = 2.06558
                 ruptures = [0, 11, 21]
              composantes = [u'naca2415.spl-#0', u'naca2415.spl-#1']
      nb pts ctl par comp = [12, 11]
[debugNSplineComposee] (module testsplinecomposee.py)

    echantillonner() (naca2415.spl)
    -------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
echantillon = [[1.0, -2.0770576047781002e-17], [0.9125364814571387, 0.02009734425222368], [0.8610592016586122, 0.0313225895318659], [0.8177543942540187, 0.04014618221712237], [0.7758242321062566, 0.04801894550629092], [0.731893845779323, 0.05559073261093518], [0.6856009709533553, 0.06289247255293383], [0.6369970214764615, 0.06988961438813167], [0.5907074915077113, 0.07592209124018943], [0.5472236091574022, 0.08095289297798464], [0.5059341556135011, 0.08509185862529148], [0.46642147712389426, 0.08841323632457569], [0.4284422095050951, 0.09096616211294922], [0.393060341128823, 0.09271793181586442], [0.3601317129888066, 0.09371712345182927], [0.3291192506793872, 0.09402427340415771], [0.29967588833472786, 0.09368023514251478], [0.2715436202968806, 0.09271430928611923], [0.2445239529299635, 0.0911473515593566], [0.21848913478211796, 0.0889965092815237], [0.1934447727256763, 0.08628829059289736], [0.17062732355579693, 0.08319771776296801], [0.14973221475736107, 0.07973442649797816], [0.13033170846778974, 0.07587924240754564], [0.11212713839712321, 0.07161547813215166], [0.09491019744672534, 0.06692873386934124], [0.07895553146615487, 0.061938490724282334], [0.06480356236235259, 0.05686173869556318], [0.052044505596206964, 0.051619873133338524], [0.040591873726916375, 0.0462497373216697], [0.03183558321539332, 0.0415171230728935], [0.024702020120548538, 0.03696746536683915], [0.018093247902109547, 0.03193228541205192], [0.010530978943640516, 0.025403185768994405], [0.007954225590014592, 0.02246176046909394], [0.004665748014844742, 0.016755223380651364], [0.003213064333402666, 0.014420520345870382], [0.002727742096982453, 0.013989817790380447], [0.002454387095955785, 0.013897424494229425], [0.00221296988579505, 0.013923139899341356], [0.0019393371942454112, 0.01406792292378438], [0.001545373248083746, 0.014460766206743454], [0.0009935650388832391, 0.01516276812528245], [0.0008380947780659033, 0.01529610418523181], [0.0007564396736083848, 0.015328428136226101], [0.0006932592156285436, 0.01532673201735486], [0.00063312145632773, 0.015296610959011858], [0.0005529124829970895, 0.015199218158617037], [0.00040278804681482725, 0.01474669353083158], [-1.0842021724855044e-19, 0.0], [0.0003811004161854429, -0.007597459290632773], [0.0005082476145998614, -0.007801004812162159], [0.0005888385439226087, -0.007833338355750868], [0.0006801953651324484, -0.007810888587211206], [0.0008778507400617231, -0.007632510130293312], [0.0014409520025583723, -0.006924696157819708], [0.001686234216216394, -0.0067633630413761045], [0.0018733515554680334, -0.006755122022824066], [0.002126380077047435, -0.006885130353377383], [0.0026496753014336313, -0.007538255115108139], [0.00493417642806876, -0.01245562589409225], [0.006800139417731316, -0.015474527160748274], [0.00887044659858188, -0.017584255890518916], [0.016011187245313974, -0.02311720095697258], [0.021336173525911502, -0.026691513165836987], [0.02716348667224918, -0.029838133794625556], [0.034325381104139775, -0.032967660989335915], [0.04415834937601914, -0.03651993741699299], [0.05542993400246447, -0.03994942399667163], [0.06801839852102072, -0.043133238048041735], [0.08251221344779218, -0.04614611988016202], [0.09876353879281215, -0.04890032752039348], [0.11623154412959029, -0.051243826175337674], [0.135381413987343, -0.05319208399627784], [0.15702330869889206, -0.054762700868523466], [0.18321554371063267, -0.05600384628509267], [0.21473334744766653, -0.05687214981262533], [0.24802136530172508, -0.05718545335784359], [0.28354680837942686, -0.05691285108698992], [0.3221226856576483, -0.05600378066407223], [0.3651514813564117, -0.05436630909953706], [0.4159577247942636, -0.0517855554361788], [0.4798307235488411, -0.04788911881475359], [0.547830267138055, -0.043143472645915726], [0.6192490101639274, -0.03755615946841889], [0.6949571966583845, -0.031026795544833046], [0.7762297027971788, -0.023406267657988658], [0.8652423152633619, -0.014441089089120316], [1.0, 2.087089182034596e-17]]
[debugNSplineComposee] (module testsplinecomposee.py)

    hardScale((0.2, 0.2)) : (naca2415.spl)
    --------------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = naca2415.spl
                     role = NSplineComposee
          nb pts controle = 22
                   closed = False
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0.0, 0.0), (1, 0.0, -1.0))), ('cubic', ((1, 0.0, -1.0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [50, 40]
         largeur, hauteur = 0.2, 0.0302422
              position cg = 0.300175, 0.011567
                 longueur = 0.413116
                 ruptures = [0, 11, 21]
              composantes = [u'naca2415.spl-#0', u'naca2415.spl-#1']
      nb pts ctl par comp = [12, 11]
[debugNSplineComposee] (module testsplinecomposee.py)

    translate((-1.5,0.05)) : (naca2415.spl)
    ---------------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = naca2415.spl
                     role = NSplineComposee
          nb pts controle = 22
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0.0, 0.0), (1, 0.0, -1.0))), ('cubic', ((1, 0.0, -1.0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [50, 40]
         largeur, hauteur = 0.2, 0.0302422
              position cg = -1.19982, 0.061567
                 longueur = 0.413116
                 ruptures = [0, 11, 21]
              composantes = [u'naca2415.spl-#0', u'naca2415.spl-#1']
      nb pts ctl par comp = [12, 11]
[debugNSplineComposee] (module testsplinecomposee.py)

    hardRotate(30) (naca2415.spl)
    -----------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = naca2415.spl
                     role = NSplineComposee
          nb pts controle = 22
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0.0, 0.0), (1, 0.0, -1.0))), ('cubic', ((1, 0.0, -1.0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [50, 40]
         largeur, hauteur = 0.2, 0.0302422
              position cg = -1.19982, 0.061567
                 longueur = 0.413116
                 ruptures = [0, 11, 21]
              composantes = [u'naca2415.spl-#0', u'naca2415.spl-#1']
      nb pts ctl par comp = [12, 11]
[debugNSplineComposee] (module testsplinecomposee.py)

    symetriser(1) (naca2415.spl)
    ----------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = naca2415.spl
                     role = NSplineComposee
          nb pts controle = 22
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [['cubic', [(2, 0.0, 0.0), (1, 0.49999999999999994, -0.8660254037844387)]], ['cubic', [(1, 0.49999999999999994, -0.8660254037844387), (2, 0.0, 0.0)]]]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [50, 40]
         largeur, hauteur = 0.174627, 0.102492
              position cg = -1.20427, 0.0761007
                 longueur = 0.413116
                 ruptures = [0, 11, 21]
              composantes = [u'naca2415.spl-#0', u'naca2415.spl-#1']
      nb pts ctl par comp = [12, 11]
[debugNSplineComposee] (module testsplinecomposee.py)

    reconstruction (naca2415.spl)
    -----------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = naca2415.spl
                     role = NSplineComposee
          nb pts controle = 101
                   closed = False
       nb_splines, n_bech = 0, 0
                  methode = [['cubic', ((2, 0, 0), (1, 0, -20))], ['cubic', ((1, 0, -20), (2, 0, 0))]]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [50, 50]
         largeur, hauteur = 1, 0.151184
              position cg = 0.417719, 0.0157162
                 longueur = 2.14724
                 ruptures = [0, 50, 100]
              composantes = [u'naca2415.spl-#0', u'naca2415.spl-#1']
      nb pts ctl par comp = [51, 51]
[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = naca2415.spl
                     role = NSplineComposee
          nb pts controle = 101
                   closed = False
       nb_splines, n_bech = 0, 0
                  methode = [['cubic', ((2, 0, 0), (1, 0, -20))], ['cubic', ((1, 0, -20), (2, 0, 0))]]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [50, 50]
         largeur, hauteur = 1, 0.151184
              position cg = 0.417719, 0.0157162
                 longueur = 2.14724
                 ruptures = [0, 50, 100]
              composantes = [u'naca2415.spl-#0', u'naca2415.spl-#1']
      nb pts ctl par comp = [51, 51]
[debugNSplineComposee] (module testsplinecomposee.py)

    hardScale((0.2,0.2), centre=np.asarray((0,0))) (naca2415.spl)
    -------------------------------------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = naca2415.spl
                     role = NSplineComposee
          nb pts controle = 101
                   closed = False
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0.0, 0.0), (1, 0.0, -4.0))), ('cubic', ((1, 0.0, -4.0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [50, 50]
         largeur, hauteur = 0.200001, 0.0302367
              position cg = 0.0835438, 0.00314324
                 longueur = 0.429449
                 ruptures = [0, 50, 100]
              composantes = [u'naca2415.spl-#0', u'naca2415.spl-#1']
      nb pts ctl par comp = [51, 51]
[debugNSplineComposee] (module testsplinecomposee.py)

    S.hardRotate(10) (naca2415.spl)
    -------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = naca2415.spl
                     role = NSplineComposee
          nb pts controle = 101
                   closed = False
       nb_splines, n_bech = 0, 0
                  methode = [['cubic', [(2, 0.0, 0.0), (1, 0.6945927106677213, -3.939231012048832)]], ['cubic', [(1, 0.6945927106677213, -3.939231012048832), (2, 0.0, 0.0)]]]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [50, 50]
         largeur, hauteur = 0.197807, 0.0426075
              position cg = 0.0836082, 9.61706e-05
                 longueur = 0.429449
                 ruptures = [0, 50, 100]
              composantes = [u'naca2415.spl-#0', u'naca2415.spl-#1']
      nb pts ctl par comp = [51, 51]
[debugNSplineComposee] (module testsplinecomposee.py)

    S.toDump() (naca2415.spl)
    -------------------------

{'classename': 'NSplineComposee',
 'cpoints': [[0.19884097230185266, 0.017223086042615188],
             [0.1986404958623992, 0.017237385049447145],
             [0.19803986334322873, 0.017279820434776196],
             [0.19704146217913782, 0.017349021140203025],
             [0.19564926155350282, 0.01744274745957263],
             [0.19386879759444905, 0.017557956496433293],
             [0.1917071526778734, 0.017690888726360238],
             [0.18917292889184528, 0.017837170994895585],
             [0.1862762157641818, 0.017991930501097236],
             [0.18302855241698918, 0.018149913899192575],
             [0.17944288438346717, 0.018305605624025743],
             [0.17553351539495543, 0.01845333991086712],
             [0.17131605450951587, 0.018587401711049948],
             [0.16680735899585006, 0.018702112751008356],
             [0.16202547339725484, 0.018791900270905448],
             [0.15698956517114662, 0.018851347420257753],
             [0.15171985722579168, 0.018875225780618152],
             [0.14623755755766343, 0.01885851192378685],
             [0.14056478603647776, 0.018796391195106052],
             [0.13472449820246407, 0.018684252941748292],
             [0.1287404057491271, 0.01851768210827046],
             [0.12263689318598042, 0.018292452440441757],
             [0.11643893003298478, 0.01800452644355226],
             [0.11017197781507347, 0.017650066731275987],
             [0.10386189112189792, 0.01722546250255512],
             [0.09753481209033803, 0.016727373651001225],
             [0.09121705786358013, 0.016152793522082112],
             [0.08493500087984528, 0.015499129685084413],
             [0.07871494223539484, 0.014764300389579458],
             [0.07253548308277584, 0.0139298874492849],
             [0.06646123285959209, 0.012984724749443803],
             [0.06053112223303202, 0.011932329871119194],
             [0.054770865233436494, 0.01077592794483369],
             [0.04920534453456011, 0.009520139445073477],
             [0.04385844142272573, 0.008170999474583789],
             [0.03875287398366618, 0.006735941067373361],
             [0.03391004826644363, 0.00522373793717773],
             [0.02934992693804145, 0.0036444037736546833],
             [0.025090919370848064, 0.002009047138405428],
             [0.021149796231906312, 0.0003296831287478174],
             [0.01754163051738232, -0.0013809948589831255],
             [0.014279765670887984, -0.0031098778432942973],
             [0.011375810029933459, -0.004843731121536469],
             [0.008839655460847182, -0.0065695023454515385],
             [0.006679516770984592, -0.00827463763785498],
             [0.004901987423777024, -0.009947394794849108],
             [0.0035121063090148563, -0.011577142322642148],
             [0.002513429898986605, -0.013154633270837431],
             [0.0019081040863724585, -0.014672243538048664],
             [0.0016969303591951035, -0.01612416550989099],
             [0.0018794216994110352, -0.01750654949077087],
             [0.0024437270197973093, -0.018781584539367426],
             [0.0033765895771360466, -0.019912457244876735],
             [0.0046733093370644185, -0.020898297516133847],
             [0.006327679275529713, -0.021738220649710246],
             [0.008332061083131156, -0.022431404792991858],
             [0.010677479132696552, -0.02297719636701137],
             [0.013353728157648043, -0.02337523722644116],
             [0.016349489369777218, -0.02362560607342471],
             [0.019652449394317414, -0.023728965772628865],
             [0.023249416439240597, -0.023686707785175367],
             [0.027126428536848962, -0.0235010849755532],
             [0.03126884946280564, -0.02317532455127863],
             [0.03566144898908284, -0.022713713848478655],
             [0.04028846538074283, -0.02212165303188929],
             [0.04513364940600726, -0.021405670466255324],
             [0.050180290492659756, -0.02057339844899885],
             [0.055411226931579585, -0.019633509066604955],
             [0.06080884311045326, -0.018595612034287737],
             [0.06635505758510232, -0.01747011838092868],
             [0.07203130631294334, -0.016268075632864403],
             [0.07781852555979776, -0.015000981625098815],
             [0.08370950568209112, -0.013677857753530543],
             [0.08971575806675024, -0.012287411005043854],
             [0.09576499472263188, -0.010841489168686207],
             [0.10183498497351635, -0.009351221242395258],
             [0.10790325746263825, -0.007827603723629768],
             [0.11394716557058458, -0.006281366963524963],
             [0.11994396165087616, -0.00472286793539489],
             [0.1258708795512552, -0.003162011788842493],
             [0.1317052244705596, -0.0016082026950987936],
             [0.13742446887888743, -7.032267604420743e-05],
             [0.14300635301372233, 0.001443264538673795],
             [0.14842898835804202, 0.0029246889652324516],
             [0.1536709625003317, 0.004366534506684972],
             [0.15871144385565203, 0.005761789794614296],
             [0.1635302848710217, 0.00710379595055668],
             [0.1681081225242251, 0.008386197262100221],
             [0.17242647512940568, 0.009602900142479456],
             [0.17646783466421895, 0.010748044769063896],
             [0.18021575401461504, 0.011815992551791893],
             [0.18365492868243188, 0.012801331160222716],
             [0.18677127261165, 0.013698897340353455],
             [0.18955198786080746, 0.014503816285504149],
             [0.19198562788612203, 0.015211554991055944],
             [0.19406215421048847, 0.015817985911334386],
             [0.19577298624814177, 0.016319456422280533],
             [0.19711104404443336, 0.016712859127953405],
             [0.19807078368492456, 0.016995697959700545],
             [0.1986482251356758, 0.017166145304939918],
             [0.19884097230185266, 0.017223086042615198]],
 'methode': [['cubic',
              [(2, 0.0, 0.0), (1, 0.6945927106677213, -3.939231012048832)]],
             ['cubic',
              [(1, 0.6945927106677213, -3.939231012048832), (2, 0.0, 0.0)]]],
 'mode': ['courbure', 'courbure'],
 'name': u'naca2415.spl',
 'nbpd': [1000, 1000],
 'nbpe': [50, 50],
 'role': 'NSplineComposee',
 'ruptures': [0, 50, 100]}
[debugNSplineComposee] (module testsplinecomposee.py)

    NSplineComposee(**dump0) (naca2415.spl)
    ---------------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
join_1 = <NSplineComposee>
                     name = naca2415.spl
                     role = NSplineComposee
          nb pts controle = 101
                   closed = False
       nb_splines, n_bech = 0, 0
                  methode = [['cubic', [(2, 0.0, 0.0), (1, 0.6945927106677213, -3.939231012048832)]], ['cubic', [(1, 0.6945927106677213, -3.939231012048832), (2, 0.0, 0.0)]]]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [50, 50]
         largeur, hauteur = 0.197807, 0.0426075
              position cg = 0.0836082, 9.61706e-05
                 longueur = 0.429449
                 ruptures = [0, 50, 100]
              composantes = [u'naca2415.spl-#0', u'naca2415.spl-#1']
      nb pts ctl par comp = [51, 51]
[debugNSplineComposee] (module testsplinecomposee.py)
Rupture = [[0.19884097230185266, 0.017223086042615188], [0.0018794216994110352, -0.01750654949077087], [0.19884097230185266, 0.017223086042615198]]
[debugNSplineComposee] (module testsplinecomposee.py)

    dump1 = S.toDump() (naca2415.spl)
    ---------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
dump_equal_dump1 = True
[debugNSplineComposee] (module testsplinecomposee.py)

    S.load(dump1) (naca2415.spl)
    ----------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = naca2415.spl
                     role = NSplineComposee
          nb pts controle = 101
                   closed = False
       nb_splines, n_bech = 0, 0
                  methode = [['cubic', [(2, 0.0, 0.0), (1, 0.6945927106677213, -3.939231012048832)]], ['cubic', [(1, 0.6945927106677213, -3.939231012048832), (2, 0.0, 0.0)]]]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [50, 50]
         largeur, hauteur = 0.197807, 0.0426075
              position cg = 0.0836082, 9.61706e-05
                 longueur = 0.429449
                 ruptures = [0, 50, 100]
              composantes = [u'naca2415.spl-#0', u'naca2415.spl-#1']
      nb pts ctl par comp = [51, 51]
[debugNSplineComposee] (module testsplinecomposee.py)
R = [[ 0.19884097  0.01722309]
 [ 0.00187942 -0.01750655]
 [ 0.19884097  0.01722309]]
[debugNSplineComposee] (module testsplinecomposee.py)
dump1_equal_dump2 = False
[debugNSplineComposee] (module testsplinecomposee.py)

    S.join(1) (naca2415.spl)
    ------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = naca2415.spl
                     role = NSplineComposee
          nb pts controle = 101
                   closed = False
       nb_splines, n_bech = 0, 0
                  methode = [['cubic', [(1, 0.6945927106677213, -3.939231012048832), (2, 0.0, 0.0)]]]
    nb pts discretisation = [1000]
      mode echantillonage = ['courbure']
       nb pts echantillon = [50]
         largeur, hauteur = 0.197142, 0.0426076
              position cg = 0.0836189, 9.87171e-05
                 longueur = 0.412971
                 ruptures = [0, 100]
              composantes = [u'naca2415.spl-#0']
      nb pts ctl par comp = [101]
[debugNSplineComposee] (module testsplinecomposee.py)
Ruptures = [[0.19884097 0.01722309]
 [0.19884097 0.01722309]]
[debugNSplineComposee] (module testsplinecomposee.py)

    S.split(len(S)/2) (naca2415.spl)
    --------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = naca2415.spl
                     role = NSplineComposee
          nb pts controle = 101
                   closed = False
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((1, 0.6945927106677213, -3.939231012048832), (2, 0, 0))), ('cubic', ((2, 0, 0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [50, 50]
         largeur, hauteur = 0.197144, 0.0426076
              position cg = 0.0836195, 9.88425e-05
                 longueur = 0.414677
                 ruptures = [0, 50, 100]
              composantes = [u'naca2415.spl-#0', u'naca2415.spl-#1']
      nb pts ctl par comp = [51, 51]
[debugNSplineComposee] (module testsplinecomposee.py)
ruptures = [[ 0.19884097  0.01722309]
 [ 0.00187942 -0.01750655]
 [ 0.19884097  0.01722309]]
[debugNSplineComposee] (module testsplinecomposee.py)

    removePoint(rupture[1]) (naca2415.spl)
    --------------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
normal ; On tente la suppression d'un point anguleux (50)
[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = naca2415.spl
                     role = NSplineComposee
          nb pts controle = 100
                   closed = False
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0, 0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000]
      mode echantillonage = ['courbure']
       nb pts echantillon = [50]
         largeur, hauteur = 0.197141, 0.0426076
              position cg = 0.0836166, 9.83803e-05
                 longueur = 0.411818
                 ruptures = [0, 99]
              composantes = [u'naca2415.spl-#0']
      nb pts ctl par comp = [100]
[debugNSplineComposee] (module testsplinecomposee.py)

    S.insertPoint((20, 20)) naca2415.spl
    ------------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = naca2415.spl
                     role = NSplineComposee
          nb pts controle = 101
                   closed = False
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0, 0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000]
      mode echantillonage = ['courbure']
       nb pts echantillon = [50]
         largeur, hauteur = 19.9851, 20.5184
              position cg = 10.9407, 9.36754
                 longueur = 59.0985
                 ruptures = [0, 100]
              composantes = [u'naca2415.spl-#0']
      nb pts ctl par comp = [101]
[debugNSplineComposee] (module testsplinecomposee.py)
points = [[0.19884097230185266, 0.017223086042615188], [20.0, 20.0], [0.1986404958623992, 0.017237385049447145], [0.19803986334322873, 0.017279820434776196], [0.19704146217913782, 0.017349021140203025], [0.19564926155350282, 0.01744274745957263], [0.19386879759444905, 0.017557956496433293], [0.1917071526778734, 0.017690888726360238], [0.18917292889184528, 0.017837170994895585], [0.1862762157641818, 0.017991930501097236], [0.18302855241698918, 0.018149913899192575], [0.17944288438346717, 0.018305605624025743], [0.17553351539495543, 0.01845333991086712], [0.17131605450951587, 0.018587401711049948], [0.16680735899585006, 0.018702112751008356], [0.16202547339725484, 0.018791900270905448], [0.15698956517114662, 0.018851347420257753], [0.15171985722579168, 0.018875225780618152], [0.14623755755766343, 0.01885851192378685], [0.14056478603647776, 0.018796391195106052], [0.13472449820246407, 0.018684252941748292], [0.1287404057491271, 0.01851768210827046], [0.12263689318598042, 0.018292452440441757], [0.11643893003298478, 0.01800452644355226], [0.11017197781507347, 0.017650066731275987], [0.10386189112189792, 0.01722546250255512], [0.09753481209033803, 0.016727373651001225], [0.09121705786358013, 0.016152793522082112], [0.08493500087984528, 0.015499129685084413], [0.07871494223539484, 0.014764300389579458], [0.07253548308277584, 0.0139298874492849], [0.06646123285959209, 0.012984724749443803], [0.06053112223303202, 0.011932329871119194], [0.054770865233436494, 0.01077592794483369], [0.04920534453456011, 0.009520139445073477], [0.04385844142272573, 0.008170999474583789], [0.03875287398366618, 0.006735941067373361], [0.03391004826644363, 0.00522373793717773], [0.02934992693804145, 0.0036444037736546833], [0.025090919370848064, 0.002009047138405428], [0.021149796231906312, 0.0003296831287478174], [0.01754163051738232, -0.0013809948589831255], [0.014279765670887984, -0.0031098778432942973], [0.011375810029933459, -0.004843731121536469], [0.008839655460847182, -0.0065695023454515385], [0.006679516770984592, -0.00827463763785498], [0.004901987423777024, -0.009947394794849108], [0.0035121063090148563, -0.011577142322642148], [0.002513429898986605, -0.013154633270837431], [0.0019081040863724585, -0.014672243538048664], [0.0016969303591951035, -0.01612416550989099], [0.0024437270197973093, -0.018781584539367426], [0.0033765895771360466, -0.019912457244876735], [0.0046733093370644185, -0.020898297516133847], [0.006327679275529713, -0.021738220649710246], [0.008332061083131156, -0.022431404792991858], [0.010677479132696552, -0.02297719636701137], [0.013353728157648043, -0.02337523722644116], [0.016349489369777218, -0.02362560607342471], [0.019652449394317414, -0.023728965772628865], [0.023249416439240597, -0.023686707785175367], [0.027126428536848962, -0.0235010849755532], [0.03126884946280564, -0.02317532455127863], [0.03566144898908284, -0.022713713848478655], [0.04028846538074283, -0.02212165303188929], [0.04513364940600726, -0.021405670466255324], [0.050180290492659756, -0.02057339844899885], [0.055411226931579585, -0.019633509066604955], [0.06080884311045326, -0.018595612034287737], [0.06635505758510232, -0.01747011838092868], [0.07203130631294334, -0.016268075632864403], [0.07781852555979776, -0.015000981625098815], [0.08370950568209112, -0.013677857753530543], [0.08971575806675024, -0.012287411005043854], [0.09576499472263188, -0.010841489168686207], [0.10183498497351635, -0.009351221242395258], [0.10790325746263825, -0.007827603723629768], [0.11394716557058458, -0.006281366963524963], [0.11994396165087616, -0.00472286793539489], [0.1258708795512552, -0.003162011788842493], [0.1317052244705596, -0.0016082026950987936], [0.13742446887888743, -7.032267604420743e-05], [0.14300635301372233, 0.001443264538673795], [0.14842898835804202, 0.0029246889652324516], [0.1536709625003317, 0.004366534506684972], [0.15871144385565203, 0.005761789794614296], [0.1635302848710217, 0.00710379595055668], [0.1681081225242251, 0.008386197262100221], [0.17242647512940568, 0.009602900142479456], [0.17646783466421895, 0.010748044769063896], [0.18021575401461504, 0.011815992551791893], [0.18365492868243188, 0.012801331160222716], [0.18677127261165, 0.013698897340353455], [0.18955198786080746, 0.014503816285504149], [0.19198562788612203, 0.015211554991055944], [0.19406215421048847, 0.015817985911334386], [0.19577298624814177, 0.016319456422280533], [0.19711104404443336, 0.016712859127953405], [0.19807078368492456, 0.016995697959700545], [0.1986482251356758, 0.017166145304939918], [0.19884097230185266, 0.017223086042615198]]
[debugNSplineComposee] (module testsplinecomposee.py)

    S.insertPoint(pt,50) naca2415.spl
    ---------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = naca2415.spl
                     role = NSplineComposee
          nb pts controle = 102
                   closed = False
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0, 0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000]
      mode echantillonage = ['courbure']
       nb pts echantillon = [50]
         largeur, hauteur = 20.3056, 22.8252
              position cg = 6.05334, 10.7427
                 longueur = 122.724
                 ruptures = [0, 101]
              composantes = [u'naca2415.spl-#0']
      nb pts ctl par comp = [102]
[debugNSplineComposee] (module testsplinecomposee.py)

    S[0] = (2,0.5) (naca2415.spl)
    -----------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = naca2415.spl
                     role = NSplineComposee
          nb pts controle = 102
                   closed = False
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0, 0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000]
      mode echantillonage = ['courbure']
       nb pts echantillon = [50]
         largeur, hauteur = 20.3054, 22.8251
              position cg = 6.62415, 10.1863
                 longueur = 120.881
                 ruptures = [0, 101]
              composantes = [u'naca2415.spl-#0']
      nb pts ctl par comp = [102]
[debugNSplineComposee] (module testsplinecomposee.py)

    S[len(S)-1] = S[0] (naca2415.spl)
    ---------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = naca2415.spl
                     role = NSplineComposee
          nb pts controle = 102
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0, 0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000]
      mode echantillonage = ['courbure']
       nb pts echantillon = [50]
         largeur, hauteur = 20.3057, 22.8253
              position cg = 6.62492, 10.1877
                 longueur = 122.746
                 ruptures = [0, 101]
              composantes = [u'naca2415.spl-#0']
      nb pts ctl par comp = [102]
[debugNSplineComposee] (module testsplinecomposee.py)

    S.appendPoint((2,1.5)) (naca2415.spl)
    -------------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = naca2415.spl
                     role = NSplineComposee
          nb pts controle = 103
                   closed = False
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0, 0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000]
      mode echantillonage = ['courbure']
       nb pts echantillon = [50]
         largeur, hauteur = 20.3055, 22.8253
              position cg = 6.61122, 10.1616
                 longueur = 123.81
                 ruptures = [0, 102]
              composantes = [u'naca2415.spl-#0']
      nb pts ctl par comp = [103]
[debugNSplineComposee] (module testsplinecomposee.py)

    S.insertPoint((2,-2)) (naca2415.spl)
    ------------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = naca2415.spl
                     role = NSplineComposee
          nb pts controle = 104
                   closed = False
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0, 0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000]
      mode echantillonage = ['courbure']
       nb pts echantillon = [50]
         largeur, hauteur = 20.3055, 22.8672
              position cg = 6.50967, 9.9442
                 longueur = 127.302
                 ruptures = [0, 103]
              composantes = [u'naca2415.spl-#0']
      nb pts ctl par comp = [104]
[debugNSplineComposee] (module testsplinecomposee.py)

    S.insertPoint((6,0)) (naca2415.spl)
    -----------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = naca2415.spl
                     role = NSplineComposee
          nb pts controle = 105
                   closed = False
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0, 0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000]
      mode echantillonage = ['courbure']
       nb pts echantillon = [50]
         largeur, hauteur = 20.3245, 22.8647
              position cg = 9.90413, 9.25817
                 longueur = 129.26
                 ruptures = [0, 104]
              composantes = [u'naca2415.spl-#0']
      nb pts ctl par comp = [105]
[debugNSplineComposee] (module testsplinecomposee.py)

    S.removePoint(3) (naca2415.spl)
    -------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = naca2415.spl
                     role = NSplineComposee
          nb pts controle = 104
                   closed = False
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0, 0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000]
      mode echantillonage = ['courbure']
       nb pts echantillon = [50]
         largeur, hauteur = 20.3245, 22.8647
              position cg = 9.90446, 9.25736
                 longueur = 129.26
                 ruptures = [0, 103]
              composantes = [u'naca2415.spl-#0']
      nb pts ctl par comp = [104]
[debugNSplineComposee] (module testsplinecomposee.py)

    S._update() (naca2415.spl)
    --------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = naca2415.spl
                     role = NSplineComposee
          nb pts controle = 104
                   closed = False
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0, 0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000]
      mode echantillonage = ['courbure']
       nb pts echantillon = [50]
         largeur, hauteur = 20.3245, 22.8647
              position cg = 9.90446, 9.25736
                 longueur = 129.258
                 ruptures = [0, 103]
              composantes = [u'naca2415.spl-#0']
      nb pts ctl par comp = [104]
[debugNSplineComposee] (module testsplinecomposee.py)
=======================================
Fin debugNSplineComposee : naca2415.spl
=======================================


[testNSplineComposee] (module testsplinecomposee.py)
====================================
testNSplineComposee : (naca2415.spl)
====================================


[testNSplineComposee] (module testsplinecomposee.py)

    1. Constructeur vide
    --------------------

[testNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = vide
                     role = NSplineComposee
          nb pts controle = 1
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = []
    nb pts discretisation = []
      mode echantillonage = []
       nb pts echantillon = []
         largeur, hauteur = 0, 0
              position cg = 0, 0
                 longueur = 0
                 ruptures = [0]
              composantes = []
      nb pts ctl par comp = []
[testNSplineComposee] (module testsplinecomposee.py)

    methode-0 : [('cubic', 'natural'), ('cubic', 'natural')] (naca2415.spl)
    -----------------------------------------------------------------------

[testNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = naca2415.spl-1
                     role = NSplineComposee
          nb pts controle = 101
                   closed = False
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', 'natural'), ('cubic', 'natural')]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [100, 100]
         largeur, hauteur = 1.00002, 0.151184
              position cg = 0.417761, 0.0157198
                 longueur = 2.05908
                 ruptures = [0, 50, 100]
              composantes = [u'naca2415.spl-1-#0', u'naca2415.spl-1-#1']
      nb pts ctl par comp = [51, 51]
[testNSplineComposee] (module testsplinecomposee.py)

    methode-1 : [('cubic', ((1, 0, 3.14), (1, 0, -3.14))), ('cubic', ((1, 0, 0), (1, 0, 0)))] (naca2415.spl)
    --------------------------------------------------------------------------------------------------------

[testNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = naca2415.spl-2
                     role = NSplineComposee
          nb pts controle = 101
                   closed = False
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((1, 0, 3.14), (1, 0, -3.14))), ('cubic', ((1, 0, 0), (1, 0, 0)))]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [100, 100]
         largeur, hauteur = 1, 0.151184
              position cg = 0.41776, 0.0157199
                 longueur = 2.06002
                 ruptures = [0, 50, 100]
              composantes = [u'naca2415.spl-2-#0', u'naca2415.spl-2-#1']
      nb pts ctl par comp = [51, 51]
[testNSplineComposee] (module testsplinecomposee.py)

    methode-2 : [('cubic', 'not-a-knot'), ('cubic', 'not-a-knot')] (naca2415.spl)
    -----------------------------------------------------------------------------

[testNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = naca2415.spl-3
                     role = NSplineComposee
          nb pts controle = 101
                   closed = False
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', 'not-a-knot'), ('cubic', 'not-a-knot')]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [100, 100]
         largeur, hauteur = 1.00013, 0.151184
              position cg = 0.417758, 0.0157197
                 longueur = 2.05911
                 ruptures = [0, 50, 100]
              composantes = [u'naca2415.spl-3-#0', u'naca2415.spl-3-#1']
      nb pts ctl par comp = [51, 51]
[testNSplineComposee] (module testsplinecomposee.py)

    methode-3 : [['cubic', ((1, 0, 2), (1, 0, -2))], ['cubic', ((1, 1, 0), (1, 1, 0))]] (naca2415.spl)
    --------------------------------------------------------------------------------------------------

[testNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = naca2415.spl-4
                     role = NSplineComposee
          nb pts controle = 101
                   closed = False
       nb_splines, n_bech = 0, 0
                  methode = [['cubic', ((1, 0, 2), (1, 0, -2))], ['cubic', ((1, 1, 0), (1, 1, 0))]]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [100, 100]
         largeur, hauteur = 1, 0.151184
              position cg = 0.417775, 0.0157205
                 longueur = 2.06025
                 ruptures = [0, 50, 100]
              composantes = [u'naca2415.spl-4-#0', u'naca2415.spl-4-#1']
      nb pts ctl par comp = [51, 51]
[testNSplineComposee] (module testsplinecomposee.py)

    methode-4 : [('cubic', ((2, 0, 0), (1, 0, -5))), ('cubic', ((1, 0, -5), (2, 0, 0)))] (naca2415.spl)
    ---------------------------------------------------------------------------------------------------

[testNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = naca2415.spl-5
                     role = NSplineComposee
          nb pts controle = 101
                   closed = False
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0, 0), (1, 0, -5))), ('cubic', ((1, 0, -5), (2, 0, 0)))]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [100, 100]
         largeur, hauteur = 1, 0.151184
              position cg = 0.41775, 0.0157192
                 longueur = 2.06364
                 ruptures = [0, 50, 100]
              composantes = [u'naca2415.spl-5-#0', u'naca2415.spl-5-#1']
      nb pts ctl par comp = [51, 51]
[testNSplineComposee] (module testsplinecomposee.py)

    hardScale : naca2415.spl
    ------------------------

[testNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = naca2415.spl-5
                     role = NSplineComposee
          nb pts controle = 101
                   closed = False
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0.0, 0.0), (1, 0.0, -1.0))), ('cubic', ((1, 0.0, -1.0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [100, 100]
         largeur, hauteur = 0.200001, 0.0302367
              position cg = 0.48751, 0.0110945
                 longueur = 0.412728
                 ruptures = [0, 50, 100]
              composantes = [u'naca2415.spl-5-#0', u'naca2415.spl-5-#1']
      nb pts ctl par comp = [51, 51]
[testNSplineComposee] (module testsplinecomposee.py)

    translate((-1.5,0.05)) : naca2415.spl
    -------------------------------------

[testNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = naca2415.spl-5
                     role = NSplineComposee
          nb pts controle = 101
                   closed = False
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0.0, 0.0), (1, 0.0, -1.0))), ('cubic', ((1, 0.0, -1.0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [100, 100]
         largeur, hauteur = 0.200001, 0.0302367
              position cg = -1.01249, 0.0610945
                 longueur = 0.412728
                 ruptures = [0, 50, 100]
              composantes = [u'naca2415.spl-5-#0', u'naca2415.spl-5-#1']
      nb pts ctl par comp = [51, 51]
[testNSplineComposee] (module testsplinecomposee.py)

    hardRotate(30) : naca2415.spl
    -----------------------------

[testNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = naca2415.spl-5
                     role = NSplineComposee
          nb pts controle = 101
                   closed = False
       nb_splines, n_bech = 0, 0
                  methode = [['cubic', [(2, 0.0, 0.0), (1, 0.49999999999999994, -0.8660254037844387)]], ['cubic', [(1, 0.49999999999999994, -0.8660254037844387), (2, 0.0, 0.0)]]]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [100, 100]
         largeur, hauteur = 0.174209, 0.10248
              position cg = -1.01073, 0.0522196
                 longueur = 0.412728
                 ruptures = [0, 50, 100]
              composantes = [u'naca2415.spl-5-#0', u'naca2415.spl-5-#1']
      nb pts ctl par comp = [51, 51]
[testNSplineComposee] (module testsplinecomposee.py)

    symetriser(1) : naca2415.spl
    ----------------------------

[testNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = naca2415.spl-5
                     role = NSplineComposee
          nb pts controle = 101
                   closed = False
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0.0, -0.0), (1, 0.49999999999999994, 0.8660254037844387))), ('cubic', ((1, 0.49999999999999994, 0.8660254037844387), (2, 0.0, -0.0)))]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [100, 100]
         largeur, hauteur = 0.174209, 0.10248
              position cg = -1.01073, 0.0676571
                 longueur = 0.412728
                 ruptures = [0, 50, 100]
              composantes = [u'naca2415.spl-5-#0', u'naca2415.spl-5-#1']
      nb pts ctl par comp = [51, 51]
[testNSplineComposee] (module testsplinecomposee.py)

    symetriser(1) : naca2415.spl
    ----------------------------

[testNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = naca2415.spl
                     role = NSplineComposee
          nb pts controle = 101
                   closed = False
       nb_splines, n_bech = 0, 0
                  methode = [['cubic', ((2, 0, 0), (1, 0, -20))], ['cubic', ((1, 0, -20), (2, 0, 0))]]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [20, 10]
         largeur, hauteur = 1, 0.151184
              position cg = 0.417719, 0.0157162
                 longueur = 2.14724
                 ruptures = [0, 50, 100]
              composantes = [u'naca2415.spl-#0', u'naca2415.spl-#1']
      nb pts ctl par comp = [51, 51]
[testNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = naca2415.spl
                     role = NSplineComposee
          nb pts controle = 101
                   closed = False
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0.0, 0.0), (1, 0.0, -4.0))), ('cubic', ((1, 0.0, -4.0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [20, 10]
         largeur, hauteur = 0.200001, 0.0302367
              position cg = 0.0835438, 0.00314324
                 longueur = 0.429449
                 ruptures = [0, 50, 100]
              composantes = [u'naca2415.spl-#0', u'naca2415.spl-#1']
      nb pts ctl par comp = [51, 51]
[testNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = naca2415.spl
                     role = NSplineComposee
          nb pts controle = 101
                   closed = False
       nb_splines, n_bech = 0, 0
                  methode = [['cubic', [(2, 0.0, 0.0), (1, 0.6945927106677213, -3.939231012048832)]], ['cubic', [(1, 0.6945927106677213, -3.939231012048832), (2, 0.0, 0.0)]]]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [20, 10]
         largeur, hauteur = 0.197807, 0.0426075
              position cg = 0.0836082, 9.61706e-05
                 longueur = 0.429449
                 ruptures = [0, 50, 100]
              composantes = [u'naca2415.spl-#0', u'naca2415.spl-#1']
      nb pts ctl par comp = [51, 51]
[testNSplineComposee] (module testsplinecomposee.py)
join_1 = <NSplineComposee>
                     name = naca2415.spl
                     role = NSplineComposee
          nb pts controle = 101
                   closed = False
       nb_splines, n_bech = 0, 0
                  methode = [['cubic', [(2, 0.0, 0.0), (1, 0.6945927106677213, -3.939231012048832)]], ['cubic', [(1, 0.6945927106677213, -3.939231012048832), (2, 0.0, 0.0)]]]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [20, 10]
         largeur, hauteur = 0.197807, 0.0426075
              position cg = 0.0836082, 9.61706e-05
                 longueur = 0.429449
                 ruptures = [0, 50, 100]
              composantes = [u'naca2415.spl-#0', u'naca2415.spl-#1']
      nb pts ctl par comp = [51, 51] ; R = [[ 0.19884097  0.01722309]
 [ 0.00187942 -0.01750655]
 [ 0.19884097  0.01722309]]
[testNSplineComposee] (module testsplinecomposee.py)
S = <NSplineComposee>
                     name = naca2415.spl
                     role = NSplineComposee
          nb pts controle = 101
                   closed = False
       nb_splines, n_bech = 0, 0
                  methode = [['cubic', [(2, 0.0, 0.0), (1, 0.6945927106677213, -3.939231012048832)]], ['cubic', [(1, 0.6945927106677213, -3.939231012048832), (2, 0.0, 0.0)]]]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [20, 10]
         largeur, hauteur = 0.197807, 0.0426075
              position cg = 0.0836082, 9.61706e-05
                 longueur = 0.429449
                 ruptures = [0, 50, 100]
              composantes = [u'naca2415.spl-#0', u'naca2415.spl-#1']
      nb pts ctl par comp = [51, 51] ; R = [[ 0.19884097  0.01722309]
 [ 0.00187942 -0.01750655]
 [ 0.19884097  0.01722309]]
[testNSplineComposee] (module testsplinecomposee.py)
join_1 = <NSplineComposee>
                     name = naca2415.spl
                     role = NSplineComposee
          nb pts controle = 101
                   closed = False
       nb_splines, n_bech = 0, 0
                  methode = [['cubic', [(1, 0.6945927106677213, -3.939231012048832), (2, 0.0, 0.0)]]]
    nb pts discretisation = [1000]
      mode echantillonage = ['courbure']
       nb pts echantillon = [10]
         largeur, hauteur = 0.197142, 0.0426076
              position cg = 0.0836189, 9.87171e-05
                 longueur = 0.412971
                 ruptures = [0, 100]
              composantes = [u'naca2415.spl-#0']
      nb pts ctl par comp = [101] ; R = [[0.19884097 0.01722309]
 [0.19884097 0.01722309]]
[testNSplineComposee] (module testsplinecomposee.py)
split_nba = <NSplineComposee>
                     name = naca2415.spl
                     role = NSplineComposee
          nb pts controle = 101
                   closed = False
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((1, 0.6945927106677213, -3.939231012048832), (2, 0, 0))), ('cubic', ((2, 0, 0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [10, 10]
         largeur, hauteur = 0.197144, 0.0426076
              position cg = 0.0836195, 9.88425e-05
                 longueur = 0.414677
                 ruptures = [0, 50, 100]
              composantes = [u'naca2415.spl-#0', u'naca2415.spl-#1']
      nb pts ctl par comp = [51, 51] ; R = [[ 0.19884097  0.01722309]
 [ 0.00187942 -0.01750655]
 [ 0.19884097  0.01722309]]
[testNSplineComposee] (module testsplinecomposee.py)
normal ; On tente la suppression d'un point anguleux (50)
[testNSplineComposee] (module testsplinecomposee.py)
points = [[0.19884097230185266, 0.017223086042615188], [20.0, 20.0], [0.1986404958623992, 0.017237385049447145], [0.19803986334322873, 0.017279820434776196], [0.19704146217913782, 0.017349021140203025], [0.19564926155350282, 0.01744274745957263], [0.19386879759444905, 0.017557956496433293], [0.1917071526778734, 0.017690888726360238], [0.18917292889184528, 0.017837170994895585], [0.1862762157641818, 0.017991930501097236], [0.18302855241698918, 0.018149913899192575], [0.17944288438346717, 0.018305605624025743], [0.17553351539495543, 0.01845333991086712], [0.17131605450951587, 0.018587401711049948], [0.16680735899585006, 0.018702112751008356], [0.16202547339725484, 0.018791900270905448], [0.15698956517114662, 0.018851347420257753], [0.15171985722579168, 0.018875225780618152], [0.14623755755766343, 0.01885851192378685], [0.14056478603647776, 0.018796391195106052], [0.13472449820246407, 0.018684252941748292], [0.1287404057491271, 0.01851768210827046], [0.12263689318598042, 0.018292452440441757], [0.11643893003298478, 0.01800452644355226], [0.11017197781507347, 0.017650066731275987], [0.10386189112189792, 0.01722546250255512], [0.09753481209033803, 0.016727373651001225], [0.09121705786358013, 0.016152793522082112], [0.08493500087984528, 0.015499129685084413], [0.07871494223539484, 0.014764300389579458], [0.07253548308277584, 0.0139298874492849], [0.06646123285959209, 0.012984724749443803], [0.06053112223303202, 0.011932329871119194], [0.054770865233436494, 0.01077592794483369], [0.04920534453456011, 0.009520139445073477], [0.04385844142272573, 0.008170999474583789], [0.03875287398366618, 0.006735941067373361], [0.03391004826644363, 0.00522373793717773], [0.02934992693804145, 0.0036444037736546833], [0.025090919370848064, 0.002009047138405428], [0.021149796231906312, 0.0003296831287478174], [0.01754163051738232, -0.0013809948589831255], [0.014279765670887984, -0.0031098778432942973], [0.011375810029933459, -0.004843731121536469], [0.008839655460847182, -0.0065695023454515385], [0.006679516770984592, -0.00827463763785498], [0.004901987423777024, -0.009947394794849108], [0.0035121063090148563, -0.011577142322642148], [0.002513429898986605, -0.013154633270837431], [0.0019081040863724585, -0.014672243538048664], [0.0016969303591951035, -0.01612416550989099], [0.0024437270197973093, -0.018781584539367426], [0.0033765895771360466, -0.019912457244876735], [0.0046733093370644185, -0.020898297516133847], [0.006327679275529713, -0.021738220649710246], [0.008332061083131156, -0.022431404792991858], [0.010677479132696552, -0.02297719636701137], [0.013353728157648043, -0.02337523722644116], [0.016349489369777218, -0.02362560607342471], [0.019652449394317414, -0.023728965772628865], [0.023249416439240597, -0.023686707785175367], [0.027126428536848962, -0.0235010849755532], [0.03126884946280564, -0.02317532455127863], [0.03566144898908284, -0.022713713848478655], [0.04028846538074283, -0.02212165303188929], [0.04513364940600726, -0.021405670466255324], [0.050180290492659756, -0.02057339844899885], [0.055411226931579585, -0.019633509066604955], [0.06080884311045326, -0.018595612034287737], [0.06635505758510232, -0.01747011838092868], [0.07203130631294334, -0.016268075632864403], [0.07781852555979776, -0.015000981625098815], [0.08370950568209112, -0.013677857753530543], [0.08971575806675024, -0.012287411005043854], [0.09576499472263188, -0.010841489168686207], [0.10183498497351635, -0.009351221242395258], [0.10790325746263825, -0.007827603723629768], [0.11394716557058458, -0.006281366963524963], [0.11994396165087616, -0.00472286793539489], [0.1258708795512552, -0.003162011788842493], [0.1317052244705596, -0.0016082026950987936], [0.13742446887888743, -7.032267604420743e-05], [0.14300635301372233, 0.001443264538673795], [0.14842898835804202, 0.0029246889652324516], [0.1536709625003317, 0.004366534506684972], [0.15871144385565203, 0.005761789794614296], [0.1635302848710217, 0.00710379595055668], [0.1681081225242251, 0.008386197262100221], [0.17242647512940568, 0.009602900142479456], [0.17646783466421895, 0.010748044769063896], [0.18021575401461504, 0.011815992551791893], [0.18365492868243188, 0.012801331160222716], [0.18677127261165, 0.013698897340353455], [0.18955198786080746, 0.014503816285504149], [0.19198562788612203, 0.015211554991055944], [0.19406215421048847, 0.015817985911334386], [0.19577298624814177, 0.016319456422280533], [0.19711104404443336, 0.016712859127953405], [0.19807078368492456, 0.016995697959700545], [0.1986482251356758, 0.017166145304939918], [0.19884097230185266, 0.017223086042615198]]
<NSplineComposee>
                     name = naca2415.spl
                     role = NSplineComposee
          nb pts controle = 105
                   closed = False
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0, 0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000]
      mode echantillonage = ['courbure']
       nb pts echantillon = [10]
         largeur, hauteur = 20.3245, 22.8647
              position cg = 9.90413, 9.25817
                 longueur = 129.26
                 ruptures = [0, 104]
              composantes = [u'naca2415.spl-#0']
      nb pts ctl par comp = [105]
[testNSplineComposee] (module testsplinecomposee.py)
========================================
Fin testNSplineComposee : (naca2415.spl)
========================================


[debugNSplineComposee] (module testsplinecomposee.py)
======================================
debugNSplineComposee : (spline-0#.pkl)
======================================


[debugNSplineComposee] (module testsplinecomposee.py)

    Constructeur vide
    -----------------

<NSplineComposee>
                     name = NSplineComposee
                     role = NSplineComposee
          nb pts controle = 1
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = []
    nb pts discretisation = []
      mode echantillonage = []
       nb pts echantillon = []
         largeur, hauteur = 0, 0
              position cg = 0, 0
                 longueur = 0
                 ruptures = [0]
              composantes = []
      nb pts ctl par comp = []
[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = spline-0#.pkl
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0, 0), (1, 0, -5))), ('cubic', ((1, 0, -5), (2, 0, 0)))]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [50, 40]
         largeur, hauteur = 1, 0.193929
              position cg = 0.378875, 0.00211524
                 longueur = 2.08959
                 ruptures = [0, 40, 85]
              composantes = [u'spline-0#.pkl-#0', u'spline-0#.pkl-#1']
      nb pts ctl par comp = [41, 46]
[debugNSplineComposee] (module testsplinecomposee.py)

    elaguer(eps=1, replace=True) : (spline-0#.pkl)
    ----------------------------------------------

[elaguer] (module splinesimple.py)
historique_distances = [414.78, 160.87, 71.08, 36.56, 17.32, 12.27, 5.7, 3.79, 2.32, 2.08, 1.21, 0.76]
[elaguer] (module splinesimple.py)
Apres ELAGAGE : dist = 0.76 mm/m ; 41 points => 14 points 
[elaguer] (module splinesimple.py)
historique_distances = [414.66, 178.69, 88.1, 33.12, 29.0, 11.54, 5.69, 1.82, 2.64, 1.47, 0.95]
[elaguer] (module splinesimple.py)
Apres ELAGAGE : dist = 0.95 mm/m ; 46 points => 13 points 
[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = spline-0#.pkl
                     role = NSplineComposee
          nb pts controle = 26
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0, 0), (1, 0, -5))), ('cubic', ((1, 0, -5), (2, 0, 0)))]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [50, 40]
         largeur, hauteur = 1, 0.193369
              position cg = 0.379756, 0.00208842
                 longueur = 2.09059
                 ruptures = [0, 13, 25]
              composantes = [u'spline-0#.pkl-#0', u'spline-0#.pkl-#1']
      nb pts ctl par comp = [14, 13]
[debugNSplineComposee] (module testsplinecomposee.py)

    echantillonner() (spline-0#.pkl)
    --------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
echantillon = [[1.0, 0.0], [0.8891418458205159, 0.00950664059246881], [0.8241065780893738, 0.01570562760524625], [0.7696347812257205, 0.021538334555701526], [0.7204333924978681, 0.027471532936248606], [0.672545525096616, 0.03393110619657099], [0.6256163896464044, 0.040946439282213955], [0.5795932818242299, 0.048513035401255906], [0.5310784491785587, 0.05723711933571906], [0.44695595524370707, 0.07309769393655868], [0.3976280086662947, 0.08185440350799157], [0.34838125114391433, 0.08989758091627312], [0.30182119867219376, 0.09685871795475196], [0.27149949346231483, 0.10082668753110718], [0.2472363860153241, 0.10336537620601834], [0.2259389516857354, 0.10494195365096329], [0.2065184652203255, 0.10572054172997516], [0.1884046168394041, 0.10578165455298744], [0.17126574587742963, 0.10516793911810218], [0.15516384500383806, 0.10392213293744229], [0.14017461816069557, 0.10208812471601818], [0.1261930062837371, 0.09969919960752696], [0.11309672502050222, 0.09677858394769702], [0.10080519757133291, 0.09334835107410917], [0.08922208713628993, 0.08941637733695605], [0.07827951519108452, 0.08498771705701572], [0.06783596674521854, 0.08002646539967762], [0.057910394520877886, 0.07455724096188425], [0.048544694584923755, 0.06861872040876166], [0.03976487729522813, 0.062245080262647336], [0.031464803748404116, 0.05536948483373497], [0.02380898510508279, 0.048160533158749644], [0.017971927735640998, 0.04183660575653233], [0.01326637930605598, 0.035747914810752505], [0.008498037109473711, 0.028274086631351062], [0.005087891153061475, 0.022028094934241665], [0.003516921679664259, 0.01798086210620182], [0.0016971769782871203, 0.00919649422107709], [0.0011206562351147354, 0.006743747757739395], [0.0009834457144535051, 0.006511419793269777], [0.0009195079440538239, 0.0064694143710641635], [0.0008701774381662531, 0.006468560264822478], [0.0008107284657677532, 0.006505978067131255], [0.0006707878959529258, 0.006729284685445411], [0.00042093709128068513, 0.0072448865305027015], [0.00036168304820483407, 0.007303880336368927], [0.0003315337559591886, 0.007310304061277726], [0.00030230552421760796, 0.007296289245358696], [0.00024536703457941845, 0.007192606896472126], [-1.0842021724855044e-19, 0.0], [0.00035644862761962103, -0.008679294238669621], [0.0004592623246258791, -0.008817809359489195], [0.0005327681466244933, -0.008832314740800814], [0.0006467456466258719, -0.008771704051514295], [0.0011764436786299434, -0.008099579141184468], [0.001581851685989839, -0.007747836457096799], [0.0018758613226495164, -0.007712487215932706], [0.002344773678935332, -0.00796295308271688], [0.003880318083094649, -0.010018649206638064], [0.007601811845447761, -0.015456847537391542], [0.010309842188861213, -0.01761561691949004], [0.014993335653275524, -0.019826063370456372], [0.026616532469787655, -0.02406573997520404], [0.032750177132570495, -0.026912525812415815], [0.037742422665273244, -0.03026593650968116], [0.04385404602743672, -0.03570138915767021], [0.05369534478861791, -0.04542452775099455], [0.05918924722117225, -0.049846210327577446], [0.06532480834911718, -0.053579799832726316], [0.07303890962435028, -0.057127988003153274], [0.08394418256961969, -0.060924715121230454], [0.11653440286772909, -0.07027334619724225], [0.13704834578867048, -0.07543958636257042], [0.15353793709883864, -0.07874572058934039], [0.17092543160291862, -0.08125233821247689], [0.1931138276839321, -0.08339775036470282], [0.22750089707782964, -0.08558364639927211], [0.26400995119012155, -0.08700955179486533], [0.30044142780199795, -0.08752707876032095], [0.3367814660089027, -0.08714055908098153], [0.3730472682852259, -0.08585283669871266], [0.40920451627531834, -0.0836674308286848], [0.44527047301989925, -0.08058487551578199], [0.48658647664877724, -0.07602107494266823], [0.6051132022139678, -0.06115457030123257], [0.6785756234727679, -0.05131880908761625], [0.7548170409394694, -0.040128019929877835], [0.8456085490878391, -0.02578942052548065], [1.0, -1.734723475976807e-18]]
[debugNSplineComposee] (module testsplinecomposee.py)

    hardScale((0.2, 0.2)) : (spline-0#.pkl)
    ---------------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = spline-0#.pkl
                     role = NSplineComposee
          nb pts controle = 26
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0.0, 0.0), (1, 0.0, -1.0))), ('cubic', ((1, 0.0, -1.0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [50, 40]
         largeur, hauteur = 0.2, 0.0386739
              position cg = 0.278692, 0.00300392
                 longueur = 0.418118
                 ruptures = [0, 13, 25]
              composantes = [u'spline-0#.pkl-#0', u'spline-0#.pkl-#1']
      nb pts ctl par comp = [14, 13]
[debugNSplineComposee] (module testsplinecomposee.py)

    translate((-1.5,0.05)) : (spline-0#.pkl)
    ----------------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = spline-0#.pkl
                     role = NSplineComposee
          nb pts controle = 26
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0.0, 0.0), (1, 0.0, -1.0))), ('cubic', ((1, 0.0, -1.0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [50, 40]
         largeur, hauteur = 0.2, 0.0386739
              position cg = -1.22131, 0.0530039
                 longueur = 0.418118
                 ruptures = [0, 13, 25]
              composantes = [u'spline-0#.pkl-#0', u'spline-0#.pkl-#1']
      nb pts ctl par comp = [14, 13]
[debugNSplineComposee] (module testsplinecomposee.py)

    hardRotate(30) (spline-0#.pkl)
    ------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = spline-0#.pkl
                     role = NSplineComposee
          nb pts controle = 26
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0.0, 0.0), (1, 0.0, -1.0))), ('cubic', ((1, 0.0, -1.0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [50, 40]
         largeur, hauteur = 0.2, 0.0386739
              position cg = -1.22131, 0.0530039
                 longueur = 0.418118
                 ruptures = [0, 13, 25]
              composantes = [u'spline-0#.pkl-#0', u'spline-0#.pkl-#1']
      nb pts ctl par comp = [14, 13]
[debugNSplineComposee] (module testsplinecomposee.py)

    symetriser(1) (spline-0#.pkl)
    -----------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = spline-0#.pkl
                     role = NSplineComposee
          nb pts controle = 26
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [['cubic', [(2, 0.0, 0.0), (1, 0.49999999999999994, -0.8660254037844387)]], ['cubic', [(1, 0.49999999999999994, -0.8660254037844387), (2, 0.0, 0.0)]]]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [50, 40]
         largeur, hauteur = 0.174561, 0.102756
              position cg = -1.22458, 0.0656675
                 longueur = 0.418118
                 ruptures = [0, 13, 25]
              composantes = [u'spline-0#.pkl-#0', u'spline-0#.pkl-#1']
      nb pts ctl par comp = [14, 13]
[debugNSplineComposee] (module testsplinecomposee.py)

    reconstruction (spline-0#.pkl)
    ------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = spline-0#.pkl
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [['cubic', ((2, 0, 0), (1, 0, -20))], ['cubic', ((1, 0, -20), (2, 0, 0))]]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [50, 50]
         largeur, hauteur = 1, 0.193929
              position cg = 0.378852, 0.00211315
                 longueur = 2.1524
                 ruptures = [0, 40, 85]
              composantes = [u'spline-0#.pkl-#0', u'spline-0#.pkl-#1']
      nb pts ctl par comp = [41, 46]
[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = spline-0#.pkl
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [['cubic', ((2, 0, 0), (1, 0, -20))], ['cubic', ((1, 0, -20), (2, 0, 0))]]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [50, 50]
         largeur, hauteur = 1, 0.193929
              position cg = 0.378852, 0.00211315
                 longueur = 2.1524
                 ruptures = [0, 40, 85]
              composantes = [u'spline-0#.pkl-#0', u'spline-0#.pkl-#1']
      nb pts ctl par comp = [41, 46]
[debugNSplineComposee] (module testsplinecomposee.py)

    hardScale((0.2,0.2), centre=np.asarray((0,0))) (spline-0#.pkl)
    --------------------------------------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = spline-0#.pkl
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0.0, 0.0), (1, 0.0, -4.0))), ('cubic', ((1, 0.0, -4.0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [50, 50]
         largeur, hauteur = 0.2, 0.0387857
              position cg = 0.0757705, 0.00042263
                 longueur = 0.43048
                 ruptures = [0, 40, 85]
              composantes = [u'spline-0#.pkl-#0', u'spline-0#.pkl-#1']
      nb pts ctl par comp = [41, 46]
[debugNSplineComposee] (module testsplinecomposee.py)

    S.hardRotate(10) (spline-0#.pkl)
    --------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = spline-0#.pkl
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [['cubic', [(2, 0.0, 0.0), (1, 0.6945927106677213, -3.939231012048832)]], ['cubic', [(1, 0.6945927106677213, -3.939231012048832), (2, 0.0, 0.0)]]]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [50, 50]
         largeur, hauteur = 0.197134, 0.0449081
              position cg = 0.0758525, -0.00278077
                 longueur = 0.43048
                 ruptures = [0, 40, 85]
              composantes = [u'spline-0#.pkl-#0', u'spline-0#.pkl-#1']
      nb pts ctl par comp = [41, 46]
[debugNSplineComposee] (module testsplinecomposee.py)

    S.toDump() (spline-0#.pkl)
    --------------------------

{'classename': 'NSplineComposee',
 'cpoints': [[0.19826802992985915, 0.018375252365315314],
             [0.19794480287106944, 0.01834272070354981],
             [0.19697698698919552, 0.01824623677494185],
             [0.1953702774774006, 0.01808958902653576],
             [0.1931358288664241, 0.017875693144972733],
             [0.19028583428723386, 0.01760562296168915],
             [0.1868384545974718, 0.017285054837965958],
             [0.18281511090777094, 0.016918270906626755],
             [0.17824096488117602, 0.016509173891976356],
             [0.17314462530889335, 0.016061944817467724],
             [0.1675537430578259, 0.015604499212682851],
             [0.1614973286514877, 0.015174339851535011],
             [0.15501547409801616, 0.01476301544479541],
             [0.14814887473118243, 0.014382204411655422],
             [0.14094161664548843, 0.01404602543987262],
             [0.13343803740726204, 0.013764527900251714],
             [0.1256843102751743, 0.013546355402456866],
             [0.1177282015279396, 0.013398542247611191],
             [0.10961878381119616, 0.013326344604007705],
             [0.10140777069911935, 0.013335842122885983],
             [0.09314601025397072, 0.013437177093512255],
             [0.08488781796914449, 0.013578520269711385],
             [0.0766738953033627, 0.013632458196371353],
             [0.06856323591182992, 0.01353409905950416],
             [0.0606164488281708, 0.013304461167690542],
             [0.052856052892464526, 0.013059342449209069],
             [0.0453684474302355, 0.012514624670064105],
             [0.03820317405116831, 0.011700858252567226],
             [0.031465000658872685, 0.010325988475611092],
             [0.02522516382607276, 0.00854410860172671],
             [0.019555599369543694, 0.006368827976875956],
             [0.01464147968249857, 0.0036669939851828783],
             [0.010529683712971444, 0.0006142797736657014],
             [0.007168508215863512, -0.00250386359329716],
             [0.00460892851572893, -0.005638541978805265],
             [0.0028090701540139096, -0.008578221534910934],
             [0.001731126981130246, -0.011241889812954544],
             [0.0013226130588773338, -0.013436226900254741],
             [0.0012463666899211606, -0.015048272995508682],
             [0.0012621750824154676, -0.01603165306198891],
             [0.0013064793274175368, -0.016354383168070755],
             [0.0019002545933359677, -0.0178178378697296],
             [0.003038224543861656, -0.018879043993261704],
             [0.004454154613897199, -0.019624031721912582],
             [0.006016449460611098, -0.0200909099225535],
             [0.007469754807355844, -0.020376634901748375],
             [0.008726095549224322, -0.020529904553889606],
             [0.014218400219488211, -0.023878902334992402],
             [0.014398081644958094, -0.02396735630809685],
             [0.015197198260028882, -0.024281834892644814],
             [0.01673211185050706, -0.02475624420294783],
             [0.018932617419180384, -0.02520978219708351],
             [0.021785463220938397, -0.025645905463240734],
             [0.02522271140842708, -0.026064196531377606],
             [0.02925574495723343, -0.02641152974422608],
             [0.033845237305718284, -0.02653221514625864],
             [0.038947430958838715, -0.026354055912099918],
             [0.044511523245849116, -0.025839955920168155],
             [0.05050040896951644, -0.025145329314118246],
             [0.056870487659067694, -0.02427306330197574],
             [0.06357222892430342, -0.023194541295967246],
             [0.07055098958531437, -0.0218879648783359],
             [0.07774646013511402, -0.02034773888235674],
             [0.0851068986184996, -0.01857801400192227],
             [0.09257000987875212, -0.016548089775460923],
             [0.100088359797009, -0.014301530106094675],
             [0.10763999263062264, -0.012013147317012961],
             [0.11518796289582062, -0.009711882843429363],
             [0.12267813649910199, -0.007387868565333472],
             [0.1300501425379935, -0.005046629027279274],
             [0.1372535147043784, -0.0027089344571262853],
             [0.14424065209121723, -0.0003965631537611957],
             [0.15096584323243173, 0.0018687037590304888],
             [0.15738624966634163, 0.004067831221825499],
             [0.16345932580186817, 0.006183734681924342],
             [0.1691446587959791, 0.008199471951596279],
             [0.17440606971176356, 0.010090095613349616],
             [0.17921687846293866, 0.011799444411978706],
             [0.18354939054638394, 0.01330904520554502],
             [0.1873705697642064, 0.014625728742846317],
             [0.19065150614664395, 0.01575138642783522],
             [0.19336806025808184, 0.01668368161808636],
             [0.19550075540526604, 0.01741770279166735],
             [0.19703464221667694, 0.01794759421565453],
             [0.19795916180677225, 0.018268009236940826],
             [0.19826802992985915, 0.018375252365315314]],
 'methode': [['cubic',
              [(2, 0.0, 0.0), (1, 0.6945927106677213, -3.939231012048832)]],
             ['cubic',
              [(1, 0.6945927106677213, -3.939231012048832), (2, 0.0, 0.0)]]],
 'mode': ['courbure', 'courbure'],
 'name': u'spline-0#.pkl',
 'nbpd': [1000, 1000],
 'nbpe': [50, 50],
 'role': 'NSplineComposee',
 'ruptures': [0, 40, 85]}
[debugNSplineComposee] (module testsplinecomposee.py)

    NSplineComposee(**dump0) (spline-0#.pkl)
    ----------------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
join_1 = <NSplineComposee>
                     name = spline-0#.pkl
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [['cubic', [(2, 0.0, 0.0), (1, 0.6945927106677213, -3.939231012048832)]], ['cubic', [(1, 0.6945927106677213, -3.939231012048832), (2, 0.0, 0.0)]]]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [50, 50]
         largeur, hauteur = 0.197134, 0.0449081
              position cg = 0.0758525, -0.00278077
                 longueur = 0.43048
                 ruptures = [0, 40, 85]
              composantes = [u'spline-0#.pkl-#0', u'spline-0#.pkl-#1']
      nb pts ctl par comp = [41, 46]
[debugNSplineComposee] (module testsplinecomposee.py)
Rupture = [[0.19826802992985915, 0.018375252365315314], [0.0013064793274175368, -0.016354383168070755], [0.19826802992985915, 0.018375252365315314]]
[debugNSplineComposee] (module testsplinecomposee.py)

    dump1 = S.toDump() (spline-0#.pkl)
    ----------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
dump_equal_dump1 = True
[debugNSplineComposee] (module testsplinecomposee.py)

    S.load(dump1) (spline-0#.pkl)
    -----------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = spline-0#.pkl
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [['cubic', [(2, 0.0, 0.0), (1, 0.6945927106677213, -3.939231012048832)]], ['cubic', [(1, 0.6945927106677213, -3.939231012048832), (2, 0.0, 0.0)]]]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [50, 50]
         largeur, hauteur = 0.197134, 0.0449081
              position cg = 0.0758525, -0.00278077
                 longueur = 0.43048
                 ruptures = [0, 40, 85]
              composantes = [u'spline-0#.pkl-#0', u'spline-0#.pkl-#1']
      nb pts ctl par comp = [41, 46]
[debugNSplineComposee] (module testsplinecomposee.py)
R = [[ 0.19826803  0.01837525]
 [ 0.00130648 -0.01635438]
 [ 0.19826803  0.01837525]]
[debugNSplineComposee] (module testsplinecomposee.py)
dump1_equal_dump2 = False
[debugNSplineComposee] (module testsplinecomposee.py)

    S.join(1) (spline-0#.pkl)
    -------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = spline-0#.pkl
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [['cubic', [(1, 0.6945927106677213, -3.939231012048832), (2, 0.0, 0.0)]]]
    nb pts discretisation = [1000]
      mode echantillonage = ['courbure']
       nb pts echantillon = [50]
         largeur, hauteur = 0.197028, 0.0454
              position cg = 0.0758637, -0.00277833
                 longueur = 0.419011
                 ruptures = [0, 85]
              composantes = [u'spline-0#.pkl-#0']
      nb pts ctl par comp = [86]
[debugNSplineComposee] (module testsplinecomposee.py)
Ruptures = [[0.19826803 0.01837525]
 [0.19826803 0.01837525]]
[debugNSplineComposee] (module testsplinecomposee.py)

    S.split(len(S)/2) (spline-0#.pkl)
    ---------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = spline-0#.pkl
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((1, 0.6945927106677213, -3.939231012048832), (2, 0, 0))), ('cubic', ((2, 0, 0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [50, 50]
         largeur, hauteur = 0.197029, 0.0460364
              position cg = 0.0758635, -0.00277823
                 longueur = 0.421585
                 ruptures = [0, 43, 85]
              composantes = [u'spline-0#.pkl-#0', u'spline-0#.pkl-#1']
      nb pts ctl par comp = [44, 43]
[debugNSplineComposee] (module testsplinecomposee.py)
ruptures = [[ 0.19826803  0.01837525]
 [ 0.00445415 -0.01962403]
 [ 0.19826803  0.01837525]]
[debugNSplineComposee] (module testsplinecomposee.py)

    removePoint(rupture[1]) (spline-0#.pkl)
    ---------------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
normal ; On tente la suppression d'un point anguleux (43)
[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = spline-0#.pkl
                     role = NSplineComposee
          nb pts controle = 85
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0, 0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000]
      mode echantillonage = ['courbure']
       nb pts echantillon = [50]
         largeur, hauteur = 0.197028, 0.0449079
              position cg = 0.0758591, -0.00277913
                 longueur = 0.417193
                 ruptures = [0, 84]
              composantes = [u'spline-0#.pkl-#0']
      nb pts ctl par comp = [85]
[debugNSplineComposee] (module testsplinecomposee.py)

    S.insertPoint((20, 20)) spline-0#.pkl
    -------------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = spline-0#.pkl
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0, 0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000]
      mode echantillonage = ['courbure']
       nb pts echantillon = [50]
         largeur, hauteur = 19.9911, 20.4006
              position cg = 10.9371, 9.60376
                 longueur = 58.4364
                 ruptures = [0, 85]
              composantes = [u'spline-0#.pkl-#0']
      nb pts ctl par comp = [86]
[debugNSplineComposee] (module testsplinecomposee.py)
points = [[0.19826802992985915, 0.018375252365315314], [20.0, 20.0], [0.19794480287106944, 0.01834272070354981], [0.19697698698919552, 0.01824623677494185], [0.1953702774774006, 0.01808958902653576], [0.1931358288664241, 0.017875693144972733], [0.19028583428723386, 0.01760562296168915], [0.1868384545974718, 0.017285054837965958], [0.18281511090777094, 0.016918270906626755], [0.17824096488117602, 0.016509173891976356], [0.17314462530889335, 0.016061944817467724], [0.1675537430578259, 0.015604499212682851], [0.1614973286514877, 0.015174339851535011], [0.15501547409801616, 0.01476301544479541], [0.14814887473118243, 0.014382204411655422], [0.14094161664548843, 0.01404602543987262], [0.13343803740726204, 0.013764527900251714], [0.1256843102751743, 0.013546355402456866], [0.1177282015279396, 0.013398542247611191], [0.10961878381119616, 0.013326344604007705], [0.10140777069911935, 0.013335842122885983], [0.09314601025397072, 0.013437177093512255], [0.08488781796914449, 0.013578520269711385], [0.0766738953033627, 0.013632458196371353], [0.06856323591182992, 0.01353409905950416], [0.0606164488281708, 0.013304461167690542], [0.052856052892464526, 0.013059342449209069], [0.0453684474302355, 0.012514624670064105], [0.03820317405116831, 0.011700858252567226], [0.031465000658872685, 0.010325988475611092], [0.02522516382607276, 0.00854410860172671], [0.019555599369543694, 0.006368827976875956], [0.01464147968249857, 0.0036669939851828783], [0.010529683712971444, 0.0006142797736657014], [0.007168508215863512, -0.00250386359329716], [0.00460892851572893, -0.005638541978805265], [0.0028090701540139096, -0.008578221534910934], [0.001731126981130246, -0.011241889812954544], [0.0013226130588773338, -0.013436226900254741], [0.0012463666899211606, -0.015048272995508682], [0.0012621750824154676, -0.01603165306198891], [0.0013064793274175368, -0.016354383168070755], [0.0019002545933359677, -0.0178178378697296], [0.003038224543861656, -0.018879043993261704], [0.006016449460611098, -0.0200909099225535], [0.007469754807355844, -0.020376634901748375], [0.008726095549224322, -0.020529904553889606], [0.014218400219488211, -0.023878902334992402], [0.014398081644958094, -0.02396735630809685], [0.015197198260028882, -0.024281834892644814], [0.01673211185050706, -0.02475624420294783], [0.018932617419180384, -0.02520978219708351], [0.021785463220938397, -0.025645905463240734], [0.02522271140842708, -0.026064196531377606], [0.02925574495723343, -0.02641152974422608], [0.033845237305718284, -0.02653221514625864], [0.038947430958838715, -0.026354055912099918], [0.044511523245849116, -0.025839955920168155], [0.05050040896951644, -0.025145329314118246], [0.056870487659067694, -0.02427306330197574], [0.06357222892430342, -0.023194541295967246], [0.07055098958531437, -0.0218879648783359], [0.07774646013511402, -0.02034773888235674], [0.0851068986184996, -0.01857801400192227], [0.09257000987875212, -0.016548089775460923], [0.100088359797009, -0.014301530106094675], [0.10763999263062264, -0.012013147317012961], [0.11518796289582062, -0.009711882843429363], [0.12267813649910199, -0.007387868565333472], [0.1300501425379935, -0.005046629027279274], [0.1372535147043784, -0.0027089344571262853], [0.14424065209121723, -0.0003965631537611957], [0.15096584323243173, 0.0018687037590304888], [0.15738624966634163, 0.004067831221825499], [0.16345932580186817, 0.006183734681924342], [0.1691446587959791, 0.008199471951596279], [0.17440606971176356, 0.010090095613349616], [0.17921687846293866, 0.011799444411978706], [0.18354939054638394, 0.01330904520554502], [0.1873705697642064, 0.014625728742846317], [0.19065150614664395, 0.01575138642783522], [0.19336806025808184, 0.01668368161808636], [0.19550075540526604, 0.01741770279166735], [0.19703464221667694, 0.01794759421565453], [0.19795916180677225, 0.018268009236940826], [0.19826802992985915, 0.018375252365315314]]
[debugNSplineComposee] (module testsplinecomposee.py)

    S.insertPoint(pt,43) spline-0#.pkl
    ----------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = spline-0#.pkl
                     role = NSplineComposee
          nb pts controle = 87
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0, 0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000]
      mode echantillonage = ['courbure']
       nb pts echantillon = [50]
         largeur, hauteur = 22.1352, 22.1209
              position cg = 8.07606, 8.66936
                 longueur = 124.154
                 ruptures = [0, 86]
              composantes = [u'spline-0#.pkl-#0']
      nb pts ctl par comp = [87]
[debugNSplineComposee] (module testsplinecomposee.py)

    S[0] = (2,0.5) (spline-0#.pkl)
    ------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = spline-0#.pkl
                     role = NSplineComposee
          nb pts controle = 87
                   closed = False
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0, 0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000]
      mode echantillonage = ['courbure']
       nb pts echantillon = [50]
         largeur, hauteur = 22.1354, 22.094
              position cg = 8.11021, 8.63357
                 longueur = 122.349
                 ruptures = [0, 86]
              composantes = [u'spline-0#.pkl-#0']
      nb pts ctl par comp = [87]
[debugNSplineComposee] (module testsplinecomposee.py)

    S[len(S)-1] = S[0] (spline-0#.pkl)
    ----------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = spline-0#.pkl
                     role = NSplineComposee
          nb pts controle = 87
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0, 0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000]
      mode echantillonage = ['courbure']
       nb pts echantillon = [50]
         largeur, hauteur = 22.1354, 22.0938
              position cg = 8.11148, 8.63507
                 longueur = 124.215
                 ruptures = [0, 86]
              composantes = [u'spline-0#.pkl-#0']
      nb pts ctl par comp = [87]
[debugNSplineComposee] (module testsplinecomposee.py)

    S.appendPoint((2,1.5)) (spline-0#.pkl)
    --------------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = spline-0#.pkl
                     role = NSplineComposee
          nb pts controle = 88
                   closed = False
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0, 0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000]
      mode echantillonage = ['courbure']
       nb pts echantillon = [50]
         largeur, hauteur = 22.1354, 22.0939
              position cg = 8.10324, 8.62486
                 longueur = 125.276
                 ruptures = [0, 87]
              composantes = [u'spline-0#.pkl-#0']
      nb pts ctl par comp = [88]
[debugNSplineComposee] (module testsplinecomposee.py)

    S.insertPoint((2,-2)) (spline-0#.pkl)
    -------------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = spline-0#.pkl
                     role = NSplineComposee
          nb pts controle = 89
                   closed = False
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0, 0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000]
      mode echantillonage = ['courbure']
       nb pts echantillon = [50]
         largeur, hauteur = 22.1353, 22.3535
              position cg = 8.04197, 8.53818
                 longueur = 128.784
                 ruptures = [0, 88]
              composantes = [u'spline-0#.pkl-#0']
      nb pts ctl par comp = [89]
[debugNSplineComposee] (module testsplinecomposee.py)

    S.insertPoint((6,0)) (spline-0#.pkl)
    ------------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = spline-0#.pkl
                     role = NSplineComposee
          nb pts controle = 90
                   closed = False
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0, 0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000]
      mode echantillonage = ['courbure']
       nb pts echantillon = [50]
         largeur, hauteur = 22.1353, 22.3513
              position cg = 9.72299, 8.65661
                 longueur = 131.124
                 ruptures = [0, 89]
              composantes = [u'spline-0#.pkl-#0']
      nb pts ctl par comp = [90]
[debugNSplineComposee] (module testsplinecomposee.py)

    S.removePoint(3) (spline-0#.pkl)
    --------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = spline-0#.pkl
                     role = NSplineComposee
          nb pts controle = 89
                   closed = False
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0, 0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000]
      mode echantillonage = ['courbure']
       nb pts echantillon = [50]
         largeur, hauteur = 22.1353, 22.3513
              position cg = 9.7223, 8.65686
                 longueur = 131.124
                 ruptures = [0, 88]
              composantes = [u'spline-0#.pkl-#0']
      nb pts ctl par comp = [89]
[debugNSplineComposee] (module testsplinecomposee.py)

    S._update() (spline-0#.pkl)
    ---------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = spline-0#.pkl
                     role = NSplineComposee
          nb pts controle = 89
                   closed = False
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0, 0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000]
      mode echantillonage = ['courbure']
       nb pts echantillon = [50]
         largeur, hauteur = 22.1353, 22.3513
              position cg = 9.7223, 8.65686
                 longueur = 131.126
                 ruptures = [0, 88]
              composantes = [u'spline-0#.pkl-#0']
      nb pts ctl par comp = [89]
[debugNSplineComposee] (module testsplinecomposee.py)
========================================
Fin debugNSplineComposee : spline-0#.pkl
========================================


[testNSplineComposee] (module testsplinecomposee.py)
=====================================
testNSplineComposee : (spline-0#.pkl)
=====================================


[testNSplineComposee] (module testsplinecomposee.py)

    1. Constructeur vide
    --------------------

[testNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = vide
                     role = NSplineComposee
          nb pts controle = 1
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = []
    nb pts discretisation = []
      mode echantillonage = []
       nb pts echantillon = []
         largeur, hauteur = 0, 0
              position cg = 0, 0
                 longueur = 0
                 ruptures = [0]
              composantes = []
      nb pts ctl par comp = []
[testNSplineComposee] (module testsplinecomposee.py)

    methode-0 : [('cubic', 'natural'), ('cubic', 'natural')] (spline-0#.pkl)
    ------------------------------------------------------------------------

[testNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = spline-0#.pkl-1
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', 'natural'), ('cubic', 'natural')]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [100, 100]
         largeur, hauteur = 1, 0.193929
              position cg = 0.378884, 0.00211538
                 longueur = 2.08596
                 ruptures = [0, 40, 85]
              composantes = [u'spline-0#.pkl-1-#0', u'spline-0#.pkl-1-#1']
      nb pts ctl par comp = [41, 46]
[testNSplineComposee] (module testsplinecomposee.py)

    methode-1 : [('cubic', ((1, 0, 3.14), (1, 0, -3.14))), ('cubic', ((1, 0, 0), (1, 0, 0)))] (spline-0#.pkl)
    ---------------------------------------------------------------------------------------------------------

[testNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = spline-0#.pkl-2
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((1, 0, 3.14), (1, 0, -3.14))), ('cubic', ((1, 0, 0), (1, 0, 0)))]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [100, 100]
         largeur, hauteur = 1, 0.193929
              position cg = 0.378879, 0.00211539
                 longueur = 2.08753
                 ruptures = [0, 40, 85]
              composantes = [u'spline-0#.pkl-2-#0', u'spline-0#.pkl-2-#1']
      nb pts ctl par comp = [41, 46]
[testNSplineComposee] (module testsplinecomposee.py)

    methode-2 : [('cubic', 'not-a-knot'), ('cubic', 'not-a-knot')] (spline-0#.pkl)
    ------------------------------------------------------------------------------

[testNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = spline-0#.pkl-3
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', 'not-a-knot'), ('cubic', 'not-a-knot')]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [100, 100]
         largeur, hauteur = 1.00003, 0.193929
              position cg = 0.37888, 0.00211534
                 longueur = 2.08601
                 ruptures = [0, 40, 85]
              composantes = [u'spline-0#.pkl-3-#0', u'spline-0#.pkl-3-#1']
      nb pts ctl par comp = [41, 46]
[testNSplineComposee] (module testsplinecomposee.py)

    methode-3 : [['cubic', ((1, 0, 2), (1, 0, -2))], ['cubic', ((1, 1, 0), (1, 1, 0))]] (spline-0#.pkl)
    ---------------------------------------------------------------------------------------------------

[testNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = spline-0#.pkl-4
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [['cubic', ((1, 0, 2), (1, 0, -2))], ['cubic', ((1, 1, 0), (1, 1, 0))]]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [100, 100]
         largeur, hauteur = 1, 0.193929
              position cg = 0.378898, 0.00211555
                 longueur = 2.08754
                 ruptures = [0, 40, 85]
              composantes = [u'spline-0#.pkl-4-#0', u'spline-0#.pkl-4-#1']
      nb pts ctl par comp = [41, 46]
[testNSplineComposee] (module testsplinecomposee.py)

    methode-4 : [('cubic', ((2, 0, 0), (1, 0, -5))), ('cubic', ((1, 0, -5), (2, 0, 0)))] (spline-0#.pkl)
    ----------------------------------------------------------------------------------------------------

[testNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = spline-0#.pkl-5
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0, 0), (1, 0, -5))), ('cubic', ((1, 0, -5), (2, 0, 0)))]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [100, 100]
         largeur, hauteur = 1, 0.193929
              position cg = 0.378875, 0.00211524
                 longueur = 2.08959
                 ruptures = [0, 40, 85]
              composantes = [u'spline-0#.pkl-5-#0', u'spline-0#.pkl-5-#1']
      nb pts ctl par comp = [41, 46]
[testNSplineComposee] (module testsplinecomposee.py)

    hardScale : spline-0#.pkl
    -------------------------

[testNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = spline-0#.pkl-5
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0.0, 0.0), (1, 0.0, -1.0))), ('cubic', ((1, 0.0, -1.0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [100, 100]
         largeur, hauteur = 0.2, 0.0387857
              position cg = 0.452251, -0.00241946
                 longueur = 0.417918
                 ruptures = [0, 40, 85]
              composantes = [u'spline-0#.pkl-5-#0', u'spline-0#.pkl-5-#1']
      nb pts ctl par comp = [41, 46]
[testNSplineComposee] (module testsplinecomposee.py)

    translate((-1.5,0.05)) : spline-0#.pkl
    --------------------------------------

[testNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = spline-0#.pkl-5
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0.0, 0.0), (1, 0.0, -1.0))), ('cubic', ((1, 0.0, -1.0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [100, 100]
         largeur, hauteur = 0.2, 0.0387857
              position cg = -1.04775, 0.0475805
                 longueur = 0.417918
                 ruptures = [0, 40, 85]
              composantes = [u'spline-0#.pkl-5-#0', u'spline-0#.pkl-5-#1']
      nb pts ctl par comp = [41, 46]
[testNSplineComposee] (module testsplinecomposee.py)

    hardRotate(30) : spline-0#.pkl
    ------------------------------

[testNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = spline-0#.pkl-5
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [['cubic', [(2, 0.0, 0.0), (1, 0.49999999999999994, -0.8660254037844387)]], ['cubic', [(1, 0.49999999999999994, -0.8660254037844387), (2, 0.0, 0.0)]]]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [100, 100]
         largeur, hauteur = 0.174596, 0.1027
              position cg = -1.04586, 0.0382567
                 longueur = 0.417918
                 ruptures = [0, 40, 85]
              composantes = [u'spline-0#.pkl-5-#0', u'spline-0#.pkl-5-#1']
      nb pts ctl par comp = [41, 46]
[testNSplineComposee] (module testsplinecomposee.py)

    symetriser(1) : spline-0#.pkl
    -----------------------------

[testNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = spline-0#.pkl-5
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0.0, -0.0), (1, 0.49999999999999994, 0.8660254037844387))), ('cubic', ((1, 0.49999999999999994, 0.8660254037844387), (2, 0.0, -0.0)))]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [100, 100]
         largeur, hauteur = 0.174596, 0.1027
              position cg = -1.04586, 0.054637
                 longueur = 0.417918
                 ruptures = [0, 40, 85]
              composantes = [u'spline-0#.pkl-5-#0', u'spline-0#.pkl-5-#1']
      nb pts ctl par comp = [41, 46]
[testNSplineComposee] (module testsplinecomposee.py)

    symetriser(1) : spline-0#.pkl
    -----------------------------

[testNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = spline-0#.pkl
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [['cubic', ((2, 0, 0), (1, 0, -20))], ['cubic', ((1, 0, -20), (2, 0, 0))]]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [20, 10]
         largeur, hauteur = 1, 0.193929
              position cg = 0.378852, 0.00211315
                 longueur = 2.1524
                 ruptures = [0, 40, 85]
              composantes = [u'spline-0#.pkl-#0', u'spline-0#.pkl-#1']
      nb pts ctl par comp = [41, 46]
[testNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = spline-0#.pkl
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0.0, 0.0), (1, 0.0, -4.0))), ('cubic', ((1, 0.0, -4.0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [20, 10]
         largeur, hauteur = 0.2, 0.0387857
              position cg = 0.0757705, 0.00042263
                 longueur = 0.43048
                 ruptures = [0, 40, 85]
              composantes = [u'spline-0#.pkl-#0', u'spline-0#.pkl-#1']
      nb pts ctl par comp = [41, 46]
[testNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = spline-0#.pkl
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [['cubic', [(2, 0.0, 0.0), (1, 0.6945927106677213, -3.939231012048832)]], ['cubic', [(1, 0.6945927106677213, -3.939231012048832), (2, 0.0, 0.0)]]]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [20, 10]
         largeur, hauteur = 0.197134, 0.0449081
              position cg = 0.0758525, -0.00278077
                 longueur = 0.43048
                 ruptures = [0, 40, 85]
              composantes = [u'spline-0#.pkl-#0', u'spline-0#.pkl-#1']
      nb pts ctl par comp = [41, 46]
[testNSplineComposee] (module testsplinecomposee.py)
join_1 = <NSplineComposee>
                     name = spline-0#.pkl
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [['cubic', [(2, 0.0, 0.0), (1, 0.6945927106677213, -3.939231012048832)]], ['cubic', [(1, 0.6945927106677213, -3.939231012048832), (2, 0.0, 0.0)]]]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [20, 10]
         largeur, hauteur = 0.197134, 0.0449081
              position cg = 0.0758525, -0.00278077
                 longueur = 0.43048
                 ruptures = [0, 40, 85]
              composantes = [u'spline-0#.pkl-#0', u'spline-0#.pkl-#1']
      nb pts ctl par comp = [41, 46] ; R = [[ 0.19826803  0.01837525]
 [ 0.00130648 -0.01635438]
 [ 0.19826803  0.01837525]]
[testNSplineComposee] (module testsplinecomposee.py)
S = <NSplineComposee>
                     name = spline-0#.pkl
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [['cubic', [(2, 0.0, 0.0), (1, 0.6945927106677213, -3.939231012048832)]], ['cubic', [(1, 0.6945927106677213, -3.939231012048832), (2, 0.0, 0.0)]]]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [20, 10]
         largeur, hauteur = 0.197134, 0.0449081
              position cg = 0.0758525, -0.00278077
                 longueur = 0.43048
                 ruptures = [0, 40, 85]
              composantes = [u'spline-0#.pkl-#0', u'spline-0#.pkl-#1']
      nb pts ctl par comp = [41, 46] ; R = [[ 0.19826803  0.01837525]
 [ 0.00130648 -0.01635438]
 [ 0.19826803  0.01837525]]
[testNSplineComposee] (module testsplinecomposee.py)
join_1 = <NSplineComposee>
                     name = spline-0#.pkl
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [['cubic', [(1, 0.6945927106677213, -3.939231012048832), (2, 0.0, 0.0)]]]
    nb pts discretisation = [1000]
      mode echantillonage = ['courbure']
       nb pts echantillon = [10]
         largeur, hauteur = 0.197028, 0.0454
              position cg = 0.0758637, -0.00277833
                 longueur = 0.419011
                 ruptures = [0, 85]
              composantes = [u'spline-0#.pkl-#0']
      nb pts ctl par comp = [86] ; R = [[0.19826803 0.01837525]
 [0.19826803 0.01837525]]
[testNSplineComposee] (module testsplinecomposee.py)
split_nba = <NSplineComposee>
                     name = spline-0#.pkl
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((1, 0.6945927106677213, -3.939231012048832), (2, 0, 0))), ('cubic', ((2, 0, 0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [10, 10]
         largeur, hauteur = 0.19703, 0.0460514
              position cg = 0.0758636, -0.00277822
                 longueur = 0.421709
                 ruptures = [0, 40, 85]
              composantes = [u'spline-0#.pkl-#0', u'spline-0#.pkl-#1']
      nb pts ctl par comp = [41, 46] ; R = [[ 0.19826803  0.01837525]
 [ 0.00130648 -0.01635438]
 [ 0.19826803  0.01837525]]
[testNSplineComposee] (module testsplinecomposee.py)
normal ; On tente la suppression d'un point anguleux (40)
[testNSplineComposee] (module testsplinecomposee.py)
points = [[0.19826802992985915, 0.018375252365315314], [20.0, 20.0], [0.19794480287106944, 0.01834272070354981], [0.19697698698919552, 0.01824623677494185], [0.1953702774774006, 0.01808958902653576], [0.1931358288664241, 0.017875693144972733], [0.19028583428723386, 0.01760562296168915], [0.1868384545974718, 0.017285054837965958], [0.18281511090777094, 0.016918270906626755], [0.17824096488117602, 0.016509173891976356], [0.17314462530889335, 0.016061944817467724], [0.1675537430578259, 0.015604499212682851], [0.1614973286514877, 0.015174339851535011], [0.15501547409801616, 0.01476301544479541], [0.14814887473118243, 0.014382204411655422], [0.14094161664548843, 0.01404602543987262], [0.13343803740726204, 0.013764527900251714], [0.1256843102751743, 0.013546355402456866], [0.1177282015279396, 0.013398542247611191], [0.10961878381119616, 0.013326344604007705], [0.10140777069911935, 0.013335842122885983], [0.09314601025397072, 0.013437177093512255], [0.08488781796914449, 0.013578520269711385], [0.0766738953033627, 0.013632458196371353], [0.06856323591182992, 0.01353409905950416], [0.0606164488281708, 0.013304461167690542], [0.052856052892464526, 0.013059342449209069], [0.0453684474302355, 0.012514624670064105], [0.03820317405116831, 0.011700858252567226], [0.031465000658872685, 0.010325988475611092], [0.02522516382607276, 0.00854410860172671], [0.019555599369543694, 0.006368827976875956], [0.01464147968249857, 0.0036669939851828783], [0.010529683712971444, 0.0006142797736657014], [0.007168508215863512, -0.00250386359329716], [0.00460892851572893, -0.005638541978805265], [0.0028090701540139096, -0.008578221534910934], [0.001731126981130246, -0.011241889812954544], [0.0013226130588773338, -0.013436226900254741], [0.0012463666899211606, -0.015048272995508682], [0.0012621750824154676, -0.01603165306198891], [0.0019002545933359677, -0.0178178378697296], [0.003038224543861656, -0.018879043993261704], [0.004454154613897199, -0.019624031721912582], [0.006016449460611098, -0.0200909099225535], [0.007469754807355844, -0.020376634901748375], [0.008726095549224322, -0.020529904553889606], [0.014218400219488211, -0.023878902334992402], [0.014398081644958094, -0.02396735630809685], [0.015197198260028882, -0.024281834892644814], [0.01673211185050706, -0.02475624420294783], [0.018932617419180384, -0.02520978219708351], [0.021785463220938397, -0.025645905463240734], [0.02522271140842708, -0.026064196531377606], [0.02925574495723343, -0.02641152974422608], [0.033845237305718284, -0.02653221514625864], [0.038947430958838715, -0.026354055912099918], [0.044511523245849116, -0.025839955920168155], [0.05050040896951644, -0.025145329314118246], [0.056870487659067694, -0.02427306330197574], [0.06357222892430342, -0.023194541295967246], [0.07055098958531437, -0.0218879648783359], [0.07774646013511402, -0.02034773888235674], [0.0851068986184996, -0.01857801400192227], [0.09257000987875212, -0.016548089775460923], [0.100088359797009, -0.014301530106094675], [0.10763999263062264, -0.012013147317012961], [0.11518796289582062, -0.009711882843429363], [0.12267813649910199, -0.007387868565333472], [0.1300501425379935, -0.005046629027279274], [0.1372535147043784, -0.0027089344571262853], [0.14424065209121723, -0.0003965631537611957], [0.15096584323243173, 0.0018687037590304888], [0.15738624966634163, 0.004067831221825499], [0.16345932580186817, 0.006183734681924342], [0.1691446587959791, 0.008199471951596279], [0.17440606971176356, 0.010090095613349616], [0.17921687846293866, 0.011799444411978706], [0.18354939054638394, 0.01330904520554502], [0.1873705697642064, 0.014625728742846317], [0.19065150614664395, 0.01575138642783522], [0.19336806025808184, 0.01668368161808636], [0.19550075540526604, 0.01741770279166735], [0.19703464221667694, 0.01794759421565453], [0.19795916180677225, 0.018268009236940826], [0.19826802992985915, 0.018375252365315314]]
<NSplineComposee>
                     name = spline-0#.pkl
                     role = NSplineComposee
          nb pts controle = 90
                   closed = False
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0, 0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000]
      mode echantillonage = ['courbure']
       nb pts echantillon = [10]
         largeur, hauteur = 22.598, 22.1758
              position cg = 9.9613, 8.71364
                 longueur = 130.631
                 ruptures = [0, 89]
              composantes = [u'spline-0#.pkl-#0']
      nb pts ctl par comp = [90]
[testNSplineComposee] (module testsplinecomposee.py)
=========================================
Fin testNSplineComposee : (spline-0#.pkl)
=========================================


[debugNSplineComposee] (module testsplinecomposee.py)
======================================
debugNSplineComposee : (spline-0#.spl)
======================================


[debugNSplineComposee] (module testsplinecomposee.py)

    Constructeur vide
    -----------------

<NSplineComposee>
                     name = NSplineComposee
                     role = NSplineComposee
          nb pts controle = 1
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = []
    nb pts discretisation = []
      mode echantillonage = []
       nb pts echantillon = []
         largeur, hauteur = 0, 0
              position cg = 0, 0
                 longueur = 0
                 ruptures = [0]
              composantes = []
      nb pts ctl par comp = []
[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = spline-0#.spl
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0, 0), (1, 0, -5))), ('cubic', ((1, 0, -5), (2, 0, 0)))]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [50, 40]
         largeur, hauteur = 1, 0.193929
              position cg = 0.378875, 0.00211524
                 longueur = 2.08959
                 ruptures = [0, 40, 85]
              composantes = [u'spline-0#.spl-#0', u'spline-0#.spl-#1']
      nb pts ctl par comp = [41, 46]
[debugNSplineComposee] (module testsplinecomposee.py)

    elaguer(eps=1, replace=True) : (spline-0#.spl)
    ----------------------------------------------

[elaguer] (module splinesimple.py)
historique_distances = [414.78, 160.87, 71.08, 36.56, 17.32, 12.27, 5.7, 3.79, 2.32, 2.08, 1.21, 0.76]
[elaguer] (module splinesimple.py)
Apres ELAGAGE : dist = 0.76 mm/m ; 41 points => 14 points 
[elaguer] (module splinesimple.py)
historique_distances = [414.66, 178.69, 88.1, 33.12, 29.0, 11.54, 5.69, 1.82, 2.64, 1.47, 0.95]
[elaguer] (module splinesimple.py)
Apres ELAGAGE : dist = 0.95 mm/m ; 46 points => 13 points 
[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = spline-0#.spl
                     role = NSplineComposee
          nb pts controle = 26
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0, 0), (1, 0, -5))), ('cubic', ((1, 0, -5), (2, 0, 0)))]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [50, 40]
         largeur, hauteur = 1, 0.193369
              position cg = 0.379756, 0.00208842
                 longueur = 2.09059
                 ruptures = [0, 13, 25]
              composantes = [u'spline-0#.spl-#0', u'spline-0#.spl-#1']
      nb pts ctl par comp = [14, 13]
[debugNSplineComposee] (module testsplinecomposee.py)

    echantillonner() (spline-0#.spl)
    --------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
echantillon = [[1.0, 0.0], [0.8891418458205159, 0.00950664059246881], [0.8241065780893738, 0.01570562760524625], [0.7696347812257205, 0.021538334555701526], [0.7204333924978681, 0.027471532936248606], [0.672545525096616, 0.03393110619657099], [0.6256163896464044, 0.040946439282213955], [0.5795932818242299, 0.048513035401255906], [0.5310784491785587, 0.05723711933571906], [0.44695595524370707, 0.07309769393655868], [0.3976280086662947, 0.08185440350799157], [0.34838125114391433, 0.08989758091627312], [0.30182119867219376, 0.09685871795475196], [0.27149949346231483, 0.10082668753110718], [0.2472363860153241, 0.10336537620601834], [0.2259389516857354, 0.10494195365096329], [0.2065184652203255, 0.10572054172997516], [0.1884046168394041, 0.10578165455298744], [0.17126574587742963, 0.10516793911810218], [0.15516384500383806, 0.10392213293744229], [0.14017461816069557, 0.10208812471601818], [0.1261930062837371, 0.09969919960752696], [0.11309672502050222, 0.09677858394769702], [0.10080519757133291, 0.09334835107410917], [0.08922208713628993, 0.08941637733695605], [0.07827951519108452, 0.08498771705701572], [0.06783596674521854, 0.08002646539967762], [0.057910394520877886, 0.07455724096188425], [0.048544694584923755, 0.06861872040876166], [0.03976487729522813, 0.062245080262647336], [0.031464803748404116, 0.05536948483373497], [0.02380898510508279, 0.048160533158749644], [0.017971927735640998, 0.04183660575653233], [0.01326637930605598, 0.035747914810752505], [0.008498037109473711, 0.028274086631351062], [0.005087891153061475, 0.022028094934241665], [0.003516921679664259, 0.01798086210620182], [0.0016971769782871203, 0.00919649422107709], [0.0011206562351147354, 0.006743747757739395], [0.0009834457144535051, 0.006511419793269777], [0.0009195079440538239, 0.0064694143710641635], [0.0008701774381662531, 0.006468560264822478], [0.0008107284657677532, 0.006505978067131255], [0.0006707878959529258, 0.006729284685445411], [0.00042093709128068513, 0.0072448865305027015], [0.00036168304820483407, 0.007303880336368927], [0.0003315337559591886, 0.007310304061277726], [0.00030230552421760796, 0.007296289245358696], [0.00024536703457941845, 0.007192606896472126], [-1.0842021724855044e-19, 0.0], [0.00035644862761962103, -0.008679294238669621], [0.0004592623246258791, -0.008817809359489195], [0.0005327681466244933, -0.008832314740800814], [0.0006467456466258719, -0.008771704051514295], [0.0011764436786299434, -0.008099579141184468], [0.001581851685989839, -0.007747836457096799], [0.0018758613226495164, -0.007712487215932706], [0.002344773678935332, -0.00796295308271688], [0.003880318083094649, -0.010018649206638064], [0.007601811845447761, -0.015456847537391542], [0.010309842188861213, -0.01761561691949004], [0.014993335653275524, -0.019826063370456372], [0.026616532469787655, -0.02406573997520404], [0.032750177132570495, -0.026912525812415815], [0.037742422665273244, -0.03026593650968116], [0.04385404602743672, -0.03570138915767021], [0.05369534478861791, -0.04542452775099455], [0.05918924722117225, -0.049846210327577446], [0.06532480834911718, -0.053579799832726316], [0.07303890962435028, -0.057127988003153274], [0.08394418256961969, -0.060924715121230454], [0.11653440286772909, -0.07027334619724225], [0.13704834578867048, -0.07543958636257042], [0.15353793709883864, -0.07874572058934039], [0.17092543160291862, -0.08125233821247689], [0.1931138276839321, -0.08339775036470282], [0.22750089707782964, -0.08558364639927211], [0.26400995119012155, -0.08700955179486533], [0.30044142780199795, -0.08752707876032095], [0.3367814660089027, -0.08714055908098153], [0.3730472682852259, -0.08585283669871266], [0.40920451627531834, -0.0836674308286848], [0.44527047301989925, -0.08058487551578199], [0.48658647664877724, -0.07602107494266823], [0.6051132022139678, -0.06115457030123257], [0.6785756234727679, -0.05131880908761625], [0.7548170409394694, -0.040128019929877835], [0.8456085490878391, -0.02578942052548065], [1.0, -1.734723475976807e-18]]
[debugNSplineComposee] (module testsplinecomposee.py)

    hardScale((0.2, 0.2)) : (spline-0#.spl)
    ---------------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = spline-0#.spl
                     role = NSplineComposee
          nb pts controle = 26
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0.0, 0.0), (1, 0.0, -1.0))), ('cubic', ((1, 0.0, -1.0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [50, 40]
         largeur, hauteur = 0.2, 0.0386739
              position cg = 0.278692, 0.00300392
                 longueur = 0.418118
                 ruptures = [0, 13, 25]
              composantes = [u'spline-0#.spl-#0', u'spline-0#.spl-#1']
      nb pts ctl par comp = [14, 13]
[debugNSplineComposee] (module testsplinecomposee.py)

    translate((-1.5,0.05)) : (spline-0#.spl)
    ----------------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = spline-0#.spl
                     role = NSplineComposee
          nb pts controle = 26
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0.0, 0.0), (1, 0.0, -1.0))), ('cubic', ((1, 0.0, -1.0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [50, 40]
         largeur, hauteur = 0.2, 0.0386739
              position cg = -1.22131, 0.0530039
                 longueur = 0.418118
                 ruptures = [0, 13, 25]
              composantes = [u'spline-0#.spl-#0', u'spline-0#.spl-#1']
      nb pts ctl par comp = [14, 13]
[debugNSplineComposee] (module testsplinecomposee.py)

    hardRotate(30) (spline-0#.spl)
    ------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = spline-0#.spl
                     role = NSplineComposee
          nb pts controle = 26
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0.0, 0.0), (1, 0.0, -1.0))), ('cubic', ((1, 0.0, -1.0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [50, 40]
         largeur, hauteur = 0.2, 0.0386739
              position cg = -1.22131, 0.0530039
                 longueur = 0.418118
                 ruptures = [0, 13, 25]
              composantes = [u'spline-0#.spl-#0', u'spline-0#.spl-#1']
      nb pts ctl par comp = [14, 13]
[debugNSplineComposee] (module testsplinecomposee.py)

    symetriser(1) (spline-0#.spl)
    -----------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = spline-0#.spl
                     role = NSplineComposee
          nb pts controle = 26
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [['cubic', [(2, 0.0, 0.0), (1, 0.49999999999999994, -0.8660254037844387)]], ['cubic', [(1, 0.49999999999999994, -0.8660254037844387), (2, 0.0, 0.0)]]]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [50, 40]
         largeur, hauteur = 0.174561, 0.102756
              position cg = -1.22458, 0.0656675
                 longueur = 0.418118
                 ruptures = [0, 13, 25]
              composantes = [u'spline-0#.spl-#0', u'spline-0#.spl-#1']
      nb pts ctl par comp = [14, 13]
[debugNSplineComposee] (module testsplinecomposee.py)

    reconstruction (spline-0#.spl)
    ------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = spline-0#.spl
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [['cubic', ((2, 0, 0), (1, 0, -20))], ['cubic', ((1, 0, -20), (2, 0, 0))]]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [50, 50]
         largeur, hauteur = 1, 0.193929
              position cg = 0.378852, 0.00211315
                 longueur = 2.1524
                 ruptures = [0, 40, 85]
              composantes = [u'spline-0#.spl-#0', u'spline-0#.spl-#1']
      nb pts ctl par comp = [41, 46]
[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = spline-0#.spl
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [['cubic', ((2, 0, 0), (1, 0, -20))], ['cubic', ((1, 0, -20), (2, 0, 0))]]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [50, 50]
         largeur, hauteur = 1, 0.193929
              position cg = 0.378852, 0.00211315
                 longueur = 2.1524
                 ruptures = [0, 40, 85]
              composantes = [u'spline-0#.spl-#0', u'spline-0#.spl-#1']
      nb pts ctl par comp = [41, 46]
[debugNSplineComposee] (module testsplinecomposee.py)

    hardScale((0.2,0.2), centre=np.asarray((0,0))) (spline-0#.spl)
    --------------------------------------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = spline-0#.spl
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0.0, 0.0), (1, 0.0, -4.0))), ('cubic', ((1, 0.0, -4.0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [50, 50]
         largeur, hauteur = 0.2, 0.0387857
              position cg = 0.0757705, 0.00042263
                 longueur = 0.43048
                 ruptures = [0, 40, 85]
              composantes = [u'spline-0#.spl-#0', u'spline-0#.spl-#1']
      nb pts ctl par comp = [41, 46]
[debugNSplineComposee] (module testsplinecomposee.py)

    S.hardRotate(10) (spline-0#.spl)
    --------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = spline-0#.spl
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [['cubic', [(2, 0.0, 0.0), (1, 0.6945927106677213, -3.939231012048832)]], ['cubic', [(1, 0.6945927106677213, -3.939231012048832), (2, 0.0, 0.0)]]]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [50, 50]
         largeur, hauteur = 0.197134, 0.0449081
              position cg = 0.0758525, -0.00278077
                 longueur = 0.43048
                 ruptures = [0, 40, 85]
              composantes = [u'spline-0#.spl-#0', u'spline-0#.spl-#1']
      nb pts ctl par comp = [41, 46]
[debugNSplineComposee] (module testsplinecomposee.py)

    S.toDump() (spline-0#.spl)
    --------------------------

{'classename': 'NSplineComposee',
 'cpoints': [[0.19826802992985915, 0.018375252365315314],
             [0.19794480287106944, 0.01834272070354981],
             [0.19697698698919552, 0.01824623677494185],
             [0.1953702774774006, 0.01808958902653576],
             [0.1931358288664241, 0.017875693144972733],
             [0.19028583428723386, 0.01760562296168915],
             [0.1868384545974718, 0.017285054837965958],
             [0.18281511090777094, 0.016918270906626755],
             [0.17824096488117602, 0.016509173891976356],
             [0.17314462530889335, 0.016061944817467724],
             [0.1675537430578259, 0.015604499212682851],
             [0.1614973286514877, 0.015174339851535011],
             [0.15501547409801616, 0.01476301544479541],
             [0.14814887473118243, 0.014382204411655422],
             [0.14094161664548843, 0.01404602543987262],
             [0.13343803740726204, 0.013764527900251714],
             [0.1256843102751743, 0.013546355402456866],
             [0.1177282015279396, 0.013398542247611191],
             [0.10961878381119616, 0.013326344604007705],
             [0.10140777069911935, 0.013335842122885983],
             [0.09314601025397072, 0.013437177093512255],
             [0.08488781796914449, 0.013578520269711385],
             [0.0766738953033627, 0.013632458196371353],
             [0.06856323591182992, 0.01353409905950416],
             [0.0606164488281708, 0.013304461167690542],
             [0.052856052892464526, 0.013059342449209069],
             [0.0453684474302355, 0.012514624670064105],
             [0.03820317405116831, 0.011700858252567226],
             [0.031465000658872685, 0.010325988475611092],
             [0.02522516382607276, 0.00854410860172671],
             [0.019555599369543694, 0.006368827976875956],
             [0.01464147968249857, 0.0036669939851828783],
             [0.010529683712971444, 0.0006142797736657014],
             [0.007168508215863512, -0.00250386359329716],
             [0.00460892851572893, -0.005638541978805265],
             [0.0028090701540139096, -0.008578221534910934],
             [0.001731126981130246, -0.011241889812954544],
             [0.0013226130588773338, -0.013436226900254741],
             [0.0012463666899211606, -0.015048272995508682],
             [0.0012621750824154676, -0.01603165306198891],
             [0.0013064793274175368, -0.016354383168070755],
             [0.0019002545933359677, -0.0178178378697296],
             [0.003038224543861656, -0.018879043993261704],
             [0.004454154613897199, -0.019624031721912582],
             [0.006016449460611098, -0.0200909099225535],
             [0.007469754807355844, -0.020376634901748375],
             [0.008726095549224322, -0.020529904553889606],
             [0.014218400219488211, -0.023878902334992402],
             [0.014398081644958094, -0.02396735630809685],
             [0.015197198260028882, -0.024281834892644814],
             [0.01673211185050706, -0.02475624420294783],
             [0.018932617419180384, -0.02520978219708351],
             [0.021785463220938397, -0.025645905463240734],
             [0.02522271140842708, -0.026064196531377606],
             [0.02925574495723343, -0.02641152974422608],
             [0.033845237305718284, -0.02653221514625864],
             [0.038947430958838715, -0.026354055912099918],
             [0.044511523245849116, -0.025839955920168155],
             [0.05050040896951644, -0.025145329314118246],
             [0.056870487659067694, -0.02427306330197574],
             [0.06357222892430342, -0.023194541295967246],
             [0.07055098958531437, -0.0218879648783359],
             [0.07774646013511402, -0.02034773888235674],
             [0.0851068986184996, -0.01857801400192227],
             [0.09257000987875212, -0.016548089775460923],
             [0.100088359797009, -0.014301530106094675],
             [0.10763999263062264, -0.012013147317012961],
             [0.11518796289582062, -0.009711882843429363],
             [0.12267813649910199, -0.007387868565333472],
             [0.1300501425379935, -0.005046629027279274],
             [0.1372535147043784, -0.0027089344571262853],
             [0.14424065209121723, -0.0003965631537611957],
             [0.15096584323243173, 0.0018687037590304888],
             [0.15738624966634163, 0.004067831221825499],
             [0.16345932580186817, 0.006183734681924342],
             [0.1691446587959791, 0.008199471951596279],
             [0.17440606971176356, 0.010090095613349616],
             [0.17921687846293866, 0.011799444411978706],
             [0.18354939054638394, 0.01330904520554502],
             [0.1873705697642064, 0.014625728742846317],
             [0.19065150614664395, 0.01575138642783522],
             [0.19336806025808184, 0.01668368161808636],
             [0.19550075540526604, 0.01741770279166735],
             [0.19703464221667694, 0.01794759421565453],
             [0.19795916180677225, 0.018268009236940826],
             [0.19826802992985915, 0.018375252365315314]],
 'methode': [['cubic',
              [(2, 0.0, 0.0), (1, 0.6945927106677213, -3.939231012048832)]],
             ['cubic',
              [(1, 0.6945927106677213, -3.939231012048832), (2, 0.0, 0.0)]]],
 'mode': ['courbure', 'courbure'],
 'name': u'spline-0#.spl',
 'nbpd': [1000, 1000],
 'nbpe': [50, 50],
 'role': 'NSplineComposee',
 'ruptures': [0, 40, 85]}
[debugNSplineComposee] (module testsplinecomposee.py)

    NSplineComposee(**dump0) (spline-0#.spl)
    ----------------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
join_1 = <NSplineComposee>
                     name = spline-0#.spl
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [['cubic', [(2, 0.0, 0.0), (1, 0.6945927106677213, -3.939231012048832)]], ['cubic', [(1, 0.6945927106677213, -3.939231012048832), (2, 0.0, 0.0)]]]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [50, 50]
         largeur, hauteur = 0.197134, 0.0449081
              position cg = 0.0758525, -0.00278077
                 longueur = 0.43048
                 ruptures = [0, 40, 85]
              composantes = [u'spline-0#.spl-#0', u'spline-0#.spl-#1']
      nb pts ctl par comp = [41, 46]
[debugNSplineComposee] (module testsplinecomposee.py)
Rupture = [[0.19826802992985915, 0.018375252365315314], [0.0013064793274175368, -0.016354383168070755], [0.19826802992985915, 0.018375252365315314]]
[debugNSplineComposee] (module testsplinecomposee.py)

    dump1 = S.toDump() (spline-0#.spl)
    ----------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
dump_equal_dump1 = True
[debugNSplineComposee] (module testsplinecomposee.py)

    S.load(dump1) (spline-0#.spl)
    -----------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = spline-0#.spl
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [['cubic', [(2, 0.0, 0.0), (1, 0.6945927106677213, -3.939231012048832)]], ['cubic', [(1, 0.6945927106677213, -3.939231012048832), (2, 0.0, 0.0)]]]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [50, 50]
         largeur, hauteur = 0.197134, 0.0449081
              position cg = 0.0758525, -0.00278077
                 longueur = 0.43048
                 ruptures = [0, 40, 85]
              composantes = [u'spline-0#.spl-#0', u'spline-0#.spl-#1']
      nb pts ctl par comp = [41, 46]
[debugNSplineComposee] (module testsplinecomposee.py)
R = [[ 0.19826803  0.01837525]
 [ 0.00130648 -0.01635438]
 [ 0.19826803  0.01837525]]
[debugNSplineComposee] (module testsplinecomposee.py)
dump1_equal_dump2 = False
[debugNSplineComposee] (module testsplinecomposee.py)

    S.join(1) (spline-0#.spl)
    -------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = spline-0#.spl
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [['cubic', [(1, 0.6945927106677213, -3.939231012048832), (2, 0.0, 0.0)]]]
    nb pts discretisation = [1000]
      mode echantillonage = ['courbure']
       nb pts echantillon = [50]
         largeur, hauteur = 0.197028, 0.0454
              position cg = 0.0758637, -0.00277833
                 longueur = 0.419011
                 ruptures = [0, 85]
              composantes = [u'spline-0#.spl-#0']
      nb pts ctl par comp = [86]
[debugNSplineComposee] (module testsplinecomposee.py)
Ruptures = [[0.19826803 0.01837525]
 [0.19826803 0.01837525]]
[debugNSplineComposee] (module testsplinecomposee.py)

    S.split(len(S)/2) (spline-0#.spl)
    ---------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = spline-0#.spl
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((1, 0.6945927106677213, -3.939231012048832), (2, 0, 0))), ('cubic', ((2, 0, 0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [50, 50]
         largeur, hauteur = 0.197029, 0.0460364
              position cg = 0.0758635, -0.00277823
                 longueur = 0.421585
                 ruptures = [0, 43, 85]
              composantes = [u'spline-0#.spl-#0', u'spline-0#.spl-#1']
      nb pts ctl par comp = [44, 43]
[debugNSplineComposee] (module testsplinecomposee.py)
ruptures = [[ 0.19826803  0.01837525]
 [ 0.00445415 -0.01962403]
 [ 0.19826803  0.01837525]]
[debugNSplineComposee] (module testsplinecomposee.py)

    removePoint(rupture[1]) (spline-0#.spl)
    ---------------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
normal ; On tente la suppression d'un point anguleux (43)
[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = spline-0#.spl
                     role = NSplineComposee
          nb pts controle = 85
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0, 0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000]
      mode echantillonage = ['courbure']
       nb pts echantillon = [50]
         largeur, hauteur = 0.197028, 0.0449079
              position cg = 0.0758591, -0.00277913
                 longueur = 0.417193
                 ruptures = [0, 84]
              composantes = [u'spline-0#.spl-#0']
      nb pts ctl par comp = [85]
[debugNSplineComposee] (module testsplinecomposee.py)

    S.insertPoint((20, 20)) spline-0#.spl
    -------------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = spline-0#.spl
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0, 0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000]
      mode echantillonage = ['courbure']
       nb pts echantillon = [50]
         largeur, hauteur = 19.9911, 20.4006
              position cg = 10.9371, 9.60376
                 longueur = 58.4364
                 ruptures = [0, 85]
              composantes = [u'spline-0#.spl-#0']
      nb pts ctl par comp = [86]
[debugNSplineComposee] (module testsplinecomposee.py)
points = [[0.19826802992985915, 0.018375252365315314], [20.0, 20.0], [0.19794480287106944, 0.01834272070354981], [0.19697698698919552, 0.01824623677494185], [0.1953702774774006, 0.01808958902653576], [0.1931358288664241, 0.017875693144972733], [0.19028583428723386, 0.01760562296168915], [0.1868384545974718, 0.017285054837965958], [0.18281511090777094, 0.016918270906626755], [0.17824096488117602, 0.016509173891976356], [0.17314462530889335, 0.016061944817467724], [0.1675537430578259, 0.015604499212682851], [0.1614973286514877, 0.015174339851535011], [0.15501547409801616, 0.01476301544479541], [0.14814887473118243, 0.014382204411655422], [0.14094161664548843, 0.01404602543987262], [0.13343803740726204, 0.013764527900251714], [0.1256843102751743, 0.013546355402456866], [0.1177282015279396, 0.013398542247611191], [0.10961878381119616, 0.013326344604007705], [0.10140777069911935, 0.013335842122885983], [0.09314601025397072, 0.013437177093512255], [0.08488781796914449, 0.013578520269711385], [0.0766738953033627, 0.013632458196371353], [0.06856323591182992, 0.01353409905950416], [0.0606164488281708, 0.013304461167690542], [0.052856052892464526, 0.013059342449209069], [0.0453684474302355, 0.012514624670064105], [0.03820317405116831, 0.011700858252567226], [0.031465000658872685, 0.010325988475611092], [0.02522516382607276, 0.00854410860172671], [0.019555599369543694, 0.006368827976875956], [0.01464147968249857, 0.0036669939851828783], [0.010529683712971444, 0.0006142797736657014], [0.007168508215863512, -0.00250386359329716], [0.00460892851572893, -0.005638541978805265], [0.0028090701540139096, -0.008578221534910934], [0.001731126981130246, -0.011241889812954544], [0.0013226130588773338, -0.013436226900254741], [0.0012463666899211606, -0.015048272995508682], [0.0012621750824154676, -0.01603165306198891], [0.0013064793274175368, -0.016354383168070755], [0.0019002545933359677, -0.0178178378697296], [0.003038224543861656, -0.018879043993261704], [0.006016449460611098, -0.0200909099225535], [0.007469754807355844, -0.020376634901748375], [0.008726095549224322, -0.020529904553889606], [0.014218400219488211, -0.023878902334992402], [0.014398081644958094, -0.02396735630809685], [0.015197198260028882, -0.024281834892644814], [0.01673211185050706, -0.02475624420294783], [0.018932617419180384, -0.02520978219708351], [0.021785463220938397, -0.025645905463240734], [0.02522271140842708, -0.026064196531377606], [0.02925574495723343, -0.02641152974422608], [0.033845237305718284, -0.02653221514625864], [0.038947430958838715, -0.026354055912099918], [0.044511523245849116, -0.025839955920168155], [0.05050040896951644, -0.025145329314118246], [0.056870487659067694, -0.02427306330197574], [0.06357222892430342, -0.023194541295967246], [0.07055098958531437, -0.0218879648783359], [0.07774646013511402, -0.02034773888235674], [0.0851068986184996, -0.01857801400192227], [0.09257000987875212, -0.016548089775460923], [0.100088359797009, -0.014301530106094675], [0.10763999263062264, -0.012013147317012961], [0.11518796289582062, -0.009711882843429363], [0.12267813649910199, -0.007387868565333472], [0.1300501425379935, -0.005046629027279274], [0.1372535147043784, -0.0027089344571262853], [0.14424065209121723, -0.0003965631537611957], [0.15096584323243173, 0.0018687037590304888], [0.15738624966634163, 0.004067831221825499], [0.16345932580186817, 0.006183734681924342], [0.1691446587959791, 0.008199471951596279], [0.17440606971176356, 0.010090095613349616], [0.17921687846293866, 0.011799444411978706], [0.18354939054638394, 0.01330904520554502], [0.1873705697642064, 0.014625728742846317], [0.19065150614664395, 0.01575138642783522], [0.19336806025808184, 0.01668368161808636], [0.19550075540526604, 0.01741770279166735], [0.19703464221667694, 0.01794759421565453], [0.19795916180677225, 0.018268009236940826], [0.19826802992985915, 0.018375252365315314]]
[debugNSplineComposee] (module testsplinecomposee.py)

    S.insertPoint(pt,43) spline-0#.spl
    ----------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = spline-0#.spl
                     role = NSplineComposee
          nb pts controle = 87
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0, 0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000]
      mode echantillonage = ['courbure']
       nb pts echantillon = [50]
         largeur, hauteur = 22.1352, 22.1209
              position cg = 8.07606, 8.66936
                 longueur = 124.154
                 ruptures = [0, 86]
              composantes = [u'spline-0#.spl-#0']
      nb pts ctl par comp = [87]
[debugNSplineComposee] (module testsplinecomposee.py)

    S[0] = (2,0.5) (spline-0#.spl)
    ------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = spline-0#.spl
                     role = NSplineComposee
          nb pts controle = 87
                   closed = False
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0, 0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000]
      mode echantillonage = ['courbure']
       nb pts echantillon = [50]
         largeur, hauteur = 22.1354, 22.094
              position cg = 8.11021, 8.63357
                 longueur = 122.349
                 ruptures = [0, 86]
              composantes = [u'spline-0#.spl-#0']
      nb pts ctl par comp = [87]
[debugNSplineComposee] (module testsplinecomposee.py)

    S[len(S)-1] = S[0] (spline-0#.spl)
    ----------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = spline-0#.spl
                     role = NSplineComposee
          nb pts controle = 87
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0, 0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000]
      mode echantillonage = ['courbure']
       nb pts echantillon = [50]
         largeur, hauteur = 22.1354, 22.0938
              position cg = 8.11148, 8.63507
                 longueur = 124.215
                 ruptures = [0, 86]
              composantes = [u'spline-0#.spl-#0']
      nb pts ctl par comp = [87]
[debugNSplineComposee] (module testsplinecomposee.py)

    S.appendPoint((2,1.5)) (spline-0#.spl)
    --------------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = spline-0#.spl
                     role = NSplineComposee
          nb pts controle = 88
                   closed = False
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0, 0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000]
      mode echantillonage = ['courbure']
       nb pts echantillon = [50]
         largeur, hauteur = 22.1354, 22.0939
              position cg = 8.10324, 8.62486
                 longueur = 125.276
                 ruptures = [0, 87]
              composantes = [u'spline-0#.spl-#0']
      nb pts ctl par comp = [88]
[debugNSplineComposee] (module testsplinecomposee.py)

    S.insertPoint((2,-2)) (spline-0#.spl)
    -------------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = spline-0#.spl
                     role = NSplineComposee
          nb pts controle = 89
                   closed = False
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0, 0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000]
      mode echantillonage = ['courbure']
       nb pts echantillon = [50]
         largeur, hauteur = 22.1353, 22.3535
              position cg = 8.04197, 8.53818
                 longueur = 128.784
                 ruptures = [0, 88]
              composantes = [u'spline-0#.spl-#0']
      nb pts ctl par comp = [89]
[debugNSplineComposee] (module testsplinecomposee.py)

    S.insertPoint((6,0)) (spline-0#.spl)
    ------------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = spline-0#.spl
                     role = NSplineComposee
          nb pts controle = 90
                   closed = False
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0, 0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000]
      mode echantillonage = ['courbure']
       nb pts echantillon = [50]
         largeur, hauteur = 22.1353, 22.3513
              position cg = 9.72299, 8.65661
                 longueur = 131.124
                 ruptures = [0, 89]
              composantes = [u'spline-0#.spl-#0']
      nb pts ctl par comp = [90]
[debugNSplineComposee] (module testsplinecomposee.py)

    S.removePoint(3) (spline-0#.spl)
    --------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = spline-0#.spl
                     role = NSplineComposee
          nb pts controle = 89
                   closed = False
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0, 0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000]
      mode echantillonage = ['courbure']
       nb pts echantillon = [50]
         largeur, hauteur = 22.1353, 22.3513
              position cg = 9.7223, 8.65686
                 longueur = 131.124
                 ruptures = [0, 88]
              composantes = [u'spline-0#.spl-#0']
      nb pts ctl par comp = [89]
[debugNSplineComposee] (module testsplinecomposee.py)

    S._update() (spline-0#.spl)
    ---------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = spline-0#.spl
                     role = NSplineComposee
          nb pts controle = 89
                   closed = False
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0, 0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000]
      mode echantillonage = ['courbure']
       nb pts echantillon = [50]
         largeur, hauteur = 22.1353, 22.3513
              position cg = 9.7223, 8.65686
                 longueur = 131.126
                 ruptures = [0, 88]
              composantes = [u'spline-0#.spl-#0']
      nb pts ctl par comp = [89]
[debugNSplineComposee] (module testsplinecomposee.py)
========================================
Fin debugNSplineComposee : spline-0#.spl
========================================


[testNSplineComposee] (module testsplinecomposee.py)
=====================================
testNSplineComposee : (spline-0#.spl)
=====================================


[testNSplineComposee] (module testsplinecomposee.py)

    1. Constructeur vide
    --------------------

[testNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = vide
                     role = NSplineComposee
          nb pts controle = 1
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = []
    nb pts discretisation = []
      mode echantillonage = []
       nb pts echantillon = []
         largeur, hauteur = 0, 0
              position cg = 0, 0
                 longueur = 0
                 ruptures = [0]
              composantes = []
      nb pts ctl par comp = []
[testNSplineComposee] (module testsplinecomposee.py)

    methode-0 : [('cubic', 'natural'), ('cubic', 'natural')] (spline-0#.spl)
    ------------------------------------------------------------------------

[testNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = spline-0#.spl-1
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', 'natural'), ('cubic', 'natural')]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [100, 100]
         largeur, hauteur = 1, 0.193929
              position cg = 0.378884, 0.00211538
                 longueur = 2.08596
                 ruptures = [0, 40, 85]
              composantes = [u'spline-0#.spl-1-#0', u'spline-0#.spl-1-#1']
      nb pts ctl par comp = [41, 46]
[testNSplineComposee] (module testsplinecomposee.py)

    methode-1 : [('cubic', ((1, 0, 3.14), (1, 0, -3.14))), ('cubic', ((1, 0, 0), (1, 0, 0)))] (spline-0#.spl)
    ---------------------------------------------------------------------------------------------------------

[testNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = spline-0#.spl-2
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((1, 0, 3.14), (1, 0, -3.14))), ('cubic', ((1, 0, 0), (1, 0, 0)))]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [100, 100]
         largeur, hauteur = 1, 0.193929
              position cg = 0.378879, 0.00211539
                 longueur = 2.08753
                 ruptures = [0, 40, 85]
              composantes = [u'spline-0#.spl-2-#0', u'spline-0#.spl-2-#1']
      nb pts ctl par comp = [41, 46]
[testNSplineComposee] (module testsplinecomposee.py)

    methode-2 : [('cubic', 'not-a-knot'), ('cubic', 'not-a-knot')] (spline-0#.spl)
    ------------------------------------------------------------------------------

[testNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = spline-0#.spl-3
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', 'not-a-knot'), ('cubic', 'not-a-knot')]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [100, 100]
         largeur, hauteur = 1.00003, 0.193929
              position cg = 0.37888, 0.00211534
                 longueur = 2.08601
                 ruptures = [0, 40, 85]
              composantes = [u'spline-0#.spl-3-#0', u'spline-0#.spl-3-#1']
      nb pts ctl par comp = [41, 46]
[testNSplineComposee] (module testsplinecomposee.py)

    methode-3 : [['cubic', ((1, 0, 2), (1, 0, -2))], ['cubic', ((1, 1, 0), (1, 1, 0))]] (spline-0#.spl)
    ---------------------------------------------------------------------------------------------------

[testNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = spline-0#.spl-4
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [['cubic', ((1, 0, 2), (1, 0, -2))], ['cubic', ((1, 1, 0), (1, 1, 0))]]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [100, 100]
         largeur, hauteur = 1, 0.193929
              position cg = 0.378898, 0.00211555
                 longueur = 2.08754
                 ruptures = [0, 40, 85]
              composantes = [u'spline-0#.spl-4-#0', u'spline-0#.spl-4-#1']
      nb pts ctl par comp = [41, 46]
[testNSplineComposee] (module testsplinecomposee.py)

    methode-4 : [('cubic', ((2, 0, 0), (1, 0, -5))), ('cubic', ((1, 0, -5), (2, 0, 0)))] (spline-0#.spl)
    ----------------------------------------------------------------------------------------------------

[testNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = spline-0#.spl-5
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0, 0), (1, 0, -5))), ('cubic', ((1, 0, -5), (2, 0, 0)))]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [100, 100]
         largeur, hauteur = 1, 0.193929
              position cg = 0.378875, 0.00211524
                 longueur = 2.08959
                 ruptures = [0, 40, 85]
              composantes = [u'spline-0#.spl-5-#0', u'spline-0#.spl-5-#1']
      nb pts ctl par comp = [41, 46]
[testNSplineComposee] (module testsplinecomposee.py)

    hardScale : spline-0#.spl
    -------------------------

[testNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = spline-0#.spl-5
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0.0, 0.0), (1, 0.0, -1.0))), ('cubic', ((1, 0.0, -1.0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [100, 100]
         largeur, hauteur = 0.2, 0.0387857
              position cg = 0.452251, -0.00241946
                 longueur = 0.417918
                 ruptures = [0, 40, 85]
              composantes = [u'spline-0#.spl-5-#0', u'spline-0#.spl-5-#1']
      nb pts ctl par comp = [41, 46]
[testNSplineComposee] (module testsplinecomposee.py)

    translate((-1.5,0.05)) : spline-0#.spl
    --------------------------------------

[testNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = spline-0#.spl-5
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0.0, 0.0), (1, 0.0, -1.0))), ('cubic', ((1, 0.0, -1.0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [100, 100]
         largeur, hauteur = 0.2, 0.0387857
              position cg = -1.04775, 0.0475805
                 longueur = 0.417918
                 ruptures = [0, 40, 85]
              composantes = [u'spline-0#.spl-5-#0', u'spline-0#.spl-5-#1']
      nb pts ctl par comp = [41, 46]
[testNSplineComposee] (module testsplinecomposee.py)

    hardRotate(30) : spline-0#.spl
    ------------------------------

[testNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = spline-0#.spl-5
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [['cubic', [(2, 0.0, 0.0), (1, 0.49999999999999994, -0.8660254037844387)]], ['cubic', [(1, 0.49999999999999994, -0.8660254037844387), (2, 0.0, 0.0)]]]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [100, 100]
         largeur, hauteur = 0.174596, 0.1027
              position cg = -1.04586, 0.0382567
                 longueur = 0.417918
                 ruptures = [0, 40, 85]
              composantes = [u'spline-0#.spl-5-#0', u'spline-0#.spl-5-#1']
      nb pts ctl par comp = [41, 46]
[testNSplineComposee] (module testsplinecomposee.py)

    symetriser(1) : spline-0#.spl
    -----------------------------

[testNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = spline-0#.spl-5
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0.0, -0.0), (1, 0.49999999999999994, 0.8660254037844387))), ('cubic', ((1, 0.49999999999999994, 0.8660254037844387), (2, 0.0, -0.0)))]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [100, 100]
         largeur, hauteur = 0.174596, 0.1027
              position cg = -1.04586, 0.054637
                 longueur = 0.417918
                 ruptures = [0, 40, 85]
              composantes = [u'spline-0#.spl-5-#0', u'spline-0#.spl-5-#1']
      nb pts ctl par comp = [41, 46]
[testNSplineComposee] (module testsplinecomposee.py)

    symetriser(1) : spline-0#.spl
    -----------------------------

[testNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = spline-0#.spl
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [['cubic', ((2, 0, 0), (1, 0, -20))], ['cubic', ((1, 0, -20), (2, 0, 0))]]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [20, 10]
         largeur, hauteur = 1, 0.193929
              position cg = 0.378852, 0.00211315
                 longueur = 2.1524
                 ruptures = [0, 40, 85]
              composantes = [u'spline-0#.spl-#0', u'spline-0#.spl-#1']
      nb pts ctl par comp = [41, 46]
[testNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = spline-0#.spl
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0.0, 0.0), (1, 0.0, -4.0))), ('cubic', ((1, 0.0, -4.0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [20, 10]
         largeur, hauteur = 0.2, 0.0387857
              position cg = 0.0757705, 0.00042263
                 longueur = 0.43048
                 ruptures = [0, 40, 85]
              composantes = [u'spline-0#.spl-#0', u'spline-0#.spl-#1']
      nb pts ctl par comp = [41, 46]
[testNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = spline-0#.spl
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [['cubic', [(2, 0.0, 0.0), (1, 0.6945927106677213, -3.939231012048832)]], ['cubic', [(1, 0.6945927106677213, -3.939231012048832), (2, 0.0, 0.0)]]]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [20, 10]
         largeur, hauteur = 0.197134, 0.0449081
              position cg = 0.0758525, -0.00278077
                 longueur = 0.43048
                 ruptures = [0, 40, 85]
              composantes = [u'spline-0#.spl-#0', u'spline-0#.spl-#1']
      nb pts ctl par comp = [41, 46]
[testNSplineComposee] (module testsplinecomposee.py)
join_1 = <NSplineComposee>
                     name = spline-0#.spl
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [['cubic', [(2, 0.0, 0.0), (1, 0.6945927106677213, -3.939231012048832)]], ['cubic', [(1, 0.6945927106677213, -3.939231012048832), (2, 0.0, 0.0)]]]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [20, 10]
         largeur, hauteur = 0.197134, 0.0449081
              position cg = 0.0758525, -0.00278077
                 longueur = 0.43048
                 ruptures = [0, 40, 85]
              composantes = [u'spline-0#.spl-#0', u'spline-0#.spl-#1']
      nb pts ctl par comp = [41, 46] ; R = [[ 0.19826803  0.01837525]
 [ 0.00130648 -0.01635438]
 [ 0.19826803  0.01837525]]
[testNSplineComposee] (module testsplinecomposee.py)
S = <NSplineComposee>
                     name = spline-0#.spl
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [['cubic', [(2, 0.0, 0.0), (1, 0.6945927106677213, -3.939231012048832)]], ['cubic', [(1, 0.6945927106677213, -3.939231012048832), (2, 0.0, 0.0)]]]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [20, 10]
         largeur, hauteur = 0.197134, 0.0449081
              position cg = 0.0758525, -0.00278077
                 longueur = 0.43048
                 ruptures = [0, 40, 85]
              composantes = [u'spline-0#.spl-#0', u'spline-0#.spl-#1']
      nb pts ctl par comp = [41, 46] ; R = [[ 0.19826803  0.01837525]
 [ 0.00130648 -0.01635438]
 [ 0.19826803  0.01837525]]
[testNSplineComposee] (module testsplinecomposee.py)
join_1 = <NSplineComposee>
                     name = spline-0#.spl
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [['cubic', [(1, 0.6945927106677213, -3.939231012048832), (2, 0.0, 0.0)]]]
    nb pts discretisation = [1000]
      mode echantillonage = ['courbure']
       nb pts echantillon = [10]
         largeur, hauteur = 0.197028, 0.0454
              position cg = 0.0758637, -0.00277833
                 longueur = 0.419011
                 ruptures = [0, 85]
              composantes = [u'spline-0#.spl-#0']
      nb pts ctl par comp = [86] ; R = [[0.19826803 0.01837525]
 [0.19826803 0.01837525]]
[testNSplineComposee] (module testsplinecomposee.py)
split_nba = <NSplineComposee>
                     name = spline-0#.spl
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((1, 0.6945927106677213, -3.939231012048832), (2, 0, 0))), ('cubic', ((2, 0, 0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [10, 10]
         largeur, hauteur = 0.19703, 0.0460514
              position cg = 0.0758636, -0.00277822
                 longueur = 0.421709
                 ruptures = [0, 40, 85]
              composantes = [u'spline-0#.spl-#0', u'spline-0#.spl-#1']
      nb pts ctl par comp = [41, 46] ; R = [[ 0.19826803  0.01837525]
 [ 0.00130648 -0.01635438]
 [ 0.19826803  0.01837525]]
[testNSplineComposee] (module testsplinecomposee.py)
normal ; On tente la suppression d'un point anguleux (40)
[testNSplineComposee] (module testsplinecomposee.py)
points = [[0.19826802992985915, 0.018375252365315314], [20.0, 20.0], [0.19794480287106944, 0.01834272070354981], [0.19697698698919552, 0.01824623677494185], [0.1953702774774006, 0.01808958902653576], [0.1931358288664241, 0.017875693144972733], [0.19028583428723386, 0.01760562296168915], [0.1868384545974718, 0.017285054837965958], [0.18281511090777094, 0.016918270906626755], [0.17824096488117602, 0.016509173891976356], [0.17314462530889335, 0.016061944817467724], [0.1675537430578259, 0.015604499212682851], [0.1614973286514877, 0.015174339851535011], [0.15501547409801616, 0.01476301544479541], [0.14814887473118243, 0.014382204411655422], [0.14094161664548843, 0.01404602543987262], [0.13343803740726204, 0.013764527900251714], [0.1256843102751743, 0.013546355402456866], [0.1177282015279396, 0.013398542247611191], [0.10961878381119616, 0.013326344604007705], [0.10140777069911935, 0.013335842122885983], [0.09314601025397072, 0.013437177093512255], [0.08488781796914449, 0.013578520269711385], [0.0766738953033627, 0.013632458196371353], [0.06856323591182992, 0.01353409905950416], [0.0606164488281708, 0.013304461167690542], [0.052856052892464526, 0.013059342449209069], [0.0453684474302355, 0.012514624670064105], [0.03820317405116831, 0.011700858252567226], [0.031465000658872685, 0.010325988475611092], [0.02522516382607276, 0.00854410860172671], [0.019555599369543694, 0.006368827976875956], [0.01464147968249857, 0.0036669939851828783], [0.010529683712971444, 0.0006142797736657014], [0.007168508215863512, -0.00250386359329716], [0.00460892851572893, -0.005638541978805265], [0.0028090701540139096, -0.008578221534910934], [0.001731126981130246, -0.011241889812954544], [0.0013226130588773338, -0.013436226900254741], [0.0012463666899211606, -0.015048272995508682], [0.0012621750824154676, -0.01603165306198891], [0.0019002545933359677, -0.0178178378697296], [0.003038224543861656, -0.018879043993261704], [0.004454154613897199, -0.019624031721912582], [0.006016449460611098, -0.0200909099225535], [0.007469754807355844, -0.020376634901748375], [0.008726095549224322, -0.020529904553889606], [0.014218400219488211, -0.023878902334992402], [0.014398081644958094, -0.02396735630809685], [0.015197198260028882, -0.024281834892644814], [0.01673211185050706, -0.02475624420294783], [0.018932617419180384, -0.02520978219708351], [0.021785463220938397, -0.025645905463240734], [0.02522271140842708, -0.026064196531377606], [0.02925574495723343, -0.02641152974422608], [0.033845237305718284, -0.02653221514625864], [0.038947430958838715, -0.026354055912099918], [0.044511523245849116, -0.025839955920168155], [0.05050040896951644, -0.025145329314118246], [0.056870487659067694, -0.02427306330197574], [0.06357222892430342, -0.023194541295967246], [0.07055098958531437, -0.0218879648783359], [0.07774646013511402, -0.02034773888235674], [0.0851068986184996, -0.01857801400192227], [0.09257000987875212, -0.016548089775460923], [0.100088359797009, -0.014301530106094675], [0.10763999263062264, -0.012013147317012961], [0.11518796289582062, -0.009711882843429363], [0.12267813649910199, -0.007387868565333472], [0.1300501425379935, -0.005046629027279274], [0.1372535147043784, -0.0027089344571262853], [0.14424065209121723, -0.0003965631537611957], [0.15096584323243173, 0.0018687037590304888], [0.15738624966634163, 0.004067831221825499], [0.16345932580186817, 0.006183734681924342], [0.1691446587959791, 0.008199471951596279], [0.17440606971176356, 0.010090095613349616], [0.17921687846293866, 0.011799444411978706], [0.18354939054638394, 0.01330904520554502], [0.1873705697642064, 0.014625728742846317], [0.19065150614664395, 0.01575138642783522], [0.19336806025808184, 0.01668368161808636], [0.19550075540526604, 0.01741770279166735], [0.19703464221667694, 0.01794759421565453], [0.19795916180677225, 0.018268009236940826], [0.19826802992985915, 0.018375252365315314]]
<NSplineComposee>
                     name = spline-0#.spl
                     role = NSplineComposee
          nb pts controle = 90
                   closed = False
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0, 0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000]
      mode echantillonage = ['courbure']
       nb pts echantillon = [10]
         largeur, hauteur = 22.598, 22.1758
              position cg = 9.9613, 8.71364
                 longueur = 130.631
                 ruptures = [0, 89]
              composantes = [u'spline-0#.spl-#0']
      nb pts ctl par comp = [90]
[testNSplineComposee] (module testsplinecomposee.py)
=========================================
Fin testNSplineComposee : (spline-0#.spl)
=========================================


[debugNSplineComposee] (module testsplinecomposee.py)
=====================================
debugNSplineComposee : (spline-0.spl)
=====================================


[debugNSplineComposee] (module testsplinecomposee.py)

    Constructeur vide
    -----------------

<NSplineComposee>
                     name = NSplineComposee
                     role = NSplineComposee
          nb pts controle = 1
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = []
    nb pts discretisation = []
      mode echantillonage = []
       nb pts echantillon = []
         largeur, hauteur = 0, 0
              position cg = 0, 0
                 longueur = 0
                 ruptures = [0]
              composantes = []
      nb pts ctl par comp = []
[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = spline-0.spl
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0, 0), (1, 0, -5))), ('cubic', ((1, 0, -5), (2, 0, 0)))]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [50, 40]
         largeur, hauteur = 1, 0.193929
              position cg = 0.378875, 0.00211524
                 longueur = 2.08959
                 ruptures = [0, 40, 85]
              composantes = [u'spline-0.spl-#0', u'spline-0.spl-#1']
      nb pts ctl par comp = [41, 46]
[debugNSplineComposee] (module testsplinecomposee.py)

    elaguer(eps=1, replace=True) : (spline-0.spl)
    ---------------------------------------------

[elaguer] (module splinesimple.py)
historique_distances = [414.78, 160.87, 71.08, 36.56, 17.32, 12.27, 5.7, 3.79, 2.32, 2.08, 1.21, 0.76]
[elaguer] (module splinesimple.py)
Apres ELAGAGE : dist = 0.76 mm/m ; 41 points => 14 points 
[elaguer] (module splinesimple.py)
historique_distances = [414.66, 178.69, 88.1, 33.12, 29.0, 11.54, 5.69, 1.82, 2.64, 1.47, 0.95]
[elaguer] (module splinesimple.py)
Apres ELAGAGE : dist = 0.95 mm/m ; 46 points => 13 points 
[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = spline-0.spl
                     role = NSplineComposee
          nb pts controle = 26
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0, 0), (1, 0, -5))), ('cubic', ((1, 0, -5), (2, 0, 0)))]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [50, 40]
         largeur, hauteur = 1, 0.193369
              position cg = 0.379756, 0.00208842
                 longueur = 2.09059
                 ruptures = [0, 13, 25]
              composantes = [u'spline-0.spl-#0', u'spline-0.spl-#1']
      nb pts ctl par comp = [14, 13]
[debugNSplineComposee] (module testsplinecomposee.py)

    echantillonner() (spline-0.spl)
    -------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
echantillon = [[1.0, 0.0], [0.8891418458205159, 0.00950664059246881], [0.8241065780893738, 0.01570562760524625], [0.7696347812257205, 0.021538334555701526], [0.7204333924978681, 0.027471532936248606], [0.672545525096616, 0.03393110619657099], [0.6256163896464044, 0.040946439282213955], [0.5795932818242299, 0.048513035401255906], [0.5310784491785587, 0.05723711933571906], [0.44695595524370707, 0.07309769393655868], [0.3976280086662947, 0.08185440350799157], [0.34838125114391433, 0.08989758091627312], [0.30182119867219376, 0.09685871795475196], [0.27149949346231483, 0.10082668753110718], [0.2472363860153241, 0.10336537620601834], [0.2259389516857354, 0.10494195365096329], [0.2065184652203255, 0.10572054172997516], [0.1884046168394041, 0.10578165455298744], [0.17126574587742963, 0.10516793911810218], [0.15516384500383806, 0.10392213293744229], [0.14017461816069557, 0.10208812471601818], [0.1261930062837371, 0.09969919960752696], [0.11309672502050222, 0.09677858394769702], [0.10080519757133291, 0.09334835107410917], [0.08922208713628993, 0.08941637733695605], [0.07827951519108452, 0.08498771705701572], [0.06783596674521854, 0.08002646539967762], [0.057910394520877886, 0.07455724096188425], [0.048544694584923755, 0.06861872040876166], [0.03976487729522813, 0.062245080262647336], [0.031464803748404116, 0.05536948483373497], [0.02380898510508279, 0.048160533158749644], [0.017971927735640998, 0.04183660575653233], [0.01326637930605598, 0.035747914810752505], [0.008498037109473711, 0.028274086631351062], [0.005087891153061475, 0.022028094934241665], [0.003516921679664259, 0.01798086210620182], [0.0016971769782871203, 0.00919649422107709], [0.0011206562351147354, 0.006743747757739395], [0.0009834457144535051, 0.006511419793269777], [0.0009195079440538239, 0.0064694143710641635], [0.0008701774381662531, 0.006468560264822478], [0.0008107284657677532, 0.006505978067131255], [0.0006707878959529258, 0.006729284685445411], [0.00042093709128068513, 0.0072448865305027015], [0.00036168304820483407, 0.007303880336368927], [0.0003315337559591886, 0.007310304061277726], [0.00030230552421760796, 0.007296289245358696], [0.00024536703457941845, 0.007192606896472126], [-1.0842021724855044e-19, 0.0], [0.00035644862761962103, -0.008679294238669621], [0.0004592623246258791, -0.008817809359489195], [0.0005327681466244933, -0.008832314740800814], [0.0006467456466258719, -0.008771704051514295], [0.0011764436786299434, -0.008099579141184468], [0.001581851685989839, -0.007747836457096799], [0.0018758613226495164, -0.007712487215932706], [0.002344773678935332, -0.00796295308271688], [0.003880318083094649, -0.010018649206638064], [0.007601811845447761, -0.015456847537391542], [0.010309842188861213, -0.01761561691949004], [0.014993335653275524, -0.019826063370456372], [0.026616532469787655, -0.02406573997520404], [0.032750177132570495, -0.026912525812415815], [0.037742422665273244, -0.03026593650968116], [0.04385404602743672, -0.03570138915767021], [0.05369534478861791, -0.04542452775099455], [0.05918924722117225, -0.049846210327577446], [0.06532480834911718, -0.053579799832726316], [0.07303890962435028, -0.057127988003153274], [0.08394418256961969, -0.060924715121230454], [0.11653440286772909, -0.07027334619724225], [0.13704834578867048, -0.07543958636257042], [0.15353793709883864, -0.07874572058934039], [0.17092543160291862, -0.08125233821247689], [0.1931138276839321, -0.08339775036470282], [0.22750089707782964, -0.08558364639927211], [0.26400995119012155, -0.08700955179486533], [0.30044142780199795, -0.08752707876032095], [0.3367814660089027, -0.08714055908098153], [0.3730472682852259, -0.08585283669871266], [0.40920451627531834, -0.0836674308286848], [0.44527047301989925, -0.08058487551578199], [0.48658647664877724, -0.07602107494266823], [0.6051132022139678, -0.06115457030123257], [0.6785756234727679, -0.05131880908761625], [0.7548170409394694, -0.040128019929877835], [0.8456085490878391, -0.02578942052548065], [1.0, -1.734723475976807e-18]]
[debugNSplineComposee] (module testsplinecomposee.py)

    hardScale((0.2, 0.2)) : (spline-0.spl)
    --------------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = spline-0.spl
                     role = NSplineComposee
          nb pts controle = 26
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0.0, 0.0), (1, 0.0, -1.0))), ('cubic', ((1, 0.0, -1.0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [50, 40]
         largeur, hauteur = 0.2, 0.0386739
              position cg = 0.278692, 0.00300392
                 longueur = 0.418118
                 ruptures = [0, 13, 25]
              composantes = [u'spline-0.spl-#0', u'spline-0.spl-#1']
      nb pts ctl par comp = [14, 13]
[debugNSplineComposee] (module testsplinecomposee.py)

    translate((-1.5,0.05)) : (spline-0.spl)
    ---------------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = spline-0.spl
                     role = NSplineComposee
          nb pts controle = 26
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0.0, 0.0), (1, 0.0, -1.0))), ('cubic', ((1, 0.0, -1.0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [50, 40]
         largeur, hauteur = 0.2, 0.0386739
              position cg = -1.22131, 0.0530039
                 longueur = 0.418118
                 ruptures = [0, 13, 25]
              composantes = [u'spline-0.spl-#0', u'spline-0.spl-#1']
      nb pts ctl par comp = [14, 13]
[debugNSplineComposee] (module testsplinecomposee.py)

    hardRotate(30) (spline-0.spl)
    -----------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = spline-0.spl
                     role = NSplineComposee
          nb pts controle = 26
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0.0, 0.0), (1, 0.0, -1.0))), ('cubic', ((1, 0.0, -1.0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [50, 40]
         largeur, hauteur = 0.2, 0.0386739
              position cg = -1.22131, 0.0530039
                 longueur = 0.418118
                 ruptures = [0, 13, 25]
              composantes = [u'spline-0.spl-#0', u'spline-0.spl-#1']
      nb pts ctl par comp = [14, 13]
[debugNSplineComposee] (module testsplinecomposee.py)

    symetriser(1) (spline-0.spl)
    ----------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = spline-0.spl
                     role = NSplineComposee
          nb pts controle = 26
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [['cubic', [(2, 0.0, 0.0), (1, 0.49999999999999994, -0.8660254037844387)]], ['cubic', [(1, 0.49999999999999994, -0.8660254037844387), (2, 0.0, 0.0)]]]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [50, 40]
         largeur, hauteur = 0.174561, 0.102756
              position cg = -1.22458, 0.0656675
                 longueur = 0.418118
                 ruptures = [0, 13, 25]
              composantes = [u'spline-0.spl-#0', u'spline-0.spl-#1']
      nb pts ctl par comp = [14, 13]
[debugNSplineComposee] (module testsplinecomposee.py)

    reconstruction (spline-0.spl)
    -----------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = spline-0.spl
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [['cubic', ((2, 0, 0), (1, 0, -20))], ['cubic', ((1, 0, -20), (2, 0, 0))]]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [50, 50]
         largeur, hauteur = 1, 0.193929
              position cg = 0.378852, 0.00211315
                 longueur = 2.1524
                 ruptures = [0, 40, 85]
              composantes = [u'spline-0.spl-#0', u'spline-0.spl-#1']
      nb pts ctl par comp = [41, 46]
[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = spline-0.spl
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [['cubic', ((2, 0, 0), (1, 0, -20))], ['cubic', ((1, 0, -20), (2, 0, 0))]]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [50, 50]
         largeur, hauteur = 1, 0.193929
              position cg = 0.378852, 0.00211315
                 longueur = 2.1524
                 ruptures = [0, 40, 85]
              composantes = [u'spline-0.spl-#0', u'spline-0.spl-#1']
      nb pts ctl par comp = [41, 46]
[debugNSplineComposee] (module testsplinecomposee.py)

    hardScale((0.2,0.2), centre=np.asarray((0,0))) (spline-0.spl)
    -------------------------------------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = spline-0.spl
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0.0, 0.0), (1, 0.0, -4.0))), ('cubic', ((1, 0.0, -4.0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [50, 50]
         largeur, hauteur = 0.2, 0.0387857
              position cg = 0.0757705, 0.00042263
                 longueur = 0.43048
                 ruptures = [0, 40, 85]
              composantes = [u'spline-0.spl-#0', u'spline-0.spl-#1']
      nb pts ctl par comp = [41, 46]
[debugNSplineComposee] (module testsplinecomposee.py)

    S.hardRotate(10) (spline-0.spl)
    -------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = spline-0.spl
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [['cubic', [(2, 0.0, 0.0), (1, 0.6945927106677213, -3.939231012048832)]], ['cubic', [(1, 0.6945927106677213, -3.939231012048832), (2, 0.0, 0.0)]]]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [50, 50]
         largeur, hauteur = 0.197134, 0.0449081
              position cg = 0.0758525, -0.00278077
                 longueur = 0.43048
                 ruptures = [0, 40, 85]
              composantes = [u'spline-0.spl-#0', u'spline-0.spl-#1']
      nb pts ctl par comp = [41, 46]
[debugNSplineComposee] (module testsplinecomposee.py)

    S.toDump() (spline-0.spl)
    -------------------------

{'classename': 'NSplineComposee',
 'cpoints': [[0.19826802992985915, 0.018375252365315314],
             [0.19794480287106944, 0.01834272070354981],
             [0.19697698698919552, 0.01824623677494185],
             [0.1953702774774006, 0.01808958902653576],
             [0.1931358288664241, 0.017875693144972733],
             [0.19028583428723386, 0.01760562296168915],
             [0.1868384545974718, 0.017285054837965958],
             [0.18281511090777094, 0.016918270906626755],
             [0.17824096488117602, 0.016509173891976356],
             [0.17314462530889335, 0.016061944817467724],
             [0.1675537430578259, 0.015604499212682851],
             [0.1614973286514877, 0.015174339851535011],
             [0.15501547409801616, 0.01476301544479541],
             [0.14814887473118243, 0.014382204411655422],
             [0.14094161664548843, 0.01404602543987262],
             [0.13343803740726204, 0.013764527900251714],
             [0.1256843102751743, 0.013546355402456866],
             [0.1177282015279396, 0.013398542247611191],
             [0.10961878381119616, 0.013326344604007705],
             [0.10140777069911935, 0.013335842122885983],
             [0.09314601025397072, 0.013437177093512255],
             [0.08488781796914449, 0.013578520269711385],
             [0.0766738953033627, 0.013632458196371353],
             [0.06856323591182992, 0.01353409905950416],
             [0.0606164488281708, 0.013304461167690542],
             [0.052856052892464526, 0.013059342449209069],
             [0.0453684474302355, 0.012514624670064105],
             [0.03820317405116831, 0.011700858252567226],
             [0.031465000658872685, 0.010325988475611092],
             [0.02522516382607276, 0.00854410860172671],
             [0.019555599369543694, 0.006368827976875956],
             [0.01464147968249857, 0.0036669939851828783],
             [0.010529683712971444, 0.0006142797736657014],
             [0.007168508215863512, -0.00250386359329716],
             [0.00460892851572893, -0.005638541978805265],
             [0.0028090701540139096, -0.008578221534910934],
             [0.001731126981130246, -0.011241889812954544],
             [0.0013226130588773338, -0.013436226900254741],
             [0.0012463666899211606, -0.015048272995508682],
             [0.0012621750824154676, -0.01603165306198891],
             [0.0013064793274175368, -0.016354383168070755],
             [0.0019002545933359677, -0.0178178378697296],
             [0.003038224543861656, -0.018879043993261704],
             [0.004454154613897199, -0.019624031721912582],
             [0.006016449460611098, -0.0200909099225535],
             [0.007469754807355844, -0.020376634901748375],
             [0.008726095549224322, -0.020529904553889606],
             [0.014218400219488211, -0.023878902334992402],
             [0.014398081644958094, -0.02396735630809685],
             [0.015197198260028882, -0.024281834892644814],
             [0.01673211185050706, -0.02475624420294783],
             [0.018932617419180384, -0.02520978219708351],
             [0.021785463220938397, -0.025645905463240734],
             [0.02522271140842708, -0.026064196531377606],
             [0.02925574495723343, -0.02641152974422608],
             [0.033845237305718284, -0.02653221514625864],
             [0.038947430958838715, -0.026354055912099918],
             [0.044511523245849116, -0.025839955920168155],
             [0.05050040896951644, -0.025145329314118246],
             [0.056870487659067694, -0.02427306330197574],
             [0.06357222892430342, -0.023194541295967246],
             [0.07055098958531437, -0.0218879648783359],
             [0.07774646013511402, -0.02034773888235674],
             [0.0851068986184996, -0.01857801400192227],
             [0.09257000987875212, -0.016548089775460923],
             [0.100088359797009, -0.014301530106094675],
             [0.10763999263062264, -0.012013147317012961],
             [0.11518796289582062, -0.009711882843429363],
             [0.12267813649910199, -0.007387868565333472],
             [0.1300501425379935, -0.005046629027279274],
             [0.1372535147043784, -0.0027089344571262853],
             [0.14424065209121723, -0.0003965631537611957],
             [0.15096584323243173, 0.0018687037590304888],
             [0.15738624966634163, 0.004067831221825499],
             [0.16345932580186817, 0.006183734681924342],
             [0.1691446587959791, 0.008199471951596279],
             [0.17440606971176356, 0.010090095613349616],
             [0.17921687846293866, 0.011799444411978706],
             [0.18354939054638394, 0.01330904520554502],
             [0.1873705697642064, 0.014625728742846317],
             [0.19065150614664395, 0.01575138642783522],
             [0.19336806025808184, 0.01668368161808636],
             [0.19550075540526604, 0.01741770279166735],
             [0.19703464221667694, 0.01794759421565453],
             [0.19795916180677225, 0.018268009236940826],
             [0.19826802992985915, 0.018375252365315314]],
 'methode': [['cubic',
              [(2, 0.0, 0.0), (1, 0.6945927106677213, -3.939231012048832)]],
             ['cubic',
              [(1, 0.6945927106677213, -3.939231012048832), (2, 0.0, 0.0)]]],
 'mode': ['courbure', 'courbure'],
 'name': u'spline-0.spl',
 'nbpd': [1000, 1000],
 'nbpe': [50, 50],
 'role': 'NSplineComposee',
 'ruptures': [0, 40, 85]}
[debugNSplineComposee] (module testsplinecomposee.py)

    NSplineComposee(**dump0) (spline-0.spl)
    ---------------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
join_1 = <NSplineComposee>
                     name = spline-0.spl
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [['cubic', [(2, 0.0, 0.0), (1, 0.6945927106677213, -3.939231012048832)]], ['cubic', [(1, 0.6945927106677213, -3.939231012048832), (2, 0.0, 0.0)]]]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [50, 50]
         largeur, hauteur = 0.197134, 0.0449081
              position cg = 0.0758525, -0.00278077
                 longueur = 0.43048
                 ruptures = [0, 40, 85]
              composantes = [u'spline-0.spl-#0', u'spline-0.spl-#1']
      nb pts ctl par comp = [41, 46]
[debugNSplineComposee] (module testsplinecomposee.py)
Rupture = [[0.19826802992985915, 0.018375252365315314], [0.0013064793274175368, -0.016354383168070755], [0.19826802992985915, 0.018375252365315314]]
[debugNSplineComposee] (module testsplinecomposee.py)

    dump1 = S.toDump() (spline-0.spl)
    ---------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
dump_equal_dump1 = True
[debugNSplineComposee] (module testsplinecomposee.py)

    S.load(dump1) (spline-0.spl)
    ----------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = spline-0.spl
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [['cubic', [(2, 0.0, 0.0), (1, 0.6945927106677213, -3.939231012048832)]], ['cubic', [(1, 0.6945927106677213, -3.939231012048832), (2, 0.0, 0.0)]]]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [50, 50]
         largeur, hauteur = 0.197134, 0.0449081
              position cg = 0.0758525, -0.00278077
                 longueur = 0.43048
                 ruptures = [0, 40, 85]
              composantes = [u'spline-0.spl-#0', u'spline-0.spl-#1']
      nb pts ctl par comp = [41, 46]
[debugNSplineComposee] (module testsplinecomposee.py)
R = [[ 0.19826803  0.01837525]
 [ 0.00130648 -0.01635438]
 [ 0.19826803  0.01837525]]
[debugNSplineComposee] (module testsplinecomposee.py)
dump1_equal_dump2 = False
[debugNSplineComposee] (module testsplinecomposee.py)

    S.join(1) (spline-0.spl)
    ------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = spline-0.spl
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [['cubic', [(1, 0.6945927106677213, -3.939231012048832), (2, 0.0, 0.0)]]]
    nb pts discretisation = [1000]
      mode echantillonage = ['courbure']
       nb pts echantillon = [50]
         largeur, hauteur = 0.197028, 0.0454
              position cg = 0.0758637, -0.00277833
                 longueur = 0.419011
                 ruptures = [0, 85]
              composantes = [u'spline-0.spl-#0']
      nb pts ctl par comp = [86]
[debugNSplineComposee] (module testsplinecomposee.py)
Ruptures = [[0.19826803 0.01837525]
 [0.19826803 0.01837525]]
[debugNSplineComposee] (module testsplinecomposee.py)

    S.split(len(S)/2) (spline-0.spl)
    --------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = spline-0.spl
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((1, 0.6945927106677213, -3.939231012048832), (2, 0, 0))), ('cubic', ((2, 0, 0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [50, 50]
         largeur, hauteur = 0.197029, 0.0460364
              position cg = 0.0758635, -0.00277823
                 longueur = 0.421585
                 ruptures = [0, 43, 85]
              composantes = [u'spline-0.spl-#0', u'spline-0.spl-#1']
      nb pts ctl par comp = [44, 43]
[debugNSplineComposee] (module testsplinecomposee.py)
ruptures = [[ 0.19826803  0.01837525]
 [ 0.00445415 -0.01962403]
 [ 0.19826803  0.01837525]]
[debugNSplineComposee] (module testsplinecomposee.py)

    removePoint(rupture[1]) (spline-0.spl)
    --------------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
normal ; On tente la suppression d'un point anguleux (43)
[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = spline-0.spl
                     role = NSplineComposee
          nb pts controle = 85
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0, 0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000]
      mode echantillonage = ['courbure']
       nb pts echantillon = [50]
         largeur, hauteur = 0.197028, 0.0449079
              position cg = 0.0758591, -0.00277913
                 longueur = 0.417193
                 ruptures = [0, 84]
              composantes = [u'spline-0.spl-#0']
      nb pts ctl par comp = [85]
[debugNSplineComposee] (module testsplinecomposee.py)

    S.insertPoint((20, 20)) spline-0.spl
    ------------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = spline-0.spl
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0, 0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000]
      mode echantillonage = ['courbure']
       nb pts echantillon = [50]
         largeur, hauteur = 19.9911, 20.4006
              position cg = 10.9371, 9.60376
                 longueur = 58.4364
                 ruptures = [0, 85]
              composantes = [u'spline-0.spl-#0']
      nb pts ctl par comp = [86]
[debugNSplineComposee] (module testsplinecomposee.py)
points = [[0.19826802992985915, 0.018375252365315314], [20.0, 20.0], [0.19794480287106944, 0.01834272070354981], [0.19697698698919552, 0.01824623677494185], [0.1953702774774006, 0.01808958902653576], [0.1931358288664241, 0.017875693144972733], [0.19028583428723386, 0.01760562296168915], [0.1868384545974718, 0.017285054837965958], [0.18281511090777094, 0.016918270906626755], [0.17824096488117602, 0.016509173891976356], [0.17314462530889335, 0.016061944817467724], [0.1675537430578259, 0.015604499212682851], [0.1614973286514877, 0.015174339851535011], [0.15501547409801616, 0.01476301544479541], [0.14814887473118243, 0.014382204411655422], [0.14094161664548843, 0.01404602543987262], [0.13343803740726204, 0.013764527900251714], [0.1256843102751743, 0.013546355402456866], [0.1177282015279396, 0.013398542247611191], [0.10961878381119616, 0.013326344604007705], [0.10140777069911935, 0.013335842122885983], [0.09314601025397072, 0.013437177093512255], [0.08488781796914449, 0.013578520269711385], [0.0766738953033627, 0.013632458196371353], [0.06856323591182992, 0.01353409905950416], [0.0606164488281708, 0.013304461167690542], [0.052856052892464526, 0.013059342449209069], [0.0453684474302355, 0.012514624670064105], [0.03820317405116831, 0.011700858252567226], [0.031465000658872685, 0.010325988475611092], [0.02522516382607276, 0.00854410860172671], [0.019555599369543694, 0.006368827976875956], [0.01464147968249857, 0.0036669939851828783], [0.010529683712971444, 0.0006142797736657014], [0.007168508215863512, -0.00250386359329716], [0.00460892851572893, -0.005638541978805265], [0.0028090701540139096, -0.008578221534910934], [0.001731126981130246, -0.011241889812954544], [0.0013226130588773338, -0.013436226900254741], [0.0012463666899211606, -0.015048272995508682], [0.0012621750824154676, -0.01603165306198891], [0.0013064793274175368, -0.016354383168070755], [0.0019002545933359677, -0.0178178378697296], [0.003038224543861656, -0.018879043993261704], [0.006016449460611098, -0.0200909099225535], [0.007469754807355844, -0.020376634901748375], [0.008726095549224322, -0.020529904553889606], [0.014218400219488211, -0.023878902334992402], [0.014398081644958094, -0.02396735630809685], [0.015197198260028882, -0.024281834892644814], [0.01673211185050706, -0.02475624420294783], [0.018932617419180384, -0.02520978219708351], [0.021785463220938397, -0.025645905463240734], [0.02522271140842708, -0.026064196531377606], [0.02925574495723343, -0.02641152974422608], [0.033845237305718284, -0.02653221514625864], [0.038947430958838715, -0.026354055912099918], [0.044511523245849116, -0.025839955920168155], [0.05050040896951644, -0.025145329314118246], [0.056870487659067694, -0.02427306330197574], [0.06357222892430342, -0.023194541295967246], [0.07055098958531437, -0.0218879648783359], [0.07774646013511402, -0.02034773888235674], [0.0851068986184996, -0.01857801400192227], [0.09257000987875212, -0.016548089775460923], [0.100088359797009, -0.014301530106094675], [0.10763999263062264, -0.012013147317012961], [0.11518796289582062, -0.009711882843429363], [0.12267813649910199, -0.007387868565333472], [0.1300501425379935, -0.005046629027279274], [0.1372535147043784, -0.0027089344571262853], [0.14424065209121723, -0.0003965631537611957], [0.15096584323243173, 0.0018687037590304888], [0.15738624966634163, 0.004067831221825499], [0.16345932580186817, 0.006183734681924342], [0.1691446587959791, 0.008199471951596279], [0.17440606971176356, 0.010090095613349616], [0.17921687846293866, 0.011799444411978706], [0.18354939054638394, 0.01330904520554502], [0.1873705697642064, 0.014625728742846317], [0.19065150614664395, 0.01575138642783522], [0.19336806025808184, 0.01668368161808636], [0.19550075540526604, 0.01741770279166735], [0.19703464221667694, 0.01794759421565453], [0.19795916180677225, 0.018268009236940826], [0.19826802992985915, 0.018375252365315314]]
[debugNSplineComposee] (module testsplinecomposee.py)

    S.insertPoint(pt,43) spline-0.spl
    ---------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = spline-0.spl
                     role = NSplineComposee
          nb pts controle = 87
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0, 0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000]
      mode echantillonage = ['courbure']
       nb pts echantillon = [50]
         largeur, hauteur = 22.1352, 22.1209
              position cg = 8.07606, 8.66936
                 longueur = 124.154
                 ruptures = [0, 86]
              composantes = [u'spline-0.spl-#0']
      nb pts ctl par comp = [87]
[debugNSplineComposee] (module testsplinecomposee.py)

    S[0] = (2,0.5) (spline-0.spl)
    -----------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = spline-0.spl
                     role = NSplineComposee
          nb pts controle = 87
                   closed = False
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0, 0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000]
      mode echantillonage = ['courbure']
       nb pts echantillon = [50]
         largeur, hauteur = 22.1354, 22.094
              position cg = 8.11021, 8.63357
                 longueur = 122.349
                 ruptures = [0, 86]
              composantes = [u'spline-0.spl-#0']
      nb pts ctl par comp = [87]
[debugNSplineComposee] (module testsplinecomposee.py)

    S[len(S)-1] = S[0] (spline-0.spl)
    ---------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = spline-0.spl
                     role = NSplineComposee
          nb pts controle = 87
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0, 0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000]
      mode echantillonage = ['courbure']
       nb pts echantillon = [50]
         largeur, hauteur = 22.1354, 22.0938
              position cg = 8.11148, 8.63507
                 longueur = 124.215
                 ruptures = [0, 86]
              composantes = [u'spline-0.spl-#0']
      nb pts ctl par comp = [87]
[debugNSplineComposee] (module testsplinecomposee.py)

    S.appendPoint((2,1.5)) (spline-0.spl)
    -------------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = spline-0.spl
                     role = NSplineComposee
          nb pts controle = 88
                   closed = False
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0, 0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000]
      mode echantillonage = ['courbure']
       nb pts echantillon = [50]
         largeur, hauteur = 22.1354, 22.0939
              position cg = 8.10324, 8.62486
                 longueur = 125.276
                 ruptures = [0, 87]
              composantes = [u'spline-0.spl-#0']
      nb pts ctl par comp = [88]
[debugNSplineComposee] (module testsplinecomposee.py)

    S.insertPoint((2,-2)) (spline-0.spl)
    ------------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = spline-0.spl
                     role = NSplineComposee
          nb pts controle = 89
                   closed = False
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0, 0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000]
      mode echantillonage = ['courbure']
       nb pts echantillon = [50]
         largeur, hauteur = 22.1353, 22.3535
              position cg = 8.04197, 8.53818
                 longueur = 128.784
                 ruptures = [0, 88]
              composantes = [u'spline-0.spl-#0']
      nb pts ctl par comp = [89]
[debugNSplineComposee] (module testsplinecomposee.py)

    S.insertPoint((6,0)) (spline-0.spl)
    -----------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = spline-0.spl
                     role = NSplineComposee
          nb pts controle = 90
                   closed = False
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0, 0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000]
      mode echantillonage = ['courbure']
       nb pts echantillon = [50]
         largeur, hauteur = 22.1353, 22.3513
              position cg = 9.72299, 8.65661
                 longueur = 131.124
                 ruptures = [0, 89]
              composantes = [u'spline-0.spl-#0']
      nb pts ctl par comp = [90]
[debugNSplineComposee] (module testsplinecomposee.py)

    S.removePoint(3) (spline-0.spl)
    -------------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = spline-0.spl
                     role = NSplineComposee
          nb pts controle = 89
                   closed = False
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0, 0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000]
      mode echantillonage = ['courbure']
       nb pts echantillon = [50]
         largeur, hauteur = 22.1353, 22.3513
              position cg = 9.7223, 8.65686
                 longueur = 131.124
                 ruptures = [0, 88]
              composantes = [u'spline-0.spl-#0']
      nb pts ctl par comp = [89]
[debugNSplineComposee] (module testsplinecomposee.py)

    S._update() (spline-0.spl)
    --------------------------

[debugNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = spline-0.spl
                     role = NSplineComposee
          nb pts controle = 89
                   closed = False
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0, 0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000]
      mode echantillonage = ['courbure']
       nb pts echantillon = [50]
         largeur, hauteur = 22.1353, 22.3513
              position cg = 9.7223, 8.65686
                 longueur = 131.126
                 ruptures = [0, 88]
              composantes = [u'spline-0.spl-#0']
      nb pts ctl par comp = [89]
[debugNSplineComposee] (module testsplinecomposee.py)
=======================================
Fin debugNSplineComposee : spline-0.spl
=======================================


[testNSplineComposee] (module testsplinecomposee.py)
====================================
testNSplineComposee : (spline-0.spl)
====================================


[testNSplineComposee] (module testsplinecomposee.py)

    1. Constructeur vide
    --------------------

[testNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = vide
                     role = NSplineComposee
          nb pts controle = 1
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = []
    nb pts discretisation = []
      mode echantillonage = []
       nb pts echantillon = []
         largeur, hauteur = 0, 0
              position cg = 0, 0
                 longueur = 0
                 ruptures = [0]
              composantes = []
      nb pts ctl par comp = []
[testNSplineComposee] (module testsplinecomposee.py)

    methode-0 : [('cubic', 'natural'), ('cubic', 'natural')] (spline-0.spl)
    -----------------------------------------------------------------------

[testNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = spline-0.spl-1
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', 'natural'), ('cubic', 'natural')]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [100, 100]
         largeur, hauteur = 1, 0.193929
              position cg = 0.378884, 0.00211538
                 longueur = 2.08596
                 ruptures = [0, 40, 85]
              composantes = [u'spline-0.spl-1-#0', u'spline-0.spl-1-#1']
      nb pts ctl par comp = [41, 46]
[testNSplineComposee] (module testsplinecomposee.py)

    methode-1 : [('cubic', ((1, 0, 3.14), (1, 0, -3.14))), ('cubic', ((1, 0, 0), (1, 0, 0)))] (spline-0.spl)
    --------------------------------------------------------------------------------------------------------

[testNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = spline-0.spl-2
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((1, 0, 3.14), (1, 0, -3.14))), ('cubic', ((1, 0, 0), (1, 0, 0)))]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [100, 100]
         largeur, hauteur = 1, 0.193929
              position cg = 0.378879, 0.00211539
                 longueur = 2.08753
                 ruptures = [0, 40, 85]
              composantes = [u'spline-0.spl-2-#0', u'spline-0.spl-2-#1']
      nb pts ctl par comp = [41, 46]
[testNSplineComposee] (module testsplinecomposee.py)

    methode-2 : [('cubic', 'not-a-knot'), ('cubic', 'not-a-knot')] (spline-0.spl)
    -----------------------------------------------------------------------------

[testNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = spline-0.spl-3
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', 'not-a-knot'), ('cubic', 'not-a-knot')]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [100, 100]
         largeur, hauteur = 1.00003, 0.193929
              position cg = 0.37888, 0.00211534
                 longueur = 2.08601
                 ruptures = [0, 40, 85]
              composantes = [u'spline-0.spl-3-#0', u'spline-0.spl-3-#1']
      nb pts ctl par comp = [41, 46]
[testNSplineComposee] (module testsplinecomposee.py)

    methode-3 : [['cubic', ((1, 0, 2), (1, 0, -2))], ['cubic', ((1, 1, 0), (1, 1, 0))]] (spline-0.spl)
    --------------------------------------------------------------------------------------------------

[testNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = spline-0.spl-4
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [['cubic', ((1, 0, 2), (1, 0, -2))], ['cubic', ((1, 1, 0), (1, 1, 0))]]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [100, 100]
         largeur, hauteur = 1, 0.193929
              position cg = 0.378898, 0.00211555
                 longueur = 2.08754
                 ruptures = [0, 40, 85]
              composantes = [u'spline-0.spl-4-#0', u'spline-0.spl-4-#1']
      nb pts ctl par comp = [41, 46]
[testNSplineComposee] (module testsplinecomposee.py)

    methode-4 : [('cubic', ((2, 0, 0), (1, 0, -5))), ('cubic', ((1, 0, -5), (2, 0, 0)))] (spline-0.spl)
    ---------------------------------------------------------------------------------------------------

[testNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = spline-0.spl-5
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0, 0), (1, 0, -5))), ('cubic', ((1, 0, -5), (2, 0, 0)))]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [100, 100]
         largeur, hauteur = 1, 0.193929
              position cg = 0.378875, 0.00211524
                 longueur = 2.08959
                 ruptures = [0, 40, 85]
              composantes = [u'spline-0.spl-5-#0', u'spline-0.spl-5-#1']
      nb pts ctl par comp = [41, 46]
[testNSplineComposee] (module testsplinecomposee.py)

    hardScale : spline-0.spl
    ------------------------

[testNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = spline-0.spl-5
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0.0, 0.0), (1, 0.0, -1.0))), ('cubic', ((1, 0.0, -1.0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [100, 100]
         largeur, hauteur = 0.2, 0.0387857
              position cg = 0.452251, -0.00241946
                 longueur = 0.417918
                 ruptures = [0, 40, 85]
              composantes = [u'spline-0.spl-5-#0', u'spline-0.spl-5-#1']
      nb pts ctl par comp = [41, 46]
[testNSplineComposee] (module testsplinecomposee.py)

    translate((-1.5,0.05)) : spline-0.spl
    -------------------------------------

[testNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = spline-0.spl-5
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0.0, 0.0), (1, 0.0, -1.0))), ('cubic', ((1, 0.0, -1.0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [100, 100]
         largeur, hauteur = 0.2, 0.0387857
              position cg = -1.04775, 0.0475805
                 longueur = 0.417918
                 ruptures = [0, 40, 85]
              composantes = [u'spline-0.spl-5-#0', u'spline-0.spl-5-#1']
      nb pts ctl par comp = [41, 46]
[testNSplineComposee] (module testsplinecomposee.py)

    hardRotate(30) : spline-0.spl
    -----------------------------

[testNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = spline-0.spl-5
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [['cubic', [(2, 0.0, 0.0), (1, 0.49999999999999994, -0.8660254037844387)]], ['cubic', [(1, 0.49999999999999994, -0.8660254037844387), (2, 0.0, 0.0)]]]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [100, 100]
         largeur, hauteur = 0.174596, 0.1027
              position cg = -1.04586, 0.0382567
                 longueur = 0.417918
                 ruptures = [0, 40, 85]
              composantes = [u'spline-0.spl-5-#0', u'spline-0.spl-5-#1']
      nb pts ctl par comp = [41, 46]
[testNSplineComposee] (module testsplinecomposee.py)

    symetriser(1) : spline-0.spl
    ----------------------------

[testNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = spline-0.spl-5
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0.0, -0.0), (1, 0.49999999999999994, 0.8660254037844387))), ('cubic', ((1, 0.49999999999999994, 0.8660254037844387), (2, 0.0, -0.0)))]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [100, 100]
         largeur, hauteur = 0.174596, 0.1027
              position cg = -1.04586, 0.054637
                 longueur = 0.417918
                 ruptures = [0, 40, 85]
              composantes = [u'spline-0.spl-5-#0', u'spline-0.spl-5-#1']
      nb pts ctl par comp = [41, 46]
[testNSplineComposee] (module testsplinecomposee.py)

    symetriser(1) : spline-0.spl
    ----------------------------

[testNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = spline-0.spl
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [['cubic', ((2, 0, 0), (1, 0, -20))], ['cubic', ((1, 0, -20), (2, 0, 0))]]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [20, 10]
         largeur, hauteur = 1, 0.193929
              position cg = 0.378852, 0.00211315
                 longueur = 2.1524
                 ruptures = [0, 40, 85]
              composantes = [u'spline-0.spl-#0', u'spline-0.spl-#1']
      nb pts ctl par comp = [41, 46]
[testNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = spline-0.spl
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0.0, 0.0), (1, 0.0, -4.0))), ('cubic', ((1, 0.0, -4.0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [20, 10]
         largeur, hauteur = 0.2, 0.0387857
              position cg = 0.0757705, 0.00042263
                 longueur = 0.43048
                 ruptures = [0, 40, 85]
              composantes = [u'spline-0.spl-#0', u'spline-0.spl-#1']
      nb pts ctl par comp = [41, 46]
[testNSplineComposee] (module testsplinecomposee.py)
<NSplineComposee>
                     name = spline-0.spl
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [['cubic', [(2, 0.0, 0.0), (1, 0.6945927106677213, -3.939231012048832)]], ['cubic', [(1, 0.6945927106677213, -3.939231012048832), (2, 0.0, 0.0)]]]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [20, 10]
         largeur, hauteur = 0.197134, 0.0449081
              position cg = 0.0758525, -0.00278077
                 longueur = 0.43048
                 ruptures = [0, 40, 85]
              composantes = [u'spline-0.spl-#0', u'spline-0.spl-#1']
      nb pts ctl par comp = [41, 46]
[testNSplineComposee] (module testsplinecomposee.py)
join_1 = <NSplineComposee>
                     name = spline-0.spl
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [['cubic', [(2, 0.0, 0.0), (1, 0.6945927106677213, -3.939231012048832)]], ['cubic', [(1, 0.6945927106677213, -3.939231012048832), (2, 0.0, 0.0)]]]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [20, 10]
         largeur, hauteur = 0.197134, 0.0449081
              position cg = 0.0758525, -0.00278077
                 longueur = 0.43048
                 ruptures = [0, 40, 85]
              composantes = [u'spline-0.spl-#0', u'spline-0.spl-#1']
      nb pts ctl par comp = [41, 46] ; R = [[ 0.19826803  0.01837525]
 [ 0.00130648 -0.01635438]
 [ 0.19826803  0.01837525]]
[testNSplineComposee] (module testsplinecomposee.py)
S = <NSplineComposee>
                     name = spline-0.spl
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [['cubic', [(2, 0.0, 0.0), (1, 0.6945927106677213, -3.939231012048832)]], ['cubic', [(1, 0.6945927106677213, -3.939231012048832), (2, 0.0, 0.0)]]]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [20, 10]
         largeur, hauteur = 0.197134, 0.0449081
              position cg = 0.0758525, -0.00278077
                 longueur = 0.43048
                 ruptures = [0, 40, 85]
              composantes = [u'spline-0.spl-#0', u'spline-0.spl-#1']
      nb pts ctl par comp = [41, 46] ; R = [[ 0.19826803  0.01837525]
 [ 0.00130648 -0.01635438]
 [ 0.19826803  0.01837525]]
[testNSplineComposee] (module testsplinecomposee.py)
join_1 = <NSplineComposee>
                     name = spline-0.spl
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [['cubic', [(1, 0.6945927106677213, -3.939231012048832), (2, 0.0, 0.0)]]]
    nb pts discretisation = [1000]
      mode echantillonage = ['courbure']
       nb pts echantillon = [10]
         largeur, hauteur = 0.197028, 0.0454
              position cg = 0.0758637, -0.00277833
                 longueur = 0.419011
                 ruptures = [0, 85]
              composantes = [u'spline-0.spl-#0']
      nb pts ctl par comp = [86] ; R = [[0.19826803 0.01837525]
 [0.19826803 0.01837525]]
[testNSplineComposee] (module testsplinecomposee.py)
split_nba = <NSplineComposee>
                     name = spline-0.spl
                     role = NSplineComposee
          nb pts controle = 86
                   closed = True
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((1, 0.6945927106677213, -3.939231012048832), (2, 0, 0))), ('cubic', ((2, 0, 0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000, 1000]
      mode echantillonage = ['courbure', 'courbure']
       nb pts echantillon = [10, 10]
         largeur, hauteur = 0.19703, 0.0460514
              position cg = 0.0758636, -0.00277822
                 longueur = 0.421709
                 ruptures = [0, 40, 85]
              composantes = [u'spline-0.spl-#0', u'spline-0.spl-#1']
      nb pts ctl par comp = [41, 46] ; R = [[ 0.19826803  0.01837525]
 [ 0.00130648 -0.01635438]
 [ 0.19826803  0.01837525]]
[testNSplineComposee] (module testsplinecomposee.py)
normal ; On tente la suppression d'un point anguleux (40)
[testNSplineComposee] (module testsplinecomposee.py)
points = [[0.19826802992985915, 0.018375252365315314], [20.0, 20.0], [0.19794480287106944, 0.01834272070354981], [0.19697698698919552, 0.01824623677494185], [0.1953702774774006, 0.01808958902653576], [0.1931358288664241, 0.017875693144972733], [0.19028583428723386, 0.01760562296168915], [0.1868384545974718, 0.017285054837965958], [0.18281511090777094, 0.016918270906626755], [0.17824096488117602, 0.016509173891976356], [0.17314462530889335, 0.016061944817467724], [0.1675537430578259, 0.015604499212682851], [0.1614973286514877, 0.015174339851535011], [0.15501547409801616, 0.01476301544479541], [0.14814887473118243, 0.014382204411655422], [0.14094161664548843, 0.01404602543987262], [0.13343803740726204, 0.013764527900251714], [0.1256843102751743, 0.013546355402456866], [0.1177282015279396, 0.013398542247611191], [0.10961878381119616, 0.013326344604007705], [0.10140777069911935, 0.013335842122885983], [0.09314601025397072, 0.013437177093512255], [0.08488781796914449, 0.013578520269711385], [0.0766738953033627, 0.013632458196371353], [0.06856323591182992, 0.01353409905950416], [0.0606164488281708, 0.013304461167690542], [0.052856052892464526, 0.013059342449209069], [0.0453684474302355, 0.012514624670064105], [0.03820317405116831, 0.011700858252567226], [0.031465000658872685, 0.010325988475611092], [0.02522516382607276, 0.00854410860172671], [0.019555599369543694, 0.006368827976875956], [0.01464147968249857, 0.0036669939851828783], [0.010529683712971444, 0.0006142797736657014], [0.007168508215863512, -0.00250386359329716], [0.00460892851572893, -0.005638541978805265], [0.0028090701540139096, -0.008578221534910934], [0.001731126981130246, -0.011241889812954544], [0.0013226130588773338, -0.013436226900254741], [0.0012463666899211606, -0.015048272995508682], [0.0012621750824154676, -0.01603165306198891], [0.0019002545933359677, -0.0178178378697296], [0.003038224543861656, -0.018879043993261704], [0.004454154613897199, -0.019624031721912582], [0.006016449460611098, -0.0200909099225535], [0.007469754807355844, -0.020376634901748375], [0.008726095549224322, -0.020529904553889606], [0.014218400219488211, -0.023878902334992402], [0.014398081644958094, -0.02396735630809685], [0.015197198260028882, -0.024281834892644814], [0.01673211185050706, -0.02475624420294783], [0.018932617419180384, -0.02520978219708351], [0.021785463220938397, -0.025645905463240734], [0.02522271140842708, -0.026064196531377606], [0.02925574495723343, -0.02641152974422608], [0.033845237305718284, -0.02653221514625864], [0.038947430958838715, -0.026354055912099918], [0.044511523245849116, -0.025839955920168155], [0.05050040896951644, -0.025145329314118246], [0.056870487659067694, -0.02427306330197574], [0.06357222892430342, -0.023194541295967246], [0.07055098958531437, -0.0218879648783359], [0.07774646013511402, -0.02034773888235674], [0.0851068986184996, -0.01857801400192227], [0.09257000987875212, -0.016548089775460923], [0.100088359797009, -0.014301530106094675], [0.10763999263062264, -0.012013147317012961], [0.11518796289582062, -0.009711882843429363], [0.12267813649910199, -0.007387868565333472], [0.1300501425379935, -0.005046629027279274], [0.1372535147043784, -0.0027089344571262853], [0.14424065209121723, -0.0003965631537611957], [0.15096584323243173, 0.0018687037590304888], [0.15738624966634163, 0.004067831221825499], [0.16345932580186817, 0.006183734681924342], [0.1691446587959791, 0.008199471951596279], [0.17440606971176356, 0.010090095613349616], [0.17921687846293866, 0.011799444411978706], [0.18354939054638394, 0.01330904520554502], [0.1873705697642064, 0.014625728742846317], [0.19065150614664395, 0.01575138642783522], [0.19336806025808184, 0.01668368161808636], [0.19550075540526604, 0.01741770279166735], [0.19703464221667694, 0.01794759421565453], [0.19795916180677225, 0.018268009236940826], [0.19826802992985915, 0.018375252365315314]]
<NSplineComposee>
                     name = spline-0.spl
                     role = NSplineComposee
          nb pts controle = 90
                   closed = False
       nb_splines, n_bech = 0, 0
                  methode = [('cubic', ((2, 0, 0), (2, 0.0, 0.0)))]
    nb pts discretisation = [1000]
      mode echantillonage = ['courbure']
       nb pts echantillon = [10]
         largeur, hauteur = 22.598, 22.1758
              position cg = 9.9613, 8.71364
                 longueur = 130.631
                 ruptures = [0, 89]
              composantes = [u'spline-0.spl-#0']
      nb pts ctl par comp = [90]
[testNSplineComposee] (module testsplinecomposee.py)
========================================
Fin testNSplineComposee : (spline-0.spl)
========================================


